<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="::vl::reflection::description::IsInterfaceType(* ITypeDescriptor,&amp; bool)">
    <FuncDecl Access="Public" Name="IsInterfaceType" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IsInterfaceType" OverloadKey="::vl::reflection::description::IsInterfaceType(* ITypeDescriptor,&amp; bool)" Virtual="Normal" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="bool" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="typeDescriptor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IsInterfaceType::typeDescriptor" OverloadKey="::vl::reflection::description::IsInterfaceType(* ITypeDescriptor,&amp; bool)::typeDescriptor" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="acceptProxy" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IsInterfaceType::acceptProxy" OverloadKey="::vl::reflection::description::IsInterfaceType(* ITypeDescriptor,&amp; bool)::acceptProxy" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <RefTypeDecl Name="bool" />
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
</OverloadingSymbols>