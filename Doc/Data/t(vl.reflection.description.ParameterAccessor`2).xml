<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="vl.reflection.description.ParameterAccessor`2">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::ParameterAccessor`2::T" To="::vl::reflection::description::ParameterAccessor`2" />
        <Map From="::vl::reflection::description::ParameterAccessor`2::Flag" To="::vl::reflection::description::ParameterAccessor`2" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`2" DisplayName="ParameterAccessor struct" Doc="false" />
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.ParameterAccessor`2{Func{function (... TArgs) # R},TypeFlags.FunctionType}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::ParameterAccessor`2&lt;Func&lt;function (... TArgs) : R&gt;,TypeFlags::FunctionType&gt;::R" To="::vl::reflection::description::ParameterAccessor`2&lt;Func&lt;function (... TArgs) : R&gt;,TypeFlags::FunctionType&gt;" />
        <Map From="::vl::reflection::description::ParameterAccessor`2&lt;Func&lt;function (... TArgs) : R&gt;,TypeFlags::FunctionType&gt;::TArgs" To="::vl::reflection::description::ParameterAccessor`2&lt;Func&lt;function (... TArgs) : R&gt;,TypeFlags::FunctionType&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`2&lt;Func&lt;function (... TArgs) : R&gt;,TypeFlags::FunctionType&gt;" DisplayName="ParameterAccessor struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`2&lt;Func&lt;function (... TArgs) : R&gt;,TypeFlags::FunctionType&gt;::BoxParameter(&amp; const Func&lt;function (... TArgs) : R&gt;,* ITypeDescriptor)" DisplayName="BoxParameter method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`2&lt;Func&lt;function (... TArgs) : R&gt;,TypeFlags::FunctionType&gt;::UnboxParameter(&amp; const Value,&amp; Func&lt;function (... TArgs) : R&gt;,* ITypeDescriptor,&amp; const WString)" DisplayName="UnboxParameter method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.ParameterAccessor`2{const Func{function (... TArgs) # R},TypeFlags.FunctionType}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::ParameterAccessor`2&lt;const Func&lt;function (... TArgs) : R&gt;,TypeFlags::FunctionType&gt;::R" To="::vl::reflection::description::ParameterAccessor`2&lt;const Func&lt;function (... TArgs) : R&gt;,TypeFlags::FunctionType&gt;" />
        <Map From="::vl::reflection::description::ParameterAccessor`2&lt;const Func&lt;function (... TArgs) : R&gt;,TypeFlags::FunctionType&gt;::TArgs" To="::vl::reflection::description::ParameterAccessor`2&lt;const Func&lt;function (... TArgs) : R&gt;,TypeFlags::FunctionType&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`2&lt;const Func&lt;function (... TArgs) : R&gt;,TypeFlags::FunctionType&gt;" DisplayName="ParameterAccessor struct" Doc="false" />
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>