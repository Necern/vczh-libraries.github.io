<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="::vl::CriticalSection">
    <ClassDecl Access="Public" Name="CriticalSection" Tags="x64, Windows;x86, Windows" NameKey="::vl::CriticalSection" OverloadKey="::vl::CriticalSection" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;
Critical section. It is similar to mutex, but in Windows, enter a owned critical section will not cause dead lock.
The macro "CS_LOCK" is encouraged to use instead of calling &lt;links&gt;&lt;link cref="::vl::CriticalSection::Enter()@s:vl.CriticalSection" /&gt;&lt;/links&gt; and &lt;links&gt;&lt;link cref="::vl::CriticalSection::Leave()@s:vl.CriticalSection" /&gt;&lt;/links&gt; like this:
CS_LOCK(yourCriticalSection)
{
	&amp;lt;code&amp;gt;
}
&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <VarDecl Access="Private" Name="internalData" Tags="x64, Windows;x86, Windows" NameKey="::vl::CriticalSection::internalData" OverloadKey="::vl::CriticalSection::internalData" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <SubTypeDecl Name="CriticalSectionData">
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::threading_internal" Name="threading_internal">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::threading_internal" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="CriticalSection" Tags="x64, Windows;x86, Windows" NameKey="::vl::CriticalSection::CriticalSection" OverloadKey="::vl::CriticalSection::CriticalSection()" Virtual="Normal" Function="Constructor">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Create a critical section.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~CriticalSection" Tags="x64, Windows;x86, Windows" NameKey="::vl::CriticalSection::~CriticalSection" OverloadKey="::vl::CriticalSection::~CriticalSection()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="TryEnter" Tags="x64, Windows;x86, Windows" NameKey="::vl::CriticalSection::TryEnter" OverloadKey="::vl::CriticalSection::TryEnter()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Try enter a critical section. This function will return immediately.&lt;/summary&gt;
  &lt;returns&gt;Returns true if the current thread owned the critical section.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Enter" Tags="x64, Windows;x86, Windows" NameKey="::vl::CriticalSection::Enter" OverloadKey="::vl::CriticalSection::Enter()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Enter a critical section.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Leave" Tags="x64, Windows;x86, Windows" NameKey="::vl::CriticalSection::Leave" OverloadKey="::vl::CriticalSection::Leave()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Leave a critical section.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <ClassDecl Access="Public" Name="Scope" Tags="x64, Windows;x86, Windows" NameKey="::vl::CriticalSection::Scope" OverloadKey="::vl::CriticalSection::Scope" ClassType="Class">
          <Children>
            <VarDecl Access="Private" Name="criticalSection" Tags="x64, Windows;x86, Windows" NameKey="::vl::CriticalSection::Scope::criticalSection" OverloadKey="::vl::CriticalSection::Scope::criticalSection" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::CriticalSection" Name="CriticalSection">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::CriticalSection@s:vl.CriticalSection" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <FuncDecl Access="Public" Name="Scope" Tags="x64, Windows;x86, Windows" NameKey="::vl::CriticalSection::Scope::Scope" OverloadKey="::vl::CriticalSection::Scope::Scope(&amp; CriticalSection)" Virtual="Normal" Function="Constructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="_criticalSection" Tags="x64, Windows;x86, Windows" NameKey="::vl::CriticalSection::Scope::Scope::_criticalSection" OverloadKey="::vl::CriticalSection::Scope::Scope(&amp; CriticalSection)::_criticalSection" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::CriticalSection" Name="CriticalSection">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::CriticalSection@s:vl.CriticalSection" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="~Scope" Tags="x64, Windows;x86, Windows" NameKey="::vl::CriticalSection::Scope::~Scope" OverloadKey="::vl::CriticalSection::Scope::~Scope()" Virtual="Normal" Function="Destructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Object@s:vl.Object" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::NotCopyable" Name="NotCopyable">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::NotCopyable@s:vl.NotCopyable" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::NotCopyable" Name="NotCopyable">
              <ReferencingOverloadKeys>
                <Key Value="::vl::NotCopyable@s:vl.NotCopyable" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>