<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="::vl::regex::RegexLexerWalker">
    <SymbolTree NamespaceUrlName="vl.regex">
      <SymbolParentMapping />
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex::RegexLexerWalker" DisplayName="RegexLexerWalker class" Doc="true">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex::RegexLexerWalker::pure" DisplayName="pure field" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex::RegexLexerWalker::stateTokens" DisplayName="stateTokens field" Doc="false" />
        <Overloads DisplayName="RegexLexerWalker constructor">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex::RegexLexerWalker::RegexLexerWalker(* regex_internal::PureInterpretor,&amp; const collections::Array&lt;vint&gt;)" DisplayName="RegexLexerWalker constructor" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex::RegexLexerWalker::RegexLexerWalker(&amp; const RegexLexerWalker)" DisplayName="RegexLexerWalker constructor" Doc="false" />
        </Overloads>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex::RegexLexerWalker::~RegexLexerWalker()" DisplayName="~RegexLexerWalker destructor" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex::RegexLexerWalker::GetStartState()const" DisplayName="GetStartState method" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex::RegexLexerWalker::GetRelatedToken(vint)const" DisplayName="GetRelatedToken method" Doc="true" />
        <Overloads DisplayName="Walk method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex::RegexLexerWalker::Walk(wchar_t,&amp; vint,&amp; vint,&amp; bool,&amp; bool)const" DisplayName="Walk method" Doc="true" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex::RegexLexerWalker::Walk(wchar_t,vint)const" DisplayName="Walk method" Doc="true" />
        </Overloads>
        <Overloads DisplayName="IsClosedToken method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex::RegexLexerWalker::IsClosedToken(* const wchar_t,vint)const" DisplayName="IsClosedToken method" Doc="true" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex::RegexLexerWalker::IsClosedToken(&amp; const WString)const" DisplayName="IsClosedToken method" Doc="true" />
        </Overloads>
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>