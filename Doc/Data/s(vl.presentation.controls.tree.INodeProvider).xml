<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="::vl::presentation::controls::tree::INodeProvider">
    <ClassDecl Access="Public" Name="INodeProvider" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeProvider" OverloadKey="::vl::presentation::controls::tree::INodeProvider" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Represents a node.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <FuncDecl Access="Public" Name="GetExpanding" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeProvider::GetExpanding" OverloadKey="::vl::presentation::controls::tree::INodeProvider::GetExpanding()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the expanding state of this node.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this node is expanded.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetExpanding" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeProvider::SetExpanding" OverloadKey="::vl::presentation::controls::tree::INodeProvider::SetExpanding(bool)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Set the expanding state of this node.&lt;/summary&gt;
  &lt;param name="value"&gt;Set to true to expand this node.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeProvider::SetExpanding::value" OverloadKey="::vl::presentation::controls::tree::INodeProvider::SetExpanding(bool)::value" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="CalculateTotalVisibleNodes" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeProvider::CalculateTotalVisibleNodes" OverloadKey="::vl::presentation::controls::tree::INodeProvider::CalculateTotalVisibleNodes()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Calculate the number of total visible nodes of this node. The number of total visible nodes includes the node itself, and all total visible nodes of all visible sub nodes. If this node is collapsed, this number will be 1.&lt;/summary&gt;
  &lt;returns&gt;The number of total visible nodes.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetChildCount" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeProvider::GetChildCount" OverloadKey="::vl::presentation::controls::tree::INodeProvider::GetChildCount()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the number of all sub nodes.&lt;/summary&gt;
  &lt;returns&gt;The number of all sub nodes.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetParent" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeProvider::GetParent" OverloadKey="::vl::presentation::controls::tree::INodeProvider::GetParent()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the parent node. This function increases the reference counter to the result node. If the sub node is not longer needed, a call to &lt;links&gt;&lt;link cref="::vl::presentation::controls::tree::INodeProvider::Release()@s:vl.presentation.controls.tree.INodeProvider" /&gt;&lt;/links&gt; is required.&lt;/summary&gt;
  &lt;returns&gt;The parent node.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::tree::INodeProvider" Name="INodeProvider">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::controls::tree::INodeProvider@s:vl.presentation.controls.tree.INodeProvider" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetChild" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeProvider::GetChild" OverloadKey="::vl::presentation::controls::tree::INodeProvider::GetChild(vint)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the instance of a specified sub node. This function increases the reference counter to the result node. If the sub node is not longer needed, a call to &lt;links&gt;&lt;link cref="::vl::presentation::controls::tree::INodeProvider::Release()@s:vl.presentation.controls.tree.INodeProvider" /&gt;&lt;/links&gt; is required.&lt;/summary&gt;
  &lt;returns&gt;The instance of a specified sub node.&lt;/returns&gt;
  &lt;param name="index"&gt;The index of the sub node.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::tree::INodeProvider" Name="INodeProvider">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::controls::tree::INodeProvider@s:vl.presentation.controls.tree.INodeProvider" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeProvider::GetChild::index" OverloadKey="::vl::presentation::controls::tree::INodeProvider::GetChild(vint)::index" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Increase" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeProvider::Increase" OverloadKey="::vl::presentation::controls::tree::INodeProvider::Increase()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Increase the reference counter. Use &lt;links&gt;&lt;link cref="::vl::presentation::controls::tree::INodeProvider::Release()@s:vl.presentation.controls.tree.INodeProvider" /&gt;&lt;/links&gt; to decrease the reference counter.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Release" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeProvider::Release" OverloadKey="::vl::presentation::controls::tree::INodeProvider::Release()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Decrease the reference counter. If the counter is zero, the node will be deleted. Use &lt;links&gt;&lt;link cref="::vl::presentation::controls::tree::INodeProvider::Increase()@s:vl.presentation.controls.tree.INodeProvider" /&gt;&lt;/links&gt; to increase the reference counter.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::IDescriptable" Name="IDescriptable">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::IDescriptable@s:vl.reflection.IDescriptable" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::Description" Name="Description">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::Description`1@s:vl.reflection.Description`1" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::tree::INodeProvider" Name="INodeProvider">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::controls::tree::INodeProvider@s:vl.presentation.controls.tree.INodeProvider" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>