<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="vl.parsing.json.JsonLiteral">
    <SymbolTree NamespaceUrlName="vl.parsing.json">
      <SymbolParentMapping>
        <Map From="::vl::parsing::json::JsonLiteral::JsonValue::True" To="::vl::parsing::json::JsonLiteral::JsonValue" />
        <Map From="::vl::parsing::json::JsonLiteral::JsonValue::False" To="::vl::parsing::json::JsonLiteral::JsonValue" />
        <Map From="::vl::parsing::json::JsonLiteral::JsonValue::Null" To="::vl::parsing::json::JsonLiteral::JsonValue" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::parsing::json::JsonLiteral" DisplayName="JsonLiteral class" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::parsing::json::JsonLiteral::JsonValue" DisplayName="JsonValue enum" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::parsing::json::JsonLiteral::value" DisplayName="value field" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::parsing::json::JsonLiteral::Accept(* JsonNode::IVisitor)" DisplayName="Accept method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::parsing::json::JsonLiteral::Convert(vl::Ptr&lt;vl::parsing::ParsingTreeNode&gt;,&amp; const vl::collections::List&lt;vl::regex::RegexToken&gt;)" DisplayName="Convert method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>