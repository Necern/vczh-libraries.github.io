<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="::vl::reflection::description::ValueAccessor`1&lt;* T,ITypeInfo::RawPtr&gt;">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::ValueAccessor`1&lt;* T,ITypeInfo::RawPtr&gt;::T" To="::vl::reflection::description::ValueAccessor`1&lt;* T,ITypeInfo::RawPtr&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueAccessor`1&lt;* T,ITypeInfo::RawPtr&gt;" DisplayName="ValueAccessor struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueAccessor`1&lt;* T,ITypeInfo::RawPtr&gt;::BoxValue(* T,* ITypeDescriptor)" DisplayName="BoxValue method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueAccessor`1&lt;* T,ITypeInfo::RawPtr&gt;::UnboxValue(&amp; const Value,* ITypeDescriptor,&amp; const WString)" DisplayName="UnboxValue method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="::vl::reflection::description::ValueAccessor`1&lt;Ptr&lt;T&gt;,ITypeInfo::SharedPtr&gt;">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::ValueAccessor`1&lt;Ptr&lt;T&gt;,ITypeInfo::SharedPtr&gt;::T" To="::vl::reflection::description::ValueAccessor`1&lt;Ptr&lt;T&gt;,ITypeInfo::SharedPtr&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueAccessor`1&lt;Ptr&lt;T&gt;,ITypeInfo::SharedPtr&gt;" DisplayName="ValueAccessor struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueAccessor`1&lt;Ptr&lt;T&gt;,ITypeInfo::SharedPtr&gt;::BoxValue(Ptr&lt;T&gt;,* ITypeDescriptor)" DisplayName="BoxValue method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueAccessor`1&lt;Ptr&lt;T&gt;,ITypeInfo::SharedPtr&gt;::UnboxValue(&amp; const Value,* ITypeDescriptor,&amp; const WString)" DisplayName="UnboxValue method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="::vl::reflection::description::ValueAccessor`1&lt;Nullable&lt;T&gt;,ITypeInfo::Nullable&gt;">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::ValueAccessor`1&lt;Nullable&lt;T&gt;,ITypeInfo::Nullable&gt;::T" To="::vl::reflection::description::ValueAccessor`1&lt;Nullable&lt;T&gt;,ITypeInfo::Nullable&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueAccessor`1&lt;Nullable&lt;T&gt;,ITypeInfo::Nullable&gt;" DisplayName="ValueAccessor struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueAccessor`1&lt;Nullable&lt;T&gt;,ITypeInfo::Nullable&gt;::BoxValue(Nullable&lt;T&gt;,* ITypeDescriptor)" DisplayName="BoxValue method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueAccessor`1&lt;Nullable&lt;T&gt;,ITypeInfo::Nullable&gt;::UnboxValue(&amp; const Value,* ITypeDescriptor,&amp; const WString)" DisplayName="UnboxValue method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="::vl::reflection::description::ValueAccessor`1&lt;T,ITypeInfo::TypeDescriptor&gt;">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::ValueAccessor`1&lt;T,ITypeInfo::TypeDescriptor&gt;::T" To="::vl::reflection::description::ValueAccessor`1&lt;T,ITypeInfo::TypeDescriptor&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueAccessor`1&lt;T,ITypeInfo::TypeDescriptor&gt;" DisplayName="ValueAccessor struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueAccessor`1&lt;T,ITypeInfo::TypeDescriptor&gt;::BoxValue(&amp; const T,* ITypeDescriptor)" DisplayName="BoxValue method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueAccessor`1&lt;T,ITypeInfo::TypeDescriptor&gt;::UnboxValue(&amp; const Value,* ITypeDescriptor,&amp; const WString)" DisplayName="UnboxValue method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>