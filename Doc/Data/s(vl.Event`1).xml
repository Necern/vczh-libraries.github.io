<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.Event`1">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::Event`1::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <ClassDecl Access="Public" Name="Event" Tags="x64, Windows;x86, Windows" NameKey="::vl::Event" OverloadKey="::vl::Event`1" ClassType="Class">
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.Event`1{function (... TArgs) # void}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Event.&lt;/summary&gt;
  &lt;typeparam name="TArgs"&gt;Types of callback parameters.&lt;/typeparam&gt;
&lt;/Document&gt;</Document>
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="TArgs" Tags="x86, Windows" NameKey="::vl::TArgs" OverloadKey="::vl::Event`1&lt;function (... TArgs) : void&gt;::TArgs" />
      </TypeParameters>
      <Specialization>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="void" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Static="False">
              <Type>
                <VariadicArgumentTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::TArgs" Name="TArgs">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Event`1&lt;function (... TArgs) : void&gt;::TArgs@s:vl.Event`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </VariadicArgumentTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="Event" Tags="x64, Windows;x86, Windows" NameKey="::vl::Event" OverloadKey="::vl::Event`1&lt;function (... TArgs) : void&gt;" ClassType="Class">
          <Children>
            <ClassDecl Access="Protected" Name="EventHandlerImpl" Tags="x64, Windows;x86, Windows" NameKey="::vl::Event::EventHandlerImpl" OverloadKey="::vl::Event`1&lt;function (... TArgs) : void&gt;::EventHandlerImpl" ClassType="Class">
              <Children>
                <VarDecl Access="Public" Name="attached" Tags="x64, Windows;x86, Windows" NameKey="::vl::Event::EventHandlerImpl::attached" OverloadKey="::vl::Event`1&lt;function (... TArgs) : void&gt;::EventHandlerImpl::attached" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="function" Tags="x64, Windows;x86, Windows" NameKey="::vl::Event::EventHandlerImpl::function" OverloadKey="::vl::Event`1&lt;function (... TArgs) : void&gt;::EventHandlerImpl::function" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Func`1@s:vl.Func`1" />
                            <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <FunctionTypeDecl CallingConvention="Default" Const="False">
                          <ReturnType>
                            <RefTypeDecl Name="void" />
                          </ReturnType>
                          <Parameters>
                            <VarDecl Access="Public" Static="False">
                              <Type>
                                <VariadicArgumentTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::TArgs" Name="TArgs">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Event`1&lt;function (... TArgs) : void&gt;::TArgs@s:vl.Event`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                </VariadicArgumentTypeDecl>
                              </Type>
                            </VarDecl>
                          </Parameters>
                        </FunctionTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
                <FuncDecl Access="Public" Name="EventHandlerImpl" Tags="x64, Windows;x86, Windows" NameKey="::vl::Event::EventHandlerImpl::EventHandlerImpl" OverloadKey="::vl::Event`1&lt;function (... TArgs) : void&gt;::EventHandlerImpl::EventHandlerImpl(&amp; const Func&lt;function (... TArgs) : void&gt;)" Virtual="Normal" Function="Constructor">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <RefTypeDecl Name="void" />
                      </ReturnType>
                      <Parameters>
                        <VarDecl Access="Public" Name="_function" Tags="x64, Windows;x86, Windows" NameKey="::vl::Event::EventHandlerImpl::EventHandlerImpl::_function" OverloadKey="::vl::Event`1&lt;function (... TArgs) : void&gt;::EventHandlerImpl::EventHandlerImpl(&amp; const Func&lt;function (... TArgs) : void&gt;)::_function" Static="False">
                          <Type>
                            <DecorateTypeDecl Decoration="LeftRef">
                              <Element>
                                <DecorateTypeDecl Decoration="Const">
                                  <Element>
                                    <GenericTypeDecl>
                                      <Element>
                                        <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::Func`1@s:vl.Func`1" />
                                            <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </Element>
                                      <TypeArguments>
                                        <FunctionTypeDecl CallingConvention="Default" Const="False">
                                          <ReturnType>
                                            <RefTypeDecl Name="void" />
                                          </ReturnType>
                                          <Parameters>
                                            <VarDecl Access="Public" Static="False">
                                              <Type>
                                                <VariadicArgumentTypeDecl>
                                                  <Element>
                                                    <RefTypeDecl ReferencingNameKey="::vl::TArgs" Name="TArgs">
                                                      <ReferencingOverloadKeys>
                                                        <Key Value="::vl::Event`1&lt;function (... TArgs) : void&gt;::TArgs@s:vl.Event`1" />
                                                      </ReferencingOverloadKeys>
                                                    </RefTypeDecl>
                                                  </Element>
                                                </VariadicArgumentTypeDecl>
                                              </Type>
                                            </VarDecl>
                                          </Parameters>
                                        </FunctionTypeDecl>
                                      </TypeArguments>
                                    </GenericTypeDecl>
                                  </Element>
                                </DecorateTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Type>
                        </VarDecl>
                      </Parameters>
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
                <FuncDecl Access="Public" Name="IsAttached" Tags="x64, Windows;x86, Windows" NameKey="::vl::Event::EventHandlerImpl::IsAttached" OverloadKey="::vl::Event`1&lt;function (... TArgs) : void&gt;::EventHandlerImpl::IsAttached()" Virtual="Normal" Function="Function">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <RefTypeDecl Name="bool" />
                      </ReturnType>
                      <Parameters />
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
              </Children>
              <BaseTypes>
                <BaseTypeDecl Access="Public" Tags="x86, Windows">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::EventHandler" Name="EventHandler">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::EventHandler@s:vl.EventHandler" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </BaseTypeDecl>
              </BaseTypes>
            </ClassDecl>
            <VarDecl Access="Protected" Name="handlers" Tags="x64, Windows;x86, Windows" NameKey="::vl::Event::handlers" OverloadKey="::vl::Event`1&lt;function (... TArgs) : void&gt;::handlers" Static="False">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::collections::SortedList" Name="SortedList">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections::SortedList`2@s:vl.collections.SortedList`2" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::collections@ns:vl.collections" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                  <TypeArguments>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::Event::EventHandlerImpl" Name="EventHandlerImpl">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Event`1&lt;function (... TArgs) : void&gt;::EventHandlerImpl@s:vl.Event`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </VarDecl>
            <FuncDecl Access="Public" Name="Add" Tags="x64, Windows;x86, Windows" NameKey="::vl::Event::Add" OverloadKey="::vl::Event`1&lt;function (... TArgs) : void&gt;::Add(&amp; const Func&lt;function (... TArgs) : void&gt;)" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Add a callback to the event.&lt;/summary&gt;
  &lt;returns&gt;The event handler representing the callback.&lt;/returns&gt;
  &lt;param name="function"&gt;The callback.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::EventHandler" Name="EventHandler">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::EventHandler@s:vl.EventHandler" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="function" Tags="x64, Windows;x86, Windows" NameKey="::vl::Event::Add::function" OverloadKey="::vl::Event`1&lt;function (... TArgs) : void&gt;::Add(&amp; const Func&lt;function (... TArgs) : void&gt;)::function" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Func`1@s:vl.Func`1" />
                                        <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                                      <ReturnType>
                                        <RefTypeDecl Name="void" />
                                      </ReturnType>
                                      <Parameters>
                                        <VarDecl Access="Public" Static="False">
                                          <Type>
                                            <VariadicArgumentTypeDecl>
                                              <Element>
                                                <RefTypeDecl ReferencingNameKey="::vl::TArgs" Name="TArgs">
                                                  <ReferencingOverloadKeys>
                                                    <Key Value="::vl::Event`1&lt;function (... TArgs) : void&gt;::TArgs@s:vl.Event`1" />
                                                  </ReferencingOverloadKeys>
                                                </RefTypeDecl>
                                              </Element>
                                            </VariadicArgumentTypeDecl>
                                          </Type>
                                        </VarDecl>
                                      </Parameters>
                                    </FunctionTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Add" Tags="x64, Windows;x86, Windows" NameKey="::vl::Event::Add" OverloadKey="::vl::Event`1&lt;function (... TArgs) : void&gt;::Add(* function (... TArgs) : void)" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Add a callback to the event.&lt;/summary&gt;
  &lt;returns&gt;The event handler representing the callback.&lt;/returns&gt;
  &lt;param name="function"&gt;The callback.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::EventHandler" Name="EventHandler">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::EventHandler@s:vl.EventHandler" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="function" Tags="x64, Windows;x86, Windows" NameKey="::vl::Event::Add::function" OverloadKey="::vl::Event`1&lt;function (... TArgs) : void&gt;::Add(* function (... TArgs) : void)::function" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <FunctionTypeDecl CallingConvention="Default" Const="False">
                              <ReturnType>
                                <RefTypeDecl Name="void" />
                              </ReturnType>
                              <Parameters>
                                <VarDecl Access="Public" Static="False">
                                  <Type>
                                    <VariadicArgumentTypeDecl>
                                      <Element>
                                        <RefTypeDecl ReferencingNameKey="::vl::TArgs" Name="TArgs">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::Event`1&lt;function (... TArgs) : void&gt;::TArgs@s:vl.Event`1" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </Element>
                                    </VariadicArgumentTypeDecl>
                                  </Type>
                                </VarDecl>
                              </Parameters>
                            </FunctionTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <TemplateDecl Access="Public" Tags="x86, Windows">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Add a method callback to the event.&lt;/summary&gt;
  &lt;typeparam name="C"&gt;Type of the class that has the method callback.&lt;/typeparam&gt;
  &lt;returns&gt;The event handler representing the callback.&lt;/returns&gt;
  &lt;param name="sender"&gt;The object that has the method callback.&lt;/param&gt;
  &lt;param name="function"&gt;The method callback.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <TypeParameters>
                <TypeParameterDecl Access="Public" Name="C" Tags="x86, Windows" NameKey="::vl::Event::C" OverloadKey="::vl::Event`1&lt;function (... TArgs) : void&gt;::Add`1(* C,* C::(function (... TArgs) : void))::C" />
              </TypeParameters>
              <Specialization />
              <Element>
                <FuncDecl Access="Public" Name="Add" Tags="x64, Windows;x86, Windows" NameKey="::vl::Event::Add" OverloadKey="::vl::Event`1&lt;function (... TArgs) : void&gt;::Add`1(* C,* C::(function (... TArgs) : void))" Virtual="Normal" Function="Function">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::EventHandler" Name="EventHandler">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::EventHandler@s:vl.EventHandler" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </ReturnType>
                      <Parameters>
                        <VarDecl Access="Public" Name="sender" Tags="x64, Windows;x86, Windows" NameKey="::vl::Event::Add::sender" OverloadKey="::vl::Event`1&lt;function (... TArgs) : void&gt;::Add`1(* C,* C::(function (... TArgs) : void))::sender" Static="False">
                          <Type>
                            <DecorateTypeDecl Decoration="Pointer">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Event::C" Name="C">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Event`1&lt;function (... TArgs) : void&gt;::Add`1(* C,* C::(function (... TArgs) : void))::C@s:vl.Event`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Type>
                        </VarDecl>
                        <VarDecl Access="Public" Name="function" Tags="x64, Windows;x86, Windows" NameKey="::vl::Event::Add::function" OverloadKey="::vl::Event`1&lt;function (... TArgs) : void&gt;::Add`1(* C,* C::(function (... TArgs) : void))::function" Static="False">
                          <Type>
                            <DecorateTypeDecl Decoration="Pointer">
                              <Element>
                                <ClassMemberTypeDecl>
                                  <Element>
                                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                                      <ReturnType>
                                        <RefTypeDecl Name="void" />
                                      </ReturnType>
                                      <Parameters>
                                        <VarDecl Access="Public" Static="False">
                                          <Type>
                                            <VariadicArgumentTypeDecl>
                                              <Element>
                                                <RefTypeDecl ReferencingNameKey="::vl::TArgs" Name="TArgs">
                                                  <ReferencingOverloadKeys>
                                                    <Key Value="::vl::Event`1&lt;function (... TArgs) : void&gt;::TArgs@s:vl.Event`1" />
                                                  </ReferencingOverloadKeys>
                                                </RefTypeDecl>
                                              </Element>
                                            </VariadicArgumentTypeDecl>
                                          </Type>
                                        </VarDecl>
                                      </Parameters>
                                    </FunctionTypeDecl>
                                  </Element>
                                  <ClassType>
                                    <RefTypeDecl ReferencingNameKey="::vl::Event::C" Name="C">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Event`1&lt;function (... TArgs) : void&gt;::Add`1(* C,* C::(function (... TArgs) : void))::C@s:vl.Event`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </ClassType>
                                </ClassMemberTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Type>
                        </VarDecl>
                      </Parameters>
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
              </Element>
            </TemplateDecl>
            <FuncDecl Access="Public" Name="Remove" Tags="x64, Windows;x86, Windows" NameKey="::vl::Event::Remove" OverloadKey="::vl::Event`1&lt;function (... TArgs) : void&gt;::Remove(Ptr&lt;EventHandler&gt;)" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Remove a callback.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="handler"&gt;The event handler representing the callback.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="handler" Tags="x64, Windows;x86, Windows" NameKey="::vl::Event::Remove::handler" OverloadKey="::vl::Event`1&lt;function (... TArgs) : void&gt;::Remove(Ptr&lt;EventHandler&gt;)::handler" Static="False">
                      <Type>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::EventHandler" Name="EventHandler">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::EventHandler@s:vl.EventHandler" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator ()" Tags="x64, Windows;x86, Windows" NameKey="::vl::Event::operator ()" OverloadKey="::vl::Event`1&lt;function (... TArgs) : void&gt;::operator ()(... TArgs)const" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Invoke all callbacks in the event.&lt;/summary&gt;
  &lt;param name="args"&gt;Arguments to invoke all callbacks.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="args" Tags="x64, Windows;x86, Windows" NameKey="::vl::Event::operator ()::args" OverloadKey="::vl::Event`1&lt;function (... TArgs) : void&gt;::operator ()(... TArgs)const::args" Static="False">
                      <Type>
                        <VariadicArgumentTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::TArgs" Name="TArgs">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Event`1&lt;function (... TArgs) : void&gt;::TArgs@s:vl.Event`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </VariadicArgumentTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Object@s:vl.Object" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
            <BaseTypeDecl Access="Private" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::NotCopyable" Name="NotCopyable">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::NotCopyable@s:vl.NotCopyable" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>