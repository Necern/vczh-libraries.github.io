<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.ValueFunctionProxyWrapper`2{function (... TArgs) # R}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="R" Tags="x86, Windows" NameKey="::vl::reflection::description::R" OverloadKey="::vl::reflection::description::ValueFunctionProxyWrapper`2&lt;function (... TArgs) : R&gt;::R" />
        <TypeParameterDecl Access="Public" Name="TArgs" Tags="x86, Windows" NameKey="::vl::reflection::description::TArgs" OverloadKey="::vl::reflection::description::ValueFunctionProxyWrapper`2&lt;function (... TArgs) : R&gt;::TArgs" />
      </TypeParameters>
      <Specialization>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::R" Name="R">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::ValueFunctionProxyWrapper`2&lt;function (... TArgs) : R&gt;::R@s:vl.reflection.description.ValueFunctionProxyWrapper`2" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Static="False">
              <Type>
                <VariadicArgumentTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TArgs" Name="TArgs">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ValueFunctionProxyWrapper`2&lt;function (... TArgs) : R&gt;::TArgs@s:vl.reflection.description.ValueFunctionProxyWrapper`2" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </VariadicArgumentTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="ValueFunctionProxyWrapper" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueFunctionProxyWrapper" OverloadKey="::vl::reflection::description::ValueFunctionProxyWrapper`2&lt;function (... TArgs) : R&gt;" ClassType="Class">
          <Children>
            <TypedefDecl Access="Private" Name="FunctionType" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueFunctionProxyWrapper::FunctionType" OverloadKey="::vl::reflection::description::ValueFunctionProxyWrapper`2&lt;function (... TArgs) : R&gt;::FunctionType">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Func`1@s:vl.Func`1" />
                        <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::R" Name="R">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::ValueFunctionProxyWrapper`2&lt;function (... TArgs) : R&gt;::R@s:vl.reflection.description.ValueFunctionProxyWrapper`2" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </ReturnType>
                      <Parameters>
                        <VarDecl Access="Public" Static="False">
                          <Type>
                            <VariadicArgumentTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TArgs" Name="TArgs">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::ValueFunctionProxyWrapper`2&lt;function (... TArgs) : R&gt;::TArgs@s:vl.reflection.description.ValueFunctionProxyWrapper`2" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </VariadicArgumentTypeDecl>
                          </Type>
                        </VarDecl>
                      </Parameters>
                    </FunctionTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </TypedefDecl>
            <VarDecl Access="Protected" Name="function" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueFunctionProxyWrapper::function" OverloadKey="::vl::reflection::description::ValueFunctionProxyWrapper`2&lt;function (... TArgs) : R&gt;::function" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ValueFunctionProxyWrapper::FunctionType" Name="FunctionType">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::ValueFunctionProxyWrapper`2&lt;function (... TArgs) : R&gt;::FunctionType@s:vl.reflection.description.ValueFunctionProxyWrapper`2" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
            <FuncDecl Access="Public" Name="ValueFunctionProxyWrapper" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueFunctionProxyWrapper::ValueFunctionProxyWrapper" OverloadKey="::vl::reflection::description::ValueFunctionProxyWrapper`2&lt;function (... TArgs) : R&gt;::ValueFunctionProxyWrapper(&amp; const FunctionType)" Virtual="Normal" Function="Constructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="_function" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueFunctionProxyWrapper::ValueFunctionProxyWrapper::_function" OverloadKey="::vl::reflection::description::ValueFunctionProxyWrapper`2&lt;function (... TArgs) : R&gt;::ValueFunctionProxyWrapper(&amp; const FunctionType)::_function" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ValueFunctionProxyWrapper::FunctionType" Name="FunctionType">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::ValueFunctionProxyWrapper`2&lt;function (... TArgs) : R&gt;::FunctionType@s:vl.reflection.description.ValueFunctionProxyWrapper`2" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="GetFunction" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueFunctionProxyWrapper::GetFunction" OverloadKey="::vl::reflection::description::ValueFunctionProxyWrapper`2&lt;function (... TArgs) : R&gt;::GetFunction()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ValueFunctionProxyWrapper::FunctionType" Name="FunctionType">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ValueFunctionProxyWrapper`2&lt;function (... TArgs) : R&gt;::FunctionType@s:vl.reflection.description.ValueFunctionProxyWrapper`2" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Invoke" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueFunctionProxyWrapper::Invoke" OverloadKey="::vl::reflection::description::ValueFunctionProxyWrapper`2&lt;function (... TArgs) : R&gt;::Invoke(Ptr&lt;IValueList&gt;)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="arguments" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueFunctionProxyWrapper::Invoke::arguments" OverloadKey="::vl::reflection::description::ValueFunctionProxyWrapper`2&lt;function (... TArgs) : R&gt;::Invoke(Ptr&lt;IValueList&gt;)::arguments" Static="False">
                      <Type>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IValueList" Name="IValueList">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::IValueList@s:vl.reflection.description.IValueList" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Object@s:vl.Object" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IValueFunctionProxy" Name="IValueFunctionProxy">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::IValueFunctionProxy@s:vl.reflection.description.IValueFunctionProxy" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>