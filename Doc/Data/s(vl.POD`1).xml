<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.POD`1">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Test is a type a Plain-Old-Data type for containers.&lt;/summary&gt;
  &lt;typeparam name="T"&gt;The type to test.&lt;/typeparam&gt;
&lt;/Document&gt;</Document>
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::POD`1::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <ClassDecl Access="Public" Name="POD" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD" OverloadKey="::vl::POD`1" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD::Result" OverloadKey="::vl::POD`1::Result" Static="True">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Returns true if the type is a Plain-Old-Data type.&lt;/summary&gt;
&lt;/Document&gt;</Document>
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl Name="bool" />
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.POD`1{^ T}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::POD`1&lt;* T&gt;::T" />
      </TypeParameters>
      <Specialization>
        <DecorateTypeDecl Decoration="Pointer">
          <Element>
            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
              <ReferencingOverloadKeys>
                <Key Value="::vl::POD`1&lt;* T&gt;::T@s:vl.POD`1{^ T}" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Element>
        </DecorateTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="POD" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD" OverloadKey="::vl::POD`1&lt;* T&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD::Result" OverloadKey="::vl::POD`1&lt;* T&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl Name="bool" />
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.POD`1{&amp; T}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::POD`1&lt;&amp; T&gt;::T" />
      </TypeParameters>
      <Specialization>
        <DecorateTypeDecl Decoration="LeftRef">
          <Element>
            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
              <ReferencingOverloadKeys>
                <Key Value="::vl::POD`1&lt;&amp; T&gt;::T@s:vl.POD`1{&amp; T}" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Element>
        </DecorateTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="POD" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD" OverloadKey="::vl::POD`1&lt;&amp; T&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD::Result" OverloadKey="::vl::POD`1&lt;&amp; T&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl Name="bool" />
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.POD`1{const T}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::POD`1&lt;const T&gt;::T" />
      </TypeParameters>
      <Specialization>
        <DecorateTypeDecl Decoration="Const">
          <Element>
            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
              <ReferencingOverloadKeys>
                <Key Value="::vl::POD`1&lt;const T&gt;::T@s:vl.POD`1{const T}" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Element>
        </DecorateTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="POD" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD" OverloadKey="::vl::POD`1&lt;const T&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD::Result" OverloadKey="::vl::POD`1&lt;const T&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl Name="bool" />
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.POD`1{volatile T}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::POD`1&lt;volatile T&gt;::T" />
      </TypeParameters>
      <Specialization>
        <DecorateTypeDecl Decoration="Volatile">
          <Element>
            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
              <ReferencingOverloadKeys>
                <Key Value="::vl::POD`1&lt;volatile T&gt;::T@s:vl.POD`1{volatile T}" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Element>
        </DecorateTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="POD" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD" OverloadKey="::vl::POD`1&lt;volatile T&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD::Result" OverloadKey="::vl::POD`1&lt;volatile T&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl Name="bool" />
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.POD`1{const volatile T}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::POD`1&lt;const volatile T&gt;::T" />
      </TypeParameters>
      <Specialization>
        <DecorateTypeDecl Decoration="Const">
          <Element>
            <DecorateTypeDecl Decoration="Volatile">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::POD`1&lt;const volatile T&gt;::T@s:vl.POD`1{const volatile T}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Element>
        </DecorateTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="POD" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD" OverloadKey="::vl::POD`1&lt;const volatile T&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD::Result" OverloadKey="::vl::POD`1&lt;const volatile T&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl Name="bool" />
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.POD`1{Ptr{T}}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::POD`1&lt;Ptr&lt;T&gt;&gt;::T" />
      </TypeParameters>
      <Specialization>
        <GenericTypeDecl>
          <Element>
            <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Element>
          <TypeArguments>
            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
              <ReferencingOverloadKeys>
                <Key Value="::vl::POD`1&lt;Ptr&lt;T&gt;&gt;::T@s:vl.POD`1{Ptr{T}}" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </TypeArguments>
        </GenericTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="POD" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD" OverloadKey="::vl::POD`1&lt;Ptr&lt;T&gt;&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD::Result" OverloadKey="::vl::POD`1&lt;Ptr&lt;T&gt;&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl Name="bool" />
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.POD`1{ComPtr{T}}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::POD`1&lt;ComPtr&lt;T&gt;&gt;::T" />
      </TypeParameters>
      <Specialization>
        <GenericTypeDecl>
          <Element>
            <RefTypeDecl ReferencingNameKey="::vl::ComPtr" Name="ComPtr">
              <ReferencingOverloadKeys>
                <Key Value="::vl::ComPtr`1@s:vl.ComPtr`1" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Element>
          <TypeArguments>
            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
              <ReferencingOverloadKeys>
                <Key Value="::vl::POD`1&lt;ComPtr&lt;T&gt;&gt;::T@s:vl.POD`1{ComPtr{T}}" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </TypeArguments>
        </GenericTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="POD" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD" OverloadKey="::vl::POD`1&lt;ComPtr&lt;T&gt;&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD::Result" OverloadKey="::vl::POD`1&lt;ComPtr&lt;T&gt;&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl Name="bool" />
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>