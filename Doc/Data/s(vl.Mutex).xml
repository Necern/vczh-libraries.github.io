<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.Mutex">
    <ClassDecl Access="Public" Name="Mutex" Tags="x64, Windows;x86, Windows" NameKey="::vl::Mutex" OverloadKey="::vl::Mutex" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Mutex.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <VarDecl Access="Private" Name="internalData" Tags="x64, Windows;x86, Windows" NameKey="::vl::Mutex::internalData" OverloadKey="::vl::Mutex::internalData" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <SubTypeDecl Name="MutexData">
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::threading_internal" Name="threading_internal">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::threading_internal" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="Mutex" Tags="x64, Windows;x86, Windows" NameKey="::vl::Mutex::Mutex" OverloadKey="::vl::Mutex::Mutex()" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~Mutex" Tags="x64, Windows;x86, Windows" NameKey="::vl::Mutex::~Mutex" OverloadKey="::vl::Mutex::~Mutex()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Create" Tags="x64, Windows;x86, Windows" NameKey="::vl::Mutex::Create" OverloadKey="::vl::Mutex::Create(bool,&amp; const WString)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Create a mutex.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="owned"&gt;Set to true to own the created mutex.&lt;/param&gt;
  &lt;param name="name"&gt;Name of the mutex. If it is not empty, than it is a global named mutex. This argument is ignored in Linux.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="owned" Tags="x64, Windows;x86, Windows" NameKey="::vl::Mutex::Create::owned" OverloadKey="::vl::Mutex::Create(bool,&amp; const WString)::owned" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="name" Tags="x64, Windows;x86, Windows" NameKey="::vl::Mutex::Create::name" OverloadKey="::vl::Mutex::Create(bool,&amp; const WString)::name" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Open" Tags="x64, Windows;x86, Windows" NameKey="::vl::Mutex::Open" OverloadKey="::vl::Mutex::Open(bool,&amp; const WString)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Open an existing global named mutex.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="inheritable"&gt;Set to true make the mutex visible to all all child processes. This argument is only used in Windows.&lt;/param&gt;
  &lt;param name="name"&gt;Name of the mutex. This argument is ignored in Linux.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="inheritable" Tags="x64, Windows;x86, Windows" NameKey="::vl::Mutex::Open::inheritable" OverloadKey="::vl::Mutex::Open(bool,&amp; const WString)::inheritable" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="name" Tags="x64, Windows;x86, Windows" NameKey="::vl::Mutex::Open::name" OverloadKey="::vl::Mutex::Open(bool,&amp; const WString)::name" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Release" Tags="x64, Windows;x86, Windows" NameKey="::vl::Mutex::Release" OverloadKey="::vl::Mutex::Release()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Release the mutex.
In the implementation for Linux, calling Release() more than once between two Wait(), or calling Wait() more than once between two Release(), will results in an undefined behavior.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::WaitableObject" Name="WaitableObject">
              <ReferencingOverloadKeys>
                <Key Value="::vl::WaitableObject@s:vl.WaitableObject" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>