<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="::vl::internal_invokers::MemberInvoker`3">
    <SymbolTree NamespaceUrlName="vl.internal_invokers">
      <SymbolParentMapping>
        <Map From="::vl::internal_invokers::MemberInvoker`3::C" To="::vl::internal_invokers::MemberInvoker`3" />
        <Map From="::vl::internal_invokers::MemberInvoker`3::R" To="::vl::internal_invokers::MemberInvoker`3" />
        <Map From="::vl::internal_invokers::MemberInvoker`3::TArgs" To="::vl::internal_invokers::MemberInvoker`3" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::internal_invokers::MemberInvoker`3" DisplayName="MemberInvoker class" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::internal_invokers::MemberInvoker`3::sender" DisplayName="sender field" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::internal_invokers::MemberInvoker`3::function" DisplayName="function field" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::internal_invokers::MemberInvoker`3::MemberInvoker(* C,* C::(function (args : ... TArgs) : R))" DisplayName="MemberInvoker constructor" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::internal_invokers::MemberInvoker`3::Invoke(... &amp;&amp; TArgs)" DisplayName="Invoke method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>