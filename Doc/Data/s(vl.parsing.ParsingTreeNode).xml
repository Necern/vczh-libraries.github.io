<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="::vl::parsing::ParsingTreeNode">
    <ClassDecl Access="Public" Name="ParsingTreeNode" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode" OverloadKey="::vl::parsing::ParsingTreeNode" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Abstract syntax tree.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <ClassDecl Access="Public" Name="IVisitor" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::IVisitor" OverloadKey="::vl::parsing::ParsingTreeNode::IVisitor" ClassType="Class">
          <Children>
            <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::IVisitor::Visit" OverloadKey="::vl::parsing::ParsingTreeNode::IVisitor::Visit(* ParsingTreeToken)" Virtual="Abstract" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::IVisitor::Visit::node" OverloadKey="::vl::parsing::ParsingTreeNode::IVisitor::Visit(* ParsingTreeToken)::node" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeToken" Name="ParsingTreeToken">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTreeToken@s:vl.parsing.ParsingTreeToken" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::IVisitor::Visit" OverloadKey="::vl::parsing::ParsingTreeNode::IVisitor::Visit(* ParsingTreeObject)" Virtual="Abstract" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::IVisitor::Visit::node" OverloadKey="::vl::parsing::ParsingTreeNode::IVisitor::Visit(* ParsingTreeObject)::node" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeObject" Name="ParsingTreeObject">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTreeObject@s:vl.parsing.ParsingTreeObject" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::IVisitor::Visit" OverloadKey="::vl::parsing::ParsingTreeNode::IVisitor::Visit(* ParsingTreeArray)" Virtual="Abstract" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::IVisitor::Visit::node" OverloadKey="::vl::parsing::ParsingTreeNode::IVisitor::Visit(* ParsingTreeArray)::node" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeArray" Name="ParsingTreeArray">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTreeArray@s:vl.parsing.ParsingTreeArray" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::Interface" Name="Interface">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Interface@s:vl.Interface" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
        <ClassDecl Access="Public" Name="TraversalVisitor" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor" ClassType="Class">
          <Children>
            <EnumDecl Access="Public" Name="TraverseDirection" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::TraverseDirection" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::TraverseDirection" EnumClass="False">
              <Children>
                <EnumItemDecl Access="Public" Name="ByTextPosition" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::TraverseDirection::ByTextPosition" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::TraverseDirection::ByTextPosition" />
                <EnumItemDecl Access="Public" Name="ByStorePosition" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::TraverseDirection::ByStorePosition" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::TraverseDirection::ByStorePosition" />
              </Children>
            </EnumDecl>
            <VarDecl Access="Protected" Name="direction" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::direction" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::direction" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::TraverseDirection" Name="TraverseDirection">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::parsing::ParsingTreeNode::TraversalVisitor::TraverseDirection@s:vl.parsing.ParsingTreeNode" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
            <FuncDecl Access="Public" Name="TraversalVisitor" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::TraversalVisitor" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::TraversalVisitor(TraverseDirection)" Virtual="Normal" Function="Constructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="_direction" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::TraversalVisitor::_direction" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::TraversalVisitor(TraverseDirection)::_direction" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::TraverseDirection" Name="TraverseDirection">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::ParsingTreeNode::TraversalVisitor::TraverseDirection@s:vl.parsing.ParsingTreeNode" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="BeforeVisit" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::BeforeVisit" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::BeforeVisit(* ParsingTreeToken)" Virtual="Virtual" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::BeforeVisit::node" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::BeforeVisit(* ParsingTreeToken)::node" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeToken" Name="ParsingTreeToken">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTreeToken@s:vl.parsing.ParsingTreeToken" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="AfterVisit" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::AfterVisit" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::AfterVisit(* ParsingTreeToken)" Virtual="Virtual" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::AfterVisit::node" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::AfterVisit(* ParsingTreeToken)::node" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeToken" Name="ParsingTreeToken">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTreeToken@s:vl.parsing.ParsingTreeToken" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="BeforeVisit" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::BeforeVisit" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::BeforeVisit(* ParsingTreeObject)" Virtual="Virtual" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::BeforeVisit::node" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::BeforeVisit(* ParsingTreeObject)::node" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeObject" Name="ParsingTreeObject">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTreeObject@s:vl.parsing.ParsingTreeObject" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="AfterVisit" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::AfterVisit" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::AfterVisit(* ParsingTreeObject)" Virtual="Virtual" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::AfterVisit::node" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::AfterVisit(* ParsingTreeObject)::node" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeObject" Name="ParsingTreeObject">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTreeObject@s:vl.parsing.ParsingTreeObject" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="BeforeVisit" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::BeforeVisit" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::BeforeVisit(* ParsingTreeArray)" Virtual="Virtual" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::BeforeVisit::node" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::BeforeVisit(* ParsingTreeArray)::node" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeArray" Name="ParsingTreeArray">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTreeArray@s:vl.parsing.ParsingTreeArray" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="AfterVisit" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::AfterVisit" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::AfterVisit(* ParsingTreeArray)" Virtual="Virtual" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::AfterVisit::node" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::AfterVisit(* ParsingTreeArray)::node" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeArray" Name="ParsingTreeArray">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTreeArray@s:vl.parsing.ParsingTreeArray" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::Visit" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::Visit(* ParsingTreeToken)" Virtual="Virtual" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::Visit::node" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::Visit(* ParsingTreeToken)::node" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeToken" Name="ParsingTreeToken">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTreeToken@s:vl.parsing.ParsingTreeToken" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::Visit" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::Visit(* ParsingTreeObject)" Virtual="Virtual" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::Visit::node" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::Visit(* ParsingTreeObject)::node" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeObject" Name="ParsingTreeObject">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTreeObject@s:vl.parsing.ParsingTreeObject" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::Visit" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::Visit(* ParsingTreeArray)" Virtual="Virtual" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::Visit::node" OverloadKey="::vl::parsing::ParsingTreeNode::TraversalVisitor::Visit(* ParsingTreeArray)::node" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeArray" Name="ParsingTreeArray">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTreeArray@s:vl.parsing.ParsingTreeArray" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Object@s:vl.Object" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeNode::IVisitor" Name="IVisitor">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::parsing::ParsingTreeNode::IVisitor@s:vl.parsing.ParsingTreeNode" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
        <TypedefDecl Access="Protected" Name="NodeList" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::NodeList" OverloadKey="::vl::parsing::ParsingTreeNode::NodeList">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeNode" Name="ParsingTreeNode">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::ParsingTreeNode@s:vl.parsing.ParsingTreeNode" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </TypedefDecl>
        <VarDecl Access="Protected" Name="codeRange" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::codeRange" OverloadKey="::vl::parsing::ParsingTreeNode::codeRange" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTextRange" Name="ParsingTextRange">
              <ReferencingOverloadKeys>
                <Key Value="::vl::parsing::ParsingTextRange@s:vl.parsing.ParsingTextRange" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="parent" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::parent" OverloadKey="::vl::parsing::ParsingTreeNode::parent" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeNode" Name="ParsingTreeNode">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::parsing::ParsingTreeNode@s:vl.parsing.ParsingTreeNode" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="cachedOrderedSubNodes" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::cachedOrderedSubNodes" OverloadKey="::vl::parsing::ParsingTreeNode::cachedOrderedSubNodes" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeNode::NodeList" Name="NodeList">
              <ReferencingOverloadKeys>
                <Key Value="::vl::parsing::ParsingTreeNode::NodeList@s:vl.parsing.ParsingTreeNode" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Protected" Name="GetSubNodesInternal" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::GetSubNodesInternal" OverloadKey="::vl::parsing::ParsingTreeNode::GetSubNodesInternal()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeNode::NodeList" Name="NodeList">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::ParsingTreeNode::NodeList@s:vl.parsing.ParsingTreeNode" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="BeforeAddChild" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::BeforeAddChild" OverloadKey="::vl::parsing::ParsingTreeNode::BeforeAddChild(Ptr&lt;ParsingTreeNode&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::BeforeAddChild::node" OverloadKey="::vl::parsing::ParsingTreeNode::BeforeAddChild(Ptr&lt;ParsingTreeNode&gt;)::node" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeNode" Name="ParsingTreeNode">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::ParsingTreeNode@s:vl.parsing.ParsingTreeNode" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="AfterAddChild" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::AfterAddChild" OverloadKey="::vl::parsing::ParsingTreeNode::AfterAddChild(Ptr&lt;ParsingTreeNode&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::AfterAddChild::node" OverloadKey="::vl::parsing::ParsingTreeNode::AfterAddChild(Ptr&lt;ParsingTreeNode&gt;)::node" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeNode" Name="ParsingTreeNode">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::ParsingTreeNode@s:vl.parsing.ParsingTreeNode" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="BeforeRemoveChild" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::BeforeRemoveChild" OverloadKey="::vl::parsing::ParsingTreeNode::BeforeRemoveChild(Ptr&lt;ParsingTreeNode&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::BeforeRemoveChild::node" OverloadKey="::vl::parsing::ParsingTreeNode::BeforeRemoveChild(Ptr&lt;ParsingTreeNode&gt;)::node" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeNode" Name="ParsingTreeNode">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::ParsingTreeNode@s:vl.parsing.ParsingTreeNode" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="AfterRemoveChild" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::AfterRemoveChild" OverloadKey="::vl::parsing::ParsingTreeNode::AfterRemoveChild(Ptr&lt;ParsingTreeNode&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::AfterRemoveChild::node" OverloadKey="::vl::parsing::ParsingTreeNode::AfterRemoveChild(Ptr&lt;ParsingTreeNode&gt;)::node" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeNode" Name="ParsingTreeNode">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::ParsingTreeNode@s:vl.parsing.ParsingTreeNode" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ParsingTreeNode" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::ParsingTreeNode" OverloadKey="::vl::parsing::ParsingTreeNode::ParsingTreeNode(&amp; const ParsingTextRange)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_codeRange" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::ParsingTreeNode::_codeRange" OverloadKey="::vl::parsing::ParsingTreeNode::ParsingTreeNode(&amp; const ParsingTextRange)::_codeRange" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTextRange" Name="ParsingTextRange">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTextRange@s:vl.parsing.ParsingTextRange" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~ParsingTreeNode" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::~ParsingTreeNode" OverloadKey="::vl::parsing::ParsingTreeNode::~ParsingTreeNode()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Accept" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::Accept" OverloadKey="::vl::parsing::ParsingTreeNode::Accept(* IVisitor)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="visitor" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::Accept::visitor" OverloadKey="::vl::parsing::ParsingTreeNode::Accept(* IVisitor)::visitor" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeNode::IVisitor" Name="IVisitor">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::ParsingTreeNode::IVisitor@s:vl.parsing.ParsingTreeNode" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Clone" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::Clone" OverloadKey="::vl::parsing::ParsingTreeNode::Clone()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeNode" Name="ParsingTreeNode">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::ParsingTreeNode@s:vl.parsing.ParsingTreeNode" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetCodeRange" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::GetCodeRange" OverloadKey="::vl::parsing::ParsingTreeNode::GetCodeRange()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTextRange" Name="ParsingTextRange">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::parsing::ParsingTextRange@s:vl.parsing.ParsingTextRange" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetCodeRange" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::SetCodeRange" OverloadKey="::vl::parsing::ParsingTreeNode::SetCodeRange(&amp; const ParsingTextRange)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="range" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::SetCodeRange::range" OverloadKey="::vl::parsing::ParsingTreeNode::SetCodeRange(&amp; const ParsingTextRange)::range" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTextRange" Name="ParsingTextRange">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTextRange@s:vl.parsing.ParsingTextRange" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="InitializeQueryCache" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::InitializeQueryCache" OverloadKey="::vl::parsing::ParsingTreeNode::InitializeQueryCache()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Precalculate for enhance searching performance for this node and all child nodes.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ClearQueryCache" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::ClearQueryCache" OverloadKey="::vl::parsing::ParsingTreeNode::ClearQueryCache()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Clear all cache made by &lt;links&gt;&lt;link cref="::vl::parsing::ParsingTreeNode::InitializeQueryCache()@s:vl.parsing.ParsingTreeNode" /&gt;&lt;/links&gt;.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetParent" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::GetParent" OverloadKey="::vl::parsing::ParsingTreeNode::GetParent()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the parent node. Using this function requires running &lt;links&gt;&lt;link cref="::vl::parsing::ParsingTreeNode::InitializeQueryCache()@s:vl.parsing.ParsingTreeNode" /&gt;&lt;/links&gt; before.&lt;/summary&gt;
  &lt;returns&gt;The parent node.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeNode" Name="ParsingTreeNode">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::ParsingTreeNode@s:vl.parsing.ParsingTreeNode" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetSubNodes" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::GetSubNodes" OverloadKey="::vl::parsing::ParsingTreeNode::GetSubNodes()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the child nodes. Using this function requires running &lt;links&gt;&lt;link cref="::vl::parsing::ParsingTreeNode::InitializeQueryCache()@s:vl.parsing.ParsingTreeNode" /&gt;&lt;/links&gt; before.&lt;/summary&gt;
  &lt;returns&gt;The child nodes.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeNode::NodeList" Name="NodeList">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::ParsingTreeNode::NodeList@s:vl.parsing.ParsingTreeNode" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="FindSubNode" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::FindSubNode" OverloadKey="::vl::parsing::ParsingTreeNode::FindSubNode(&amp; const ParsingTextPos)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Find a direct child node at the position. Using this function requires running &lt;links&gt;&lt;link cref="::vl::parsing::ParsingTreeNode::InitializeQueryCache()@s:vl.parsing.ParsingTreeNode" /&gt;&lt;/links&gt; before.&lt;/summary&gt;
  &lt;returns&gt;The found node.&lt;/returns&gt;
  &lt;param name="position"&gt;The position.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeNode" Name="ParsingTreeNode">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::ParsingTreeNode@s:vl.parsing.ParsingTreeNode" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="position" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::FindSubNode::position" OverloadKey="::vl::parsing::ParsingTreeNode::FindSubNode(&amp; const ParsingTextPos)::position" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTextPos" Name="ParsingTextPos">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTextPos@s:vl.parsing.ParsingTextPos" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="FindSubNode" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::FindSubNode" OverloadKey="::vl::parsing::ParsingTreeNode::FindSubNode(&amp; const ParsingTextRange)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Find a direct child node at the range. Using this function requires running &lt;links&gt;&lt;link cref="::vl::parsing::ParsingTreeNode::InitializeQueryCache()@s:vl.parsing.ParsingTreeNode" /&gt;&lt;/links&gt; before.&lt;/summary&gt;
  &lt;returns&gt;The found node.&lt;/returns&gt;
  &lt;param name="range"&gt;The range.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeNode" Name="ParsingTreeNode">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::ParsingTreeNode@s:vl.parsing.ParsingTreeNode" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="range" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::FindSubNode::range" OverloadKey="::vl::parsing::ParsingTreeNode::FindSubNode(&amp; const ParsingTextRange)::range" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTextRange" Name="ParsingTextRange">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTextRange@s:vl.parsing.ParsingTextRange" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="FindDeepestNode" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::FindDeepestNode" OverloadKey="::vl::parsing::ParsingTreeNode::FindDeepestNode(&amp; const ParsingTextPos)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Find a most deepest indirect child node at the position. Using this function requires running &lt;links&gt;&lt;link cref="::vl::parsing::ParsingTreeNode::InitializeQueryCache()@s:vl.parsing.ParsingTreeNode" /&gt;&lt;/links&gt; before.&lt;/summary&gt;
  &lt;returns&gt;The found node.&lt;/returns&gt;
  &lt;param name="position"&gt;The position.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeNode" Name="ParsingTreeNode">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::ParsingTreeNode@s:vl.parsing.ParsingTreeNode" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="position" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::FindDeepestNode::position" OverloadKey="::vl::parsing::ParsingTreeNode::FindDeepestNode(&amp; const ParsingTextPos)::position" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTextPos" Name="ParsingTextPos">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTextPos@s:vl.parsing.ParsingTextPos" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="FindDeepestNode" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::FindDeepestNode" OverloadKey="::vl::parsing::ParsingTreeNode::FindDeepestNode(&amp; const ParsingTextRange)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Find a most deepest indirect child node at the range. Using this function requires running &lt;links&gt;&lt;link cref="::vl::parsing::ParsingTreeNode::InitializeQueryCache()@s:vl.parsing.ParsingTreeNode" /&gt;&lt;/links&gt; before.&lt;/summary&gt;
  &lt;returns&gt;The found node.&lt;/returns&gt;
  &lt;param name="range"&gt;The range.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeNode" Name="ParsingTreeNode">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::ParsingTreeNode@s:vl.parsing.ParsingTreeNode" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="range" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTreeNode::FindDeepestNode::range" OverloadKey="::vl::parsing::ParsingTreeNode::FindDeepestNode(&amp; const ParsingTextRange)::range" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTextRange" Name="ParsingTextRange">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTextRange@s:vl.parsing.ParsingTextRange" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::reflection::Description" Name="Description">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::Description`1@s:vl.reflection.Description`1" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection" Name="reflection">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection@ns:vl.reflection" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeNode" Name="ParsingTreeNode">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::parsing::ParsingTreeNode@s:vl.parsing.ParsingTreeNode" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>