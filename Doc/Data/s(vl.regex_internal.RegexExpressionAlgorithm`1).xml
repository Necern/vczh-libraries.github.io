<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.regex_internal.RegexExpressionAlgorithm`1{void,ParameterType}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="ParameterType" Tags="x86, Windows" NameKey="::vl::regex_internal::ParameterType" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::ParameterType" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl Name="void" />
        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::ParameterType" Name="ParameterType">
          <ReferencingOverloadKeys>
            <Key Value="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::ParameterType@s:vl.regex_internal.RegexExpressionAlgorithm`1" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="RegexExpressionAlgorithm" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;" ClassType="Class">
          <Children>
            <VarDecl Access="Private" Name="parameterValue" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::parameterValue" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::parameterValue" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::ParameterType" Name="ParameterType">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::ParameterType@s:vl.regex_internal.RegexExpressionAlgorithm`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <FuncDecl Access="Public" Name="Invoke" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Invoke" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Invoke(* Expression,ParameterType)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Invoke::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Invoke(* Expression,ParameterType)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Expression" Name="Expression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::Expression@s:vl.regex_internal.Expression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="parameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Invoke::parameter" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Invoke(* Expression,ParameterType)::parameter" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::ParameterType" Name="ParameterType">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::ParameterType@s:vl.regex_internal.RegexExpressionAlgorithm`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Invoke" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Invoke" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Invoke(Expression::Ref,ParameterType)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Invoke::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Invoke(Expression::Ref,ParameterType)::expression" Static="False">
                      <Type>
                        <SubTypeDecl ReferencingNameKey="::vl::regex_internal::Expression::Ref" Name="Ref">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::Expression::Ref@s:vl.regex_internal.Expression" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Expression" Name="Expression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::Expression@s:vl.regex_internal.Expression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="parameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Invoke::parameter" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Invoke(Expression::Ref,ParameterType)::parameter" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::ParameterType" Name="ParameterType">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::ParameterType@s:vl.regex_internal.RegexExpressionAlgorithm`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Apply" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* CharSetExpression,ParameterType)" Virtual="Abstract" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* CharSetExpression,ParameterType)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::CharSetExpression" Name="CharSetExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::CharSetExpression@s:vl.regex_internal.CharSetExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="parameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::parameter" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* CharSetExpression,ParameterType)::parameter" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::ParameterType" Name="ParameterType">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::ParameterType@s:vl.regex_internal.RegexExpressionAlgorithm`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Apply" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* LoopExpression,ParameterType)" Virtual="Abstract" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* LoopExpression,ParameterType)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::LoopExpression" Name="LoopExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::LoopExpression@s:vl.regex_internal.LoopExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="parameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::parameter" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* LoopExpression,ParameterType)::parameter" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::ParameterType" Name="ParameterType">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::ParameterType@s:vl.regex_internal.RegexExpressionAlgorithm`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Apply" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* SequenceExpression,ParameterType)" Virtual="Abstract" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* SequenceExpression,ParameterType)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::SequenceExpression" Name="SequenceExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::SequenceExpression@s:vl.regex_internal.SequenceExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="parameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::parameter" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* SequenceExpression,ParameterType)::parameter" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::ParameterType" Name="ParameterType">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::ParameterType@s:vl.regex_internal.RegexExpressionAlgorithm`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Apply" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* AlternateExpression,ParameterType)" Virtual="Abstract" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* AlternateExpression,ParameterType)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::AlternateExpression" Name="AlternateExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::AlternateExpression@s:vl.regex_internal.AlternateExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="parameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::parameter" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* AlternateExpression,ParameterType)::parameter" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::ParameterType" Name="ParameterType">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::ParameterType@s:vl.regex_internal.RegexExpressionAlgorithm`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Apply" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* BeginExpression,ParameterType)" Virtual="Abstract" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* BeginExpression,ParameterType)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::BeginExpression" Name="BeginExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::BeginExpression@s:vl.regex_internal.BeginExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="parameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::parameter" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* BeginExpression,ParameterType)::parameter" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::ParameterType" Name="ParameterType">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::ParameterType@s:vl.regex_internal.RegexExpressionAlgorithm`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Apply" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* EndExpression,ParameterType)" Virtual="Abstract" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* EndExpression,ParameterType)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::EndExpression" Name="EndExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::EndExpression@s:vl.regex_internal.EndExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="parameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::parameter" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* EndExpression,ParameterType)::parameter" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::ParameterType" Name="ParameterType">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::ParameterType@s:vl.regex_internal.RegexExpressionAlgorithm`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Apply" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* CaptureExpression,ParameterType)" Virtual="Abstract" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* CaptureExpression,ParameterType)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::CaptureExpression" Name="CaptureExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::CaptureExpression@s:vl.regex_internal.CaptureExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="parameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::parameter" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* CaptureExpression,ParameterType)::parameter" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::ParameterType" Name="ParameterType">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::ParameterType@s:vl.regex_internal.RegexExpressionAlgorithm`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Apply" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* MatchExpression,ParameterType)" Virtual="Abstract" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* MatchExpression,ParameterType)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::MatchExpression" Name="MatchExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::MatchExpression@s:vl.regex_internal.MatchExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="parameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::parameter" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* MatchExpression,ParameterType)::parameter" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::ParameterType" Name="ParameterType">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::ParameterType@s:vl.regex_internal.RegexExpressionAlgorithm`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Apply" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* PositiveExpression,ParameterType)" Virtual="Abstract" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* PositiveExpression,ParameterType)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::PositiveExpression" Name="PositiveExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::PositiveExpression@s:vl.regex_internal.PositiveExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="parameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::parameter" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* PositiveExpression,ParameterType)::parameter" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::ParameterType" Name="ParameterType">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::ParameterType@s:vl.regex_internal.RegexExpressionAlgorithm`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Apply" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* NegativeExpression,ParameterType)" Virtual="Abstract" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* NegativeExpression,ParameterType)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::NegativeExpression" Name="NegativeExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::NegativeExpression@s:vl.regex_internal.NegativeExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="parameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::parameter" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* NegativeExpression,ParameterType)::parameter" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::ParameterType" Name="ParameterType">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::ParameterType@s:vl.regex_internal.RegexExpressionAlgorithm`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Apply" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* UsingExpression,ParameterType)" Virtual="Abstract" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* UsingExpression,ParameterType)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::UsingExpression" Name="UsingExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::UsingExpression@s:vl.regex_internal.UsingExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="parameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Apply::parameter" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* UsingExpression,ParameterType)::parameter" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::ParameterType" Name="ParameterType">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::ParameterType@s:vl.regex_internal.RegexExpressionAlgorithm`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* CharSetExpression)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* CharSetExpression)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::CharSetExpression" Name="CharSetExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::CharSetExpression@s:vl.regex_internal.CharSetExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* LoopExpression)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* LoopExpression)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::LoopExpression" Name="LoopExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::LoopExpression@s:vl.regex_internal.LoopExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* SequenceExpression)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* SequenceExpression)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::SequenceExpression" Name="SequenceExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::SequenceExpression@s:vl.regex_internal.SequenceExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* AlternateExpression)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* AlternateExpression)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::AlternateExpression" Name="AlternateExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::AlternateExpression@s:vl.regex_internal.AlternateExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* BeginExpression)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* BeginExpression)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::BeginExpression" Name="BeginExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::BeginExpression@s:vl.regex_internal.BeginExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* EndExpression)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* EndExpression)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::EndExpression" Name="EndExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::EndExpression@s:vl.regex_internal.EndExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* CaptureExpression)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* CaptureExpression)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::CaptureExpression" Name="CaptureExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::CaptureExpression@s:vl.regex_internal.CaptureExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* MatchExpression)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* MatchExpression)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::MatchExpression" Name="MatchExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::MatchExpression@s:vl.regex_internal.MatchExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* PositiveExpression)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* PositiveExpression)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::PositiveExpression" Name="PositiveExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::PositiveExpression@s:vl.regex_internal.PositiveExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* NegativeExpression)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* NegativeExpression)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::NegativeExpression" Name="NegativeExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::NegativeExpression@s:vl.regex_internal.NegativeExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* UsingExpression)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::RegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* UsingExpression)::expression" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::UsingExpression" Name="UsingExpression">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::UsingExpression@s:vl.regex_internal.UsingExpression" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Object@s:vl.Object" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::regex_internal::IRegexExpressionAlgorithm" Name="IRegexExpressionAlgorithm">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex_internal::IRegexExpressionAlgorithm@s:vl.regex_internal.IRegexExpressionAlgorithm" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>