<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="::vl::regex::RegexMatch">
    <ClassDecl Access="Public" Name="RegexMatch" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch" OverloadKey="::vl::regex::RegexMatch" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;A type representing a match of the input string.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <TypedefDecl Access="Public" Name="Ref" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch::Ref" OverloadKey="::vl::regex::RegexMatch::Ref">
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexMatch" Name="RegexMatch">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexMatch@s:vl.regex.RegexMatch" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </TypedefDecl>
        <TypedefDecl Access="Public" Name="List" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch::List" OverloadKey="::vl::regex::RegexMatch::List">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexMatch::Ref" Name="Ref">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexMatch::Ref@s:vl.regex.RegexMatch" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </TypedefDecl>
        <TypedefDecl Access="Public" Name="CaptureList" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch::CaptureList" OverloadKey="::vl::regex::RegexMatch::CaptureList">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexString" Name="RegexString">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexString@s:vl.regex.RegexString" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </TypedefDecl>
        <TypedefDecl Access="Public" Name="CaptureGroup" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch::CaptureGroup" OverloadKey="::vl::regex::RegexMatch::CaptureGroup">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::Group" Name="Group">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::Group`4@s:vl.collections.Group`4" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::WString@s:vl.WString" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexString" Name="RegexString">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexString@s:vl.regex.RegexString" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </TypedefDecl>
        <VarDecl Access="Protected" Name="captures" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch::captures" OverloadKey="::vl::regex::RegexMatch::captures" Static="False">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexString" Name="RegexString">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexString@s:vl.regex.RegexString" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="groups" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch::groups" OverloadKey="::vl::regex::RegexMatch::groups" Static="False">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::Group" Name="Group">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::Group`4@s:vl.collections.Group`4" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::WString@s:vl.WString" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexString" Name="RegexString">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexString@s:vl.regex.RegexString" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="success" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch::success" OverloadKey="::vl::regex::RegexMatch::success" Static="False">
          <Type>
            <RefTypeDecl Name="bool" />
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="result" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch::result" OverloadKey="::vl::regex::RegexMatch::result" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::regex::RegexString" Name="RegexString">
              <ReferencingOverloadKeys>
                <Key Value="::vl::regex::RegexString@s:vl.regex.RegexString" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Protected" Name="RegexMatch" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch::RegexMatch" OverloadKey="::vl::regex::RegexMatch::RegexMatch(&amp; const WString,* regex_internal::PureResult)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_string" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch::RegexMatch::_string" OverloadKey="::vl::regex::RegexMatch::RegexMatch(&amp; const WString,* regex_internal::PureResult)::_string" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_result" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch::RegexMatch::_result" OverloadKey="::vl::regex::RegexMatch::RegexMatch(&amp; const WString,* regex_internal::PureResult)::_result" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::regex_internal::PureResult" Name="PureResult">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::PureResult@s:vl.regex_internal.PureResult" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal" Name="regex_internal">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal@ns:vl.regex_internal" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="RegexMatch" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch::RegexMatch" OverloadKey="::vl::regex::RegexMatch::RegexMatch(&amp; const WString,* regex_internal::RichResult,* regex_internal::RichInterpretor)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_string" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch::RegexMatch::_string" OverloadKey="::vl::regex::RegexMatch::RegexMatch(&amp; const WString,* regex_internal::RichResult,* regex_internal::RichInterpretor)::_string" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_result" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch::RegexMatch::_result" OverloadKey="::vl::regex::RegexMatch::RegexMatch(&amp; const WString,* regex_internal::RichResult,* regex_internal::RichInterpretor)::_result" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::regex_internal::RichResult" Name="RichResult">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::RichResult@s:vl.regex_internal.RichResult" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal" Name="regex_internal">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal@ns:vl.regex_internal" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_rich" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch::RegexMatch::_rich" OverloadKey="::vl::regex::RegexMatch::RegexMatch(&amp; const WString,* regex_internal::RichResult,* regex_internal::RichInterpretor)::_rich" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::regex_internal::RichInterpretor" Name="RichInterpretor">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::RichInterpretor@s:vl.regex_internal.RichInterpretor" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal" Name="regex_internal">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal@ns:vl.regex_internal" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="RegexMatch" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch::RegexMatch" OverloadKey="::vl::regex::RegexMatch::RegexMatch(&amp; const RegexString)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_result" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch::RegexMatch::_result" OverloadKey="::vl::regex::RegexMatch::RegexMatch(&amp; const RegexString)::_result" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex::RegexString" Name="RegexString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex::RegexString@s:vl.regex.RegexString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Success" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch::Success" OverloadKey="::vl::regex::RegexMatch::Success()const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Test if this match is a success match or a failed match. A failed match will only appear when calling &lt;links&gt;&lt;link cref="::vl::regex::Regex::Split(&amp;amp; const WString,bool,&amp;amp; RegexMatch::List)const@s:vl.regex.Regex" /&gt;&lt;/links&gt; or &lt;links&gt;&lt;link cref="::vl::regex::Regex::Cut(&amp;amp; const WString,bool,&amp;amp; RegexMatch::List)const@s:vl.regex.Regex" /&gt;&lt;/links&gt;. In other cases, failed matches are either not included in the result, or become null pointers.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this match is a success match.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch::Result" OverloadKey="::vl::regex::RegexMatch::Result()const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the whole fragment that matches.&lt;/summary&gt;
  &lt;returns&gt;The whole fragment.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex::RegexString" Name="RegexString">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex::RegexString@s:vl.regex.RegexString" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Captures" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch::Captures" OverloadKey="::vl::regex::RegexMatch::Captures()const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get all fragments that are captured.&lt;/summary&gt;
  &lt;returns&gt;All fragments that are captured.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex::RegexMatch::CaptureList" Name="CaptureList">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex::RegexMatch::CaptureList@s:vl.regex.RegexMatch" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Groups" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexMatch::Groups" OverloadKey="::vl::regex::RegexMatch::Groups()const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get all fragments that are captured by named groups.&lt;/summary&gt;
  &lt;returns&gt;All fragments that are captured.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex::RegexMatch::CaptureGroup" Name="CaptureGroup">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex::RegexMatch::CaptureGroup@s:vl.regex.RegexMatch" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Private" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::NotCopyable" Name="NotCopyable">
              <ReferencingOverloadKeys>
                <Key Value="::vl::NotCopyable@s:vl.NotCopyable" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>