<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.TypeFlagTester`2">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="TDerived" Tags="x86, Windows" NameKey="::vl::reflection::description::TDerived" OverloadKey="::vl::reflection::description::TypeFlagTester`2::TDerived" />
        <TypeParameterDecl Access="Public" Name="Flag" Tags="x86, Windows" NameKey="::vl::reflection::description::Flag" OverloadKey="::vl::reflection::description::TypeFlagTester`2::Flag" />
      </TypeParameters>
      <Specialization />
      <Element>
        <ClassDecl Access="Public" Name="TypeFlagTester" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester" OverloadKey="::vl::reflection::description::TypeFlagTester`2" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Result" OverloadKey="::vl::reflection::description::TypeFlagTester`2::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>