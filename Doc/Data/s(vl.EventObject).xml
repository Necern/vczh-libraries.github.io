<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.EventObject">
    <ClassDecl Access="Public" Name="EventObject" Tags="x64, Windows;x86, Windows" NameKey="::vl::EventObject" OverloadKey="::vl::EventObject" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Event.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <VarDecl Access="Private" Name="internalData" Tags="x64, Windows;x86, Windows" NameKey="::vl::EventObject::internalData" OverloadKey="::vl::EventObject::internalData" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <SubTypeDecl Name="EventData">
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::threading_internal" Name="threading_internal">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::threading_internal" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="EventObject" Tags="x64, Windows;x86, Windows" NameKey="::vl::EventObject::EventObject" OverloadKey="::vl::EventObject::EventObject()" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~EventObject" Tags="x64, Windows;x86, Windows" NameKey="::vl::EventObject::~EventObject" OverloadKey="::vl::EventObject::~EventObject()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="CreateAutoUnsignal" Tags="x64, Windows;x86, Windows" NameKey="::vl::EventObject::CreateAutoUnsignal" OverloadKey="::vl::EventObject::CreateAutoUnsignal(bool,&amp; const WString)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Create an auto unsignal event. Auto unsignal means, when one thread waits for the event and succeeded, the event will become unsignaled immediately.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="signaled"&gt;Set to true make the event signaled at the beginning.&lt;/param&gt;
  &lt;param name="name"&gt;Name of the event. If it is not empty, than it is a global named mutex. This argument is only used in Windows.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="signaled" Tags="x64, Windows;x86, Windows" NameKey="::vl::EventObject::CreateAutoUnsignal::signaled" OverloadKey="::vl::EventObject::CreateAutoUnsignal(bool,&amp; const WString)::signaled" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="name" Tags="x64, Windows;x86, Windows" NameKey="::vl::EventObject::CreateAutoUnsignal::name" OverloadKey="::vl::EventObject::CreateAutoUnsignal(bool,&amp; const WString)::name" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="CreateManualUnsignal" Tags="x64, Windows;x86, Windows" NameKey="::vl::EventObject::CreateManualUnsignal" OverloadKey="::vl::EventObject::CreateManualUnsignal(bool,&amp; const WString)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Create a manual unsignal event.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="signaled"&gt;Set to true make the event signaled at the beginning.&lt;/param&gt;
  &lt;param name="name"&gt;Name of the event. If it is not empty, than it is a global named mutex. This argument is only used in Windows.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="signaled" Tags="x64, Windows;x86, Windows" NameKey="::vl::EventObject::CreateManualUnsignal::signaled" OverloadKey="::vl::EventObject::CreateManualUnsignal(bool,&amp; const WString)::signaled" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="name" Tags="x64, Windows;x86, Windows" NameKey="::vl::EventObject::CreateManualUnsignal::name" OverloadKey="::vl::EventObject::CreateManualUnsignal(bool,&amp; const WString)::name" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Open" Tags="x64, Windows;x86, Windows" NameKey="::vl::EventObject::Open" OverloadKey="::vl::EventObject::Open(bool,&amp; const WString)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Open an existing global named event.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="inheritable"&gt;Set to true make the event visible to all all child processes. This argument is only used in Windows.&lt;/param&gt;
  &lt;param name="name"&gt;Name of the event. This argument is only used in Windows.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="inheritable" Tags="x64, Windows;x86, Windows" NameKey="::vl::EventObject::Open::inheritable" OverloadKey="::vl::EventObject::Open(bool,&amp; const WString)::inheritable" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="name" Tags="x64, Windows;x86, Windows" NameKey="::vl::EventObject::Open::name" OverloadKey="::vl::EventObject::Open(bool,&amp; const WString)::name" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Signal" Tags="x64, Windows;x86, Windows" NameKey="::vl::EventObject::Signal" OverloadKey="::vl::EventObject::Signal()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Signal the event.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Unsignal" Tags="x64, Windows;x86, Windows" NameKey="::vl::EventObject::Unsignal" OverloadKey="::vl::EventObject::Unsignal()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Unsignal the event.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::WaitableObject" Name="WaitableObject">
              <ReferencingOverloadKeys>
                <Key Value="::vl::WaitableObject@s:vl.WaitableObject" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>