<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.regex_internal.IRegexExpressionAlgorithm">
    <ClassDecl Access="Public" Name="IRegexExpressionAlgorithm" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm" ClassType="Class">
      <Children>
        <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* CharSetExpression)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* CharSetExpression)::expression" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::CharSetExpression" Name="CharSetExpression">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::CharSetExpression@s:vl.regex_internal.CharSetExpression" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* LoopExpression)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* LoopExpression)::expression" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::LoopExpression" Name="LoopExpression">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::LoopExpression@s:vl.regex_internal.LoopExpression" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* SequenceExpression)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* SequenceExpression)::expression" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::SequenceExpression" Name="SequenceExpression">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::SequenceExpression@s:vl.regex_internal.SequenceExpression" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* AlternateExpression)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* AlternateExpression)::expression" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::AlternateExpression" Name="AlternateExpression">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::AlternateExpression@s:vl.regex_internal.AlternateExpression" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* BeginExpression)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* BeginExpression)::expression" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::BeginExpression" Name="BeginExpression">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::BeginExpression@s:vl.regex_internal.BeginExpression" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* EndExpression)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* EndExpression)::expression" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::EndExpression" Name="EndExpression">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::EndExpression@s:vl.regex_internal.EndExpression" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* CaptureExpression)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* CaptureExpression)::expression" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::CaptureExpression" Name="CaptureExpression">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::CaptureExpression@s:vl.regex_internal.CaptureExpression" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* MatchExpression)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* MatchExpression)::expression" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::MatchExpression" Name="MatchExpression">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::MatchExpression@s:vl.regex_internal.MatchExpression" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* PositiveExpression)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* PositiveExpression)::expression" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::PositiveExpression" Name="PositiveExpression">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::PositiveExpression@s:vl.regex_internal.PositiveExpression" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* NegativeExpression)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* NegativeExpression)::expression" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::NegativeExpression" Name="NegativeExpression">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::NegativeExpression@s:vl.regex_internal.NegativeExpression" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Visit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* UsingExpression)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit::expression" OverloadKey="::vl::regex_internal::IRegexExpressionAlgorithm::Visit(* UsingExpression)::expression" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::UsingExpression" Name="UsingExpression">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::UsingExpression@s:vl.regex_internal.UsingExpression" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Interface" Name="Interface">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Interface@s:vl.Interface" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>