<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.Lazy`1">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <Document>&lt;Document&gt;
  &lt;summary&gt;A type representing a lazy evaluation.&lt;/summary&gt;
  &lt;typeparam name="T"&gt;The type of the evaluation result.&lt;/typeparam&gt;
&lt;/Document&gt;</Document>
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::Lazy`1::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <ClassDecl Access="Public" Name="Lazy" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy" OverloadKey="::vl::Lazy`1" ClassType="Class">
          <Children>
            <ClassDecl Access="Protected" Name="Internal" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy::Internal" OverloadKey="::vl::Lazy`1::Internal" ClassType="Class">
              <Children>
                <VarDecl Access="Public" Name="evaluator" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy::Internal::evaluator" OverloadKey="::vl::Lazy`1::Internal::evaluator" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Func`1@s:vl.Func`1" />
                            <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <FunctionTypeDecl CallingConvention="Default" Const="False">
                          <ReturnType>
                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Lazy`1::T@s:vl.Lazy`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </ReturnType>
                          <Parameters />
                        </FunctionTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy::Internal::value" OverloadKey="::vl::Lazy`1::Internal::value" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Lazy`1::T@s:vl.Lazy`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="evaluated" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy::Internal::evaluated" OverloadKey="::vl::Lazy`1::Internal::evaluated" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Children>
              <BaseTypes />
            </ClassDecl>
            <VarDecl Access="Protected" Name="internalValue" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy::internalValue" OverloadKey="::vl::Lazy`1::internalValue" Static="False">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::Lazy::Internal" Name="Internal">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Lazy`1::Internal@s:vl.Lazy`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </VarDecl>
            <FuncDecl Access="Public" Name="Lazy" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy::Lazy" OverloadKey="::vl::Lazy`1::Lazy()" Virtual="Normal" Function="Constructor">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Create an empty evaluation.&lt;/summary&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Lazy" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy::Lazy" OverloadKey="::vl::Lazy`1::Lazy(&amp; const Func&lt;function () : T&gt;)" Virtual="Normal" Function="Constructor">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Create an evaluation using a function.&lt;/summary&gt;
  &lt;param name="evaluator"&gt;The function.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="evaluator" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy::Lazy::evaluator" OverloadKey="::vl::Lazy`1::Lazy(&amp; const Func&lt;function () : T&gt;)::evaluator" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Func`1@s:vl.Func`1" />
                                        <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                                      <ReturnType>
                                        <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::Lazy`1::T@s:vl.Lazy`1" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </ReturnType>
                                      <Parameters />
                                    </FunctionTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Lazy" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy::Lazy" OverloadKey="::vl::Lazy`1::Lazy(&amp; const T)" Virtual="Normal" Function="Constructor">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Create an evaluation using the result directly.&lt;/summary&gt;
  &lt;param name="value"&gt;The result that you have already known.&lt;/param&gt;0
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy::Lazy::value" OverloadKey="::vl::Lazy`1::Lazy(&amp; const T)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Lazy`1::T@s:vl.Lazy`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Lazy" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy::Lazy" OverloadKey="::vl::Lazy`1::Lazy(&amp; const Lazy&lt;T&gt;)" Virtual="Normal" Function="Constructor">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Copy an evaluation.&lt;/summary&gt;
  &lt;param name="lazy"&gt;The evaluation to copy.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="lazy" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy::Lazy::lazy" OverloadKey="::vl::Lazy`1::Lazy(&amp; const Lazy&lt;T&gt;)::lazy" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::Lazy" Name="Lazy">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Lazy`1@s:vl.Lazy`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Lazy`1::T@s:vl.Lazy`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator =" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy::operator =" OverloadKey="::vl::Lazy`1::operator =(&amp; const Func&lt;function () : T&gt;)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::Lazy" Name="Lazy">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Lazy`1@s:vl.Lazy`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Lazy`1::T@s:vl.Lazy`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="evaluator" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy::operator =::evaluator" OverloadKey="::vl::Lazy`1::operator =(&amp; const Func&lt;function () : T&gt;)::evaluator" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Func`1@s:vl.Func`1" />
                                        <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                                      <ReturnType>
                                        <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::Lazy`1::T@s:vl.Lazy`1" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </ReturnType>
                                      <Parameters />
                                    </FunctionTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator =" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy::operator =" OverloadKey="::vl::Lazy`1::operator =(&amp; const T)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::Lazy" Name="Lazy">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Lazy`1@s:vl.Lazy`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Lazy`1::T@s:vl.Lazy`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy::operator =::value" OverloadKey="::vl::Lazy`1::operator =(&amp; const T)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Lazy`1::T@s:vl.Lazy`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator =" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy::operator =" OverloadKey="::vl::Lazy`1::operator =(&amp; const Lazy&lt;T&gt;)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::Lazy" Name="Lazy">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Lazy`1@s:vl.Lazy`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Lazy`1::T@s:vl.Lazy`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="lazy" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy::operator =::lazy" OverloadKey="::vl::Lazy`1::operator =(&amp; const Lazy&lt;T&gt;)::lazy" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::Lazy" Name="Lazy">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Lazy`1@s:vl.Lazy`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Lazy`1::T@s:vl.Lazy`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Value" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy::Value" OverloadKey="::vl::Lazy`1::Value()const" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Get the evaluation result. If it has not been calculated yet, it will run the evaluation and cache the result. You will not need to calculate for the second time.&lt;/summary&gt;
  &lt;returns&gt;The evaluation result.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Lazy`1::T@s:vl.Lazy`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="IsEvaluated" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy::IsEvaluated" OverloadKey="::vl::Lazy`1::IsEvaluated()const" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Test if it has already been evaluated or not.&lt;/summary&gt;
  &lt;returns&gt;Returns true if it has already been evaluated.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl Name="bool" />
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="IsAvailable" Tags="x64, Windows;x86, Windows" NameKey="::vl::Lazy::IsAvailable" OverloadKey="::vl::Lazy`1::IsAvailable()const" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Test if it is an empty evaluation or not.&lt;/summary&gt;
  &lt;returns&gt;Returns true if it is not empty.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl Name="bool" />
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Object@s:vl.Object" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>