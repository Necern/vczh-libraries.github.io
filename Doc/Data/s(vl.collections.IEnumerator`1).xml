<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.collections.IEnumerator`1">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Enumerator.&lt;/summary&gt;
  &lt;typeparam name="T"&gt;Type of the elements in the enumerator.&lt;/typeparam&gt;
&lt;/Document&gt;</Document>
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::collections::T" OverloadKey="::vl::collections::IEnumerator`1::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <ClassDecl Access="Public" Name="IEnumerator" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::IEnumerator" OverloadKey="::vl::collections::IEnumerator`1" ClassType="Class">
          <Children>
            <TypedefDecl Access="Public" Name="ElementType" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::IEnumerator::ElementType" OverloadKey="::vl::collections::IEnumerator`1::ElementType">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::collections::T" Name="T">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::IEnumerator`1::T@s:vl.collections.IEnumerator`1" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </TypedefDecl>
            <FuncDecl Access="Public" Name="Clone" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::IEnumerator::Clone" OverloadKey="::vl::collections::IEnumerator`1::Clone()const" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Copy the enumerator with the current state.&lt;/summary&gt;
  &lt;returns&gt;The copied enumerator.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::collections::IEnumerator" Name="IEnumerator">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections::IEnumerator`1@s:vl.collections.IEnumerator`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::collections::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections::IEnumerator`1::T@s:vl.collections.IEnumerator`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Current" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::IEnumerator::Current" OverloadKey="::vl::collections::IEnumerator`1::Current()const" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Get the reference to the current element in the enumerator.&lt;/summary&gt;
  &lt;returns&gt;The reference to the current element.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::collections::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections::IEnumerator`1::T@s:vl.collections.IEnumerator`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Index" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::IEnumerator::Index" OverloadKey="::vl::collections::IEnumerator`1::Index()const" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Get the position of the current element in the enumerator.&lt;/summary&gt;
  &lt;returns&gt;The position of the current element.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Next" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::IEnumerator::Next" OverloadKey="::vl::collections::IEnumerator`1::Next()" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Step forward.&lt;/summary&gt;
  &lt;returns&gt;Returns false if the enumerator reaches the end.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Reset" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::IEnumerator::Reset" OverloadKey="::vl::collections::IEnumerator`1::Reset()" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Reset the enumerator.&lt;/summary&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Evaluated" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::IEnumerator::Evaluated" OverloadKey="::vl::collections::IEnumerator`1::Evaluated()const" Virtual="Virtual" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::Interface" Name="Interface">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Interface@s:vl.Interface" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>