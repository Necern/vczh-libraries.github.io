<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="vl.regex_internal.CharRange">
    <SymbolTree NamespaceUrlName="vl.regex_internal">
      <SymbolParentMapping />
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::CharRange" DisplayName="CharRange class" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::CharRange::List" DisplayName="List typedecl" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::CharRange::begin" DisplayName="begin field" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::CharRange::end" DisplayName="end field" Doc="false" />
        <Overloads DisplayName="CharRange constructor">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::CharRange::CharRange()" DisplayName="CharRange constructor" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::CharRange::CharRange(wchar_t,wchar_t)" DisplayName="CharRange constructor" Doc="false" />
        </Overloads>
        <Overloads DisplayName="operator &lt; method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::CharRange::operator &lt;(CharRange)const" DisplayName="operator &lt; method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::CharRange::operator &lt;(wchar_t)const" DisplayName="operator &lt; method" Doc="false" />
        </Overloads>
        <Overloads DisplayName="operator &lt;= method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::CharRange::operator &lt;=(CharRange)const" DisplayName="operator &lt;= method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::CharRange::operator &lt;=(wchar_t)const" DisplayName="operator &lt;= method" Doc="false" />
        </Overloads>
        <Overloads DisplayName="operator &gt; method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::CharRange::operator &gt;(CharRange)const" DisplayName="operator &gt; method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::CharRange::operator &gt;(wchar_t)const" DisplayName="operator &gt; method" Doc="false" />
        </Overloads>
        <Overloads DisplayName="operator &gt;= method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::CharRange::operator &gt;=(CharRange)const" DisplayName="operator &gt;= method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::CharRange::operator &gt;=(wchar_t)const" DisplayName="operator &gt;= method" Doc="false" />
        </Overloads>
        <Overloads DisplayName="operator == method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::CharRange::operator ==(CharRange)const" DisplayName="operator == method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::CharRange::operator ==(wchar_t)const" DisplayName="operator == method" Doc="false" />
        </Overloads>
        <Overloads DisplayName="operator != method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::CharRange::operator !=(CharRange)const" DisplayName="operator != method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::CharRange::operator !=(wchar_t)const" DisplayName="operator != method" Doc="false" />
        </Overloads>
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>