<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.regex_internal.Expression">
    <ClassDecl Access="Public" Name="Expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Expression" OverloadKey="::vl::regex_internal::Expression" ClassType="Class">
      <Children>
        <TypedefDecl Access="Public" Name="Ref" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Expression::Ref" OverloadKey="::vl::regex_internal::Expression::Ref">
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Expression" Name="Expression">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex_internal::Expression@s:vl.regex_internal.Expression" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </TypedefDecl>
        <TypedefDecl Access="Public" Name="Map" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Expression::Map" OverloadKey="::vl::regex_internal::Expression::Map">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::Dictionary" Name="Dictionary">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::Dictionary`4@s:vl.collections.Dictionary`4" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::WString@s:vl.WString" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
                <SubTypeDecl ReferencingNameKey="::vl::regex_internal::Expression::Ref" Name="Ref">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex_internal::Expression::Ref@s:vl.regex_internal.Expression" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Expression" Name="Expression">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::Expression@s:vl.regex_internal.Expression" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </TypedefDecl>
        <FuncDecl Access="Public" Name="Apply" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Expression::Apply" OverloadKey="::vl::regex_internal::Expression::Apply(&amp; IRegexExpressionAlgorithm)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="algorithm" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Expression::Apply::algorithm" OverloadKey="::vl::regex_internal::Expression::Apply(&amp; IRegexExpressionAlgorithm)::algorithm" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::IRegexExpressionAlgorithm" Name="IRegexExpressionAlgorithm">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::IRegexExpressionAlgorithm@s:vl.regex_internal.IRegexExpressionAlgorithm" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsEqual" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Expression::IsEqual" OverloadKey="::vl::regex_internal::Expression::IsEqual(* Expression)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Expression::IsEqual::expression" OverloadKey="::vl::regex_internal::Expression::IsEqual(* Expression)::expression" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Expression" Name="Expression">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::Expression@s:vl.regex_internal.Expression" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="HasNoExtension" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Expression::HasNoExtension" OverloadKey="::vl::regex_internal::Expression::HasNoExtension()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="CanTreatAsPure" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Expression::CanTreatAsPure" OverloadKey="::vl::regex_internal::Expression::CanTreatAsPure()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="NormalizeCharSet" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Expression::NormalizeCharSet" OverloadKey="::vl::regex_internal::Expression::NormalizeCharSet(&amp; CharRange::List)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="subsets" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Expression::NormalizeCharSet::subsets" OverloadKey="::vl::regex_internal::Expression::NormalizeCharSet(&amp; CharRange::List)::subsets" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::regex_internal::CharRange::List" Name="List">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::CharRange::List@s:vl.regex_internal.CharRange" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::CharRange" Name="CharRange">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::CharRange@s:vl.regex_internal.CharRange" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="CollectCharSet" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Expression::CollectCharSet" OverloadKey="::vl::regex_internal::Expression::CollectCharSet(&amp; CharRange::List)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="subsets" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Expression::CollectCharSet::subsets" OverloadKey="::vl::regex_internal::Expression::CollectCharSet(&amp; CharRange::List)::subsets" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::regex_internal::CharRange::List" Name="List">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::CharRange::List@s:vl.regex_internal.CharRange" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::CharRange" Name="CharRange">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::CharRange@s:vl.regex_internal.CharRange" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ApplyCharSet" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Expression::ApplyCharSet" OverloadKey="::vl::regex_internal::Expression::ApplyCharSet(&amp; CharRange::List)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="subsets" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Expression::ApplyCharSet::subsets" OverloadKey="::vl::regex_internal::Expression::ApplyCharSet(&amp; CharRange::List)::subsets" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::regex_internal::CharRange::List" Name="List">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::CharRange::List@s:vl.regex_internal.CharRange" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::CharRange" Name="CharRange">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::CharRange@s:vl.regex_internal.CharRange" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GenerateEpsilonNfa" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Expression::GenerateEpsilonNfa" OverloadKey="::vl::regex_internal::Expression::GenerateEpsilonNfa()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <SubTypeDecl ReferencingNameKey="::vl::regex_internal::Automaton::Ref" Name="Ref">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex_internal::Automaton::Ref@s:vl.regex_internal.Automaton" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Automaton" Name="Automaton">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::Automaton@s:vl.regex_internal.Automaton" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Private" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::NotCopyable" Name="NotCopyable">
              <ReferencingOverloadKeys>
                <Key Value="::vl::NotCopyable@s:vl.NotCopyable" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>