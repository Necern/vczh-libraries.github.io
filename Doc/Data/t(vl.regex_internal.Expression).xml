<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="::vl::regex_internal::Expression">
    <SymbolTree NamespaceUrlName="vl.regex_internal">
      <SymbolParentMapping />
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::Expression" DisplayName="Expression class" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::Expression::Ref" DisplayName="Ref typedecl" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::Expression::Map" DisplayName="Map typedecl" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::Expression::Apply(&amp; IRegexExpressionAlgorithm)" DisplayName="Apply method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::Expression::IsEqual(* Expression)" DisplayName="IsEqual method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::Expression::HasNoExtension()" DisplayName="HasNoExtension method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::Expression::CanTreatAsPure()" DisplayName="CanTreatAsPure method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::Expression::NormalizeCharSet(&amp; CharRange::List)" DisplayName="NormalizeCharSet method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::Expression::CollectCharSet(&amp; CharRange::List)" DisplayName="CollectCharSet method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::Expression::ApplyCharSet(&amp; CharRange::List)" DisplayName="ApplyCharSet method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::Expression::GenerateEpsilonNfa()" DisplayName="GenerateEpsilonNfa method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>