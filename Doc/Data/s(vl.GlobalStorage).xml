<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="::vl::GlobalStorage">
    <ClassDecl Access="Public" Name="GlobalStorage" Tags="x64, Windows;x86, Windows" NameKey="::vl::GlobalStorage" OverloadKey="::vl::GlobalStorage" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;
Base type of all global storages. A global storage is a value with a key to store some information. In order to create a global storage, you should do the following in a cpp file:
BEGIN_GLOBAL_STOREGE_CLASS(&amp;lt;put the key here, it should be a legal C++ identifier&amp;gt;)
	&amp;lt;put all variables here&amp;gt;
INITIALIZE_GLOBAL_STORAGE_CLASS
	&amp;lt;initialize all variables&amp;gt;
FINALIZE_GLOBAL_STORAGE_CLASS
	&amp;lt;clear all resources because the program is about to exit&amp;gt;
END_GLOBAL_STORAGE_CLASS
Then you have a global storage. You can only use this global storage in the current cpp file. &lt;links&gt;&lt;link cref="::vl::InitializeGlobalStorage()@s:vl.InitializeGlobalStorage" /&gt;&lt;/links&gt; should be called before using any global storage. &lt;links&gt;&lt;link cref="::vl::FinalizeGlobalStorage()@s:vl.FinalizeGlobalStorage" /&gt;&lt;/links&gt; is encouraged to call if you think you will not use any global storages anymore. It will reduce noices when you want to detect memory leaks.
If the key of the global variable is called Key, and the variable you want to access is called Variable, then you can use GetKey()-&amp;gt;Variable to access that variable. The GetKey function is created in the macro calls before.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <VarDecl Access="Private" Name="cleared" Tags="x64, Windows;x86, Windows" NameKey="::vl::GlobalStorage::cleared" OverloadKey="::vl::GlobalStorage::cleared" Static="False">
          <Type>
            <RefTypeDecl Name="bool" />
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="GlobalStorage" Tags="x64, Windows;x86, Windows" NameKey="::vl::GlobalStorage::GlobalStorage" OverloadKey="::vl::GlobalStorage::GlobalStorage(* const wchar_t)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="key" Tags="x64, Windows;x86, Windows" NameKey="::vl::GlobalStorage::GlobalStorage::key" OverloadKey="::vl::GlobalStorage::GlobalStorage(* const wchar_t)::key" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl Name="wchar_t" />
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~GlobalStorage" Tags="x64, Windows;x86, Windows" NameKey="::vl::GlobalStorage::~GlobalStorage" OverloadKey="::vl::GlobalStorage::~GlobalStorage()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Cleared" Tags="x64, Windows;x86, Windows" NameKey="::vl::GlobalStorage::Cleared" OverloadKey="::vl::GlobalStorage::Cleared()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ClearResource" Tags="x64, Windows;x86, Windows" NameKey="::vl::GlobalStorage::ClearResource" OverloadKey="::vl::GlobalStorage::ClearResource()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Private" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::NotCopyable" Name="NotCopyable">
              <ReferencingOverloadKeys>
                <Key Value="::vl::NotCopyable@s:vl.NotCopyable" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>