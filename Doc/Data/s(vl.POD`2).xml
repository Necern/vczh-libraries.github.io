<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.POD`2{^ C.(T)}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::POD`2&lt;* C::(T)&gt;::T" />
        <TypeParameterDecl Access="Public" Name="C" Tags="x86, Windows" NameKey="::vl::C" OverloadKey="::vl::POD`2&lt;* C::(T)&gt;::C" />
      </TypeParameters>
      <Specialization>
        <DecorateTypeDecl Decoration="Pointer">
          <Element>
            <ClassMemberTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::POD`2&lt;* C::(T)&gt;::T@s:vl.POD`2" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <ClassType>
                <RefTypeDecl ReferencingNameKey="::vl::C" Name="C">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::POD`2&lt;* C::(T)&gt;::C@s:vl.POD`2" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ClassType>
            </ClassMemberTypeDecl>
          </Element>
        </DecorateTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="POD" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD" OverloadKey="::vl::POD`2&lt;* C::(T)&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD::Result" OverloadKey="::vl::POD`2&lt;* C::(T)&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl Name="bool" />
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.POD`2{array[_Size] T}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::POD`2&lt;array[_Size] T&gt;::T" />
        <TypeParameterDecl Access="Public" Name="_Size" Tags="x86, Windows" NameKey="::vl::_Size" OverloadKey="::vl::POD`2&lt;array[_Size] T&gt;::_Size" />
      </TypeParameters>
      <Specialization>
        <ArrayTypeDecl Expression="_Size">
          <Element>
            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
              <ReferencingOverloadKeys>
                <Key Value="::vl::POD`2&lt;array[_Size] T&gt;::T@s:vl.POD`2" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Element>
        </ArrayTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="POD" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD" OverloadKey="::vl::POD`2&lt;array[_Size] T&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD::Result" OverloadKey="::vl::POD`2&lt;array[_Size] T&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl Name="bool" />
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.POD`2{collections.Pair{K, V}}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="K" Tags="x86, Windows" NameKey="::vl::K" OverloadKey="::vl::POD`2&lt;collections::Pair&lt;K, V&gt;&gt;::K" />
        <TypeParameterDecl Access="Public" Name="V" Tags="x86, Windows" NameKey="::vl::V" OverloadKey="::vl::POD`2&lt;collections::Pair&lt;K, V&gt;&gt;::V" />
      </TypeParameters>
      <Specialization>
        <GenericTypeDecl>
          <Element>
            <SubTypeDecl ReferencingNameKey="::vl::collections::Pair" Name="Pair">
              <ReferencingOverloadKeys>
                <Key Value="::vl::collections::Pair`2@s:vl.collections.Pair`2" />
              </ReferencingOverloadKeys>
              <Parent>
                <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections@ns:vl.collections" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Parent>
            </SubTypeDecl>
          </Element>
          <TypeArguments>
            <RefTypeDecl ReferencingNameKey="::vl::K" Name="K">
              <ReferencingOverloadKeys>
                <Key Value="::vl::POD`2&lt;collections::Pair&lt;K, V&gt;&gt;::K@s:vl.POD`2" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
            <RefTypeDecl ReferencingNameKey="::vl::V" Name="V">
              <ReferencingOverloadKeys>
                <Key Value="::vl::POD`2&lt;collections::Pair&lt;K, V&gt;&gt;::V@s:vl.POD`2" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </TypeArguments>
        </GenericTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="POD" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD" OverloadKey="::vl::POD`2&lt;collections::Pair&lt;K, V&gt;&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::POD::Result" OverloadKey="::vl::POD`2&lt;collections::Pair&lt;K, V&gt;&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl Name="bool" />
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>