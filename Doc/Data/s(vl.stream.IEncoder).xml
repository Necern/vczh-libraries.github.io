<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.stream.IEncoder">
    <ClassDecl Access="Public" Name="IEncoder" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IEncoder" OverloadKey="::vl::stream::IEncoder" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Encoder interface. This interface defines a writable transformation from one stream to another stream. You can create a &lt;links&gt;&lt;link cref="::vl::stream::EncoderStream@s:vl.stream.EncoderStream" /&gt;&lt;/links&gt; after you have an encoder.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <FuncDecl Access="Public" Name="Setup" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IEncoder::Setup" OverloadKey="::vl::stream::IEncoder::Setup(* IStream)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Set a target writable stream. The &lt;links&gt;&lt;link cref="::vl::stream::IEncoder::Write(* void,vint)@s:vl.stream.IEncoder" /&gt;&lt;/links&gt; function will transform the content and write to this tream.&lt;/summary&gt;
  &lt;param name="_stream"&gt;The target writable stream.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_stream" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IEncoder::Setup::_stream" OverloadKey="::vl::stream::IEncoder::Setup(* IStream)::_stream" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::stream::IStream" Name="IStream">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::stream::IStream@s:vl.stream.IStream" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Close" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IEncoder::Close" OverloadKey="::vl::stream::IEncoder::Close()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Stop the transformation, ensuring all written content is transformed to the target stream.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Write" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IEncoder::Write" OverloadKey="::vl::stream::IEncoder::Write(* void,vint)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Transform content and write to the target stream. This function may cache something to increase performance, so it cannot expect that all transformed content will be written to the target stream immediately.&lt;/summary&gt;
  &lt;returns&gt;Returns the actual size of the content before transforming that is written. The content is treated as being written even it is cached and not actually write to the target stream.&lt;/returns&gt;
  &lt;param name="_buffer"&gt;A buffer storing the content to write.&lt;/param&gt;
  &lt;param name="_size"&gt;The size of the content that is expected to write.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_buffer" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IEncoder::Write::_buffer" OverloadKey="::vl::stream::IEncoder::Write(* void,vint)::_buffer" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl Name="void" />
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_size" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IEncoder::Write::_size" OverloadKey="::vl::stream::IEncoder::Write(* void,vint)::_size" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Interface" Name="Interface">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Interface@s:vl.Interface" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>