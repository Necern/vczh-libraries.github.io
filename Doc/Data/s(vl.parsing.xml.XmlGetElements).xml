<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.parsing.xml.XmlGetElements(Ptr{XmlElement})">
    <FuncDecl Access="Public" Name="XmlGetElements" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::xml::XmlGetElements" OverloadKey="::vl::parsing::xml::XmlGetElements(Ptr&lt;XmlElement&gt;)" Virtual="Normal" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::LazyList" Name="LazyList">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::LazyList`1@s:vl.collections.LazyList`1" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::xml::XmlElement" Name="XmlElement">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::xml::XmlElement@s:vl.parsing.xml.XmlElement" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="element" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::xml::XmlGetElements::element" OverloadKey="::vl::parsing::xml::XmlGetElements(Ptr&lt;XmlElement&gt;)::element" Static="False">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::xml::XmlElement" Name="XmlElement">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::xml::XmlElement@s:vl.parsing.xml.XmlElement" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.parsing.xml.XmlGetElements(Ptr{XmlElement},&amp; const WString)">
    <FuncDecl Access="Public" Name="XmlGetElements" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::xml::XmlGetElements" OverloadKey="::vl::parsing::xml::XmlGetElements(Ptr&lt;XmlElement&gt;,&amp; const WString)" Virtual="Normal" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::LazyList" Name="LazyList">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::LazyList`1@s:vl.collections.LazyList`1" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::xml::XmlElement" Name="XmlElement">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::xml::XmlElement@s:vl.parsing.xml.XmlElement" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="element" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::xml::XmlGetElements::element" OverloadKey="::vl::parsing::xml::XmlGetElements(Ptr&lt;XmlElement&gt;,&amp; const WString)::element" Static="False">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::xml::XmlElement" Name="XmlElement">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::xml::XmlElement@s:vl.parsing.xml.XmlElement" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="name" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::xml::XmlGetElements::name" OverloadKey="::vl::parsing::xml::XmlGetElements(Ptr&lt;XmlElement&gt;,&amp; const WString)::name" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::WString@s:vl.WString" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.parsing.xml.XmlGetElements(^ XmlElement)">
    <FuncDecl Access="Public" Name="XmlGetElements" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::xml::XmlGetElements" OverloadKey="::vl::parsing::xml::XmlGetElements(* XmlElement)" Virtual="Normal" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::LazyList" Name="LazyList">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::LazyList`1@s:vl.collections.LazyList`1" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::xml::XmlElement" Name="XmlElement">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::xml::XmlElement@s:vl.parsing.xml.XmlElement" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="element" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::xml::XmlGetElements::element" OverloadKey="::vl::parsing::xml::XmlGetElements(* XmlElement)::element" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::xml::XmlElement" Name="XmlElement">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::xml::XmlElement@s:vl.parsing.xml.XmlElement" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.parsing.xml.XmlGetElements(^ XmlElement,&amp; const WString)">
    <FuncDecl Access="Public" Name="XmlGetElements" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::xml::XmlGetElements" OverloadKey="::vl::parsing::xml::XmlGetElements(* XmlElement,&amp; const WString)" Virtual="Normal" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::LazyList" Name="LazyList">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::LazyList`1@s:vl.collections.LazyList`1" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::xml::XmlElement" Name="XmlElement">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::xml::XmlElement@s:vl.parsing.xml.XmlElement" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="element" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::xml::XmlGetElements::element" OverloadKey="::vl::parsing::xml::XmlGetElements(* XmlElement,&amp; const WString)::element" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::xml::XmlElement" Name="XmlElement">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::xml::XmlElement@s:vl.parsing.xml.XmlElement" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="name" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::xml::XmlGetElements::name" OverloadKey="::vl::parsing::xml::XmlGetElements(* XmlElement,&amp; const WString)::name" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::WString@s:vl.WString" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
</OverloadingSymbols>