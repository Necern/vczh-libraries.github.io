<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="::vl::parsing::ParsingToken">
    <ClassDecl Access="Public" Name="ParsingToken" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingToken" OverloadKey="::vl::parsing::ParsingToken" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Strong typed token syntax node, for all class fields of type "token" in the grammar file. See &lt;links&gt;&lt;link cref="::vl::parsing::tabling::ParsingTable@s:vl.parsing.tabling.ParsingTable" /&gt;&lt;/links&gt; for details.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <VarDecl Access="Public" Name="tokenIndex" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingToken::tokenIndex" OverloadKey="::vl::parsing::ParsingToken::tokenIndex" Static="False">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Type of the token, representing the index of a regular expression that creates this token in the regular expression list in the grammar file.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
              <ReferencingOverloadKeys>
                <Key Value="::vl::vint@s:vl.vint" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingToken::value" OverloadKey="::vl::parsing::ParsingToken::value" Static="False">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Content of the token.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
              <ReferencingOverloadKeys>
                <Key Value="::vl::WString@s:vl.WString" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="ParsingToken" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingToken::ParsingToken" OverloadKey="::vl::parsing::ParsingToken::ParsingToken()" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeCustomBase" Name="ParsingTreeCustomBase">
              <ReferencingOverloadKeys>
                <Key Value="::vl::parsing::ParsingTreeCustomBase@s:vl.parsing.ParsingTreeCustomBase" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::reflection::Description" Name="Description">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::Description`1@s:vl.reflection.Description`1" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection" Name="reflection">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection@ns:vl.reflection" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingToken" Name="ParsingToken">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::parsing::ParsingToken@s:vl.parsing.ParsingToken" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>