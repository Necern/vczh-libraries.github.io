<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.AcceptType`1{T,YesType}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::AcceptType`1&lt;T,YesType&gt;::T" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
          <ReferencingOverloadKeys>
            <Key Value="::vl::AcceptType`1&lt;T,YesType&gt;::T@s:vl.AcceptType`1{T,YesType}" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
        <RefTypeDecl ReferencingNameKey="::vl::YesType" Name="YesType">
          <ReferencingOverloadKeys>
            <Key Value="::vl::YesType@s:vl.YesType" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="AcceptType" Tags="x64, Windows;x86, Windows" NameKey="::vl::AcceptType" OverloadKey="::vl::AcceptType`1&lt;T,YesType&gt;" ClassType="Struct">
          <Children>
            <TypedefDecl Access="Public" Name="Type" Tags="x64, Windows;x86, Windows" NameKey="::vl::AcceptType::Type" OverloadKey="::vl::AcceptType`1&lt;T,YesType&gt;::Type">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::AcceptType`1&lt;T,YesType&gt;::T@s:vl.AcceptType`1{T,YesType}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </TypedefDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>