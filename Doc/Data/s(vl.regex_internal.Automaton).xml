<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.regex_internal.Automaton">
    <ClassDecl Access="Public" Name="Automaton" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton" OverloadKey="::vl::regex_internal::Automaton" ClassType="Class">
      <Children>
        <TypedefDecl Access="Public" Name="Ref" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::Ref" OverloadKey="::vl::regex_internal::Automaton::Ref">
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Automaton" Name="Automaton">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex_internal::Automaton@s:vl.regex_internal.Automaton" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </TypedefDecl>
        <VarDecl Access="Public" Name="states" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::states" OverloadKey="::vl::regex_internal::Automaton::states" Static="False">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Public" Name="transitions" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::transitions" OverloadKey="::vl::regex_internal::Automaton::transitions" Static="False">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::Transition@s:vl.regex_internal.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Public" Name="captureNames" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::captureNames" OverloadKey="::vl::regex_internal::Automaton::captureNames" Static="False">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::WString@s:vl.WString" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Public" Name="startState" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::startState" OverloadKey="::vl::regex_internal::Automaton::startState" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="Automaton" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::Automaton" OverloadKey="::vl::regex_internal::Automaton::Automaton()" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="NewState" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewState" OverloadKey="::vl::regex_internal::Automaton::NewState()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="NewTransition" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewTransition" OverloadKey="::vl::regex_internal::Automaton::NewTransition(* State,* State)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::Transition@s:vl.regex_internal.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewTransition::start" OverloadKey="::vl::regex_internal::Automaton::NewTransition(* State,* State)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewTransition::end" OverloadKey="::vl::regex_internal::Automaton::NewTransition(* State,* State)::end" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="NewChars" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewChars" OverloadKey="::vl::regex_internal::Automaton::NewChars(* State,* State,CharRange)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::Transition@s:vl.regex_internal.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewChars::start" OverloadKey="::vl::regex_internal::Automaton::NewChars(* State,* State,CharRange)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewChars::end" OverloadKey="::vl::regex_internal::Automaton::NewChars(* State,* State,CharRange)::end" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="range" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewChars::range" OverloadKey="::vl::regex_internal::Automaton::NewChars(* State,* State,CharRange)::range" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::CharRange" Name="CharRange">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::CharRange@s:vl.regex_internal.CharRange" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="NewEpsilon" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewEpsilon" OverloadKey="::vl::regex_internal::Automaton::NewEpsilon(* State,* State)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::Transition@s:vl.regex_internal.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewEpsilon::start" OverloadKey="::vl::regex_internal::Automaton::NewEpsilon(* State,* State)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewEpsilon::end" OverloadKey="::vl::regex_internal::Automaton::NewEpsilon(* State,* State)::end" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="NewBeginString" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewBeginString" OverloadKey="::vl::regex_internal::Automaton::NewBeginString(* State,* State)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::Transition@s:vl.regex_internal.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewBeginString::start" OverloadKey="::vl::regex_internal::Automaton::NewBeginString(* State,* State)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewBeginString::end" OverloadKey="::vl::regex_internal::Automaton::NewBeginString(* State,* State)::end" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="NewEndString" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewEndString" OverloadKey="::vl::regex_internal::Automaton::NewEndString(* State,* State)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::Transition@s:vl.regex_internal.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewEndString::start" OverloadKey="::vl::regex_internal::Automaton::NewEndString(* State,* State)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewEndString::end" OverloadKey="::vl::regex_internal::Automaton::NewEndString(* State,* State)::end" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="NewNop" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewNop" OverloadKey="::vl::regex_internal::Automaton::NewNop(* State,* State)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::Transition@s:vl.regex_internal.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewNop::start" OverloadKey="::vl::regex_internal::Automaton::NewNop(* State,* State)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewNop::end" OverloadKey="::vl::regex_internal::Automaton::NewNop(* State,* State)::end" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="NewCapture" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewCapture" OverloadKey="::vl::regex_internal::Automaton::NewCapture(* State,* State,vint)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::Transition@s:vl.regex_internal.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewCapture::start" OverloadKey="::vl::regex_internal::Automaton::NewCapture(* State,* State,vint)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewCapture::end" OverloadKey="::vl::regex_internal::Automaton::NewCapture(* State,* State,vint)::end" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="capture" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewCapture::capture" OverloadKey="::vl::regex_internal::Automaton::NewCapture(* State,* State,vint)::capture" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="NewMatch" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewMatch" OverloadKey="::vl::regex_internal::Automaton::NewMatch(* State,* State,vint,vint)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::Transition@s:vl.regex_internal.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewMatch::start" OverloadKey="::vl::regex_internal::Automaton::NewMatch(* State,* State,vint,vint)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewMatch::end" OverloadKey="::vl::regex_internal::Automaton::NewMatch(* State,* State,vint,vint)::end" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="capture" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewMatch::capture" OverloadKey="::vl::regex_internal::Automaton::NewMatch(* State,* State,vint,vint)::capture" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewMatch::index" OverloadKey="::vl::regex_internal::Automaton::NewMatch(* State,* State,vint,vint)::index" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="NewPositive" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewPositive" OverloadKey="::vl::regex_internal::Automaton::NewPositive(* State,* State)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::Transition@s:vl.regex_internal.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewPositive::start" OverloadKey="::vl::regex_internal::Automaton::NewPositive(* State,* State)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewPositive::end" OverloadKey="::vl::regex_internal::Automaton::NewPositive(* State,* State)::end" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="NewNegative" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewNegative" OverloadKey="::vl::regex_internal::Automaton::NewNegative(* State,* State)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::Transition@s:vl.regex_internal.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewNegative::start" OverloadKey="::vl::regex_internal::Automaton::NewNegative(* State,* State)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewNegative::end" OverloadKey="::vl::regex_internal::Automaton::NewNegative(* State,* State)::end" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="NewNegativeFail" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewNegativeFail" OverloadKey="::vl::regex_internal::Automaton::NewNegativeFail(* State,* State)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::Transition@s:vl.regex_internal.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewNegativeFail::start" OverloadKey="::vl::regex_internal::Automaton::NewNegativeFail(* State,* State)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewNegativeFail::end" OverloadKey="::vl::regex_internal::Automaton::NewNegativeFail(* State,* State)::end" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="NewEnd" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewEnd" OverloadKey="::vl::regex_internal::Automaton::NewEnd(* State,* State)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::Transition@s:vl.regex_internal.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewEnd::start" OverloadKey="::vl::regex_internal::Automaton::NewEnd(* State,* State)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::Automaton::NewEnd::end" OverloadKey="::vl::regex_internal::Automaton::NewEnd(* State,* State)::end" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes />
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>