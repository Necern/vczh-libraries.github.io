<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="vl.regex_internal.RegexExpressionAlgorithm`2">
    <SymbolTree NamespaceUrlName="vl.regex_internal">
      <SymbolParentMapping>
        <Map From="::vl::regex_internal::RegexExpressionAlgorithm`2::ReturnType" To="::vl::regex_internal::RegexExpressionAlgorithm`2" />
        <Map From="::vl::regex_internal::RegexExpressionAlgorithm`2::ParameterType" To="::vl::regex_internal::RegexExpressionAlgorithm`2" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2" DisplayName="RegexExpressionAlgorithm class" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::returnValue" DisplayName="returnValue field" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::parameterValue" DisplayName="parameterValue field" Doc="false" />
        <Overloads DisplayName="Invoke method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Invoke(* Expression,ParameterType)" DisplayName="Invoke method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Invoke(Expression::Ref,ParameterType)" DisplayName="Invoke method" Doc="false" />
        </Overloads>
        <Overloads DisplayName="Apply method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Apply(* CharSetExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Apply(* LoopExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Apply(* SequenceExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Apply(* AlternateExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Apply(* BeginExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Apply(* EndExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Apply(* CaptureExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Apply(* MatchExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Apply(* PositiveExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Apply(* NegativeExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Apply(* UsingExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
        </Overloads>
        <Overloads DisplayName="Visit method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Visit(* CharSetExpression)" DisplayName="Visit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Visit(* LoopExpression)" DisplayName="Visit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Visit(* SequenceExpression)" DisplayName="Visit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Visit(* AlternateExpression)" DisplayName="Visit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Visit(* BeginExpression)" DisplayName="Visit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Visit(* EndExpression)" DisplayName="Visit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Visit(* CaptureExpression)" DisplayName="Visit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Visit(* MatchExpression)" DisplayName="Visit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Visit(* PositiveExpression)" DisplayName="Visit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Visit(* NegativeExpression)" DisplayName="Visit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`2::Visit(* UsingExpression)" DisplayName="Visit method" Doc="false" />
        </Overloads>
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>