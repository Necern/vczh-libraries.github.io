<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="::vl::workflow::runtime::LoadFunction`1(Ptr&lt;WfRuntimeGlobalContext&gt;,&amp; const WString)">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Load a C++ friendly function from a global context, raise an exception if multiple functions are found under the same name. Function "&amp;gt;initialize&amp;lt;" should be the first to execute.&lt;/summary&gt;
  &lt;typeparam name="TFunction"&gt;Type of the function.&lt;/typeparam&gt;
  &lt;returns&gt;The loaded C++ friendly function.&lt;/returns&gt;
  &lt;param name="context"&gt;The context to the evaluation environment.&lt;/param&gt;
  &lt;param name="name"&gt;The function name.&lt;/param&gt;
&lt;/Document&gt;</Document>
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="TFunction" Tags="x86, Windows" NameKey="::vl::workflow::runtime::TFunction" OverloadKey="::vl::workflow::runtime::LoadFunction`1(Ptr&lt;WfRuntimeGlobalContext&gt;,&amp; const WString)::TFunction" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="LoadFunction" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::runtime::LoadFunction" OverloadKey="::vl::workflow::runtime::LoadFunction`1(Ptr&lt;WfRuntimeGlobalContext&gt;,&amp; const WString)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Func`1@s:vl.Func`1" />
                        <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::workflow::runtime::TFunction" Name="TFunction">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::workflow::runtime::LoadFunction`1(Ptr&lt;WfRuntimeGlobalContext&gt;,&amp; const WString)::TFunction@s:vl.workflow.runtime.LoadFunction`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="context" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::runtime::LoadFunction::context" OverloadKey="::vl::workflow::runtime::LoadFunction`1(Ptr&lt;WfRuntimeGlobalContext&gt;,&amp; const WString)::context" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::workflow::runtime::WfRuntimeGlobalContext" Name="WfRuntimeGlobalContext">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::workflow::runtime::WfRuntimeGlobalContext@s:vl.workflow.runtime.WfRuntimeGlobalContext" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="name" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::runtime::LoadFunction::name" OverloadKey="::vl::workflow::runtime::LoadFunction`1(Ptr&lt;WfRuntimeGlobalContext&gt;,&amp; const WString)::name" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>