<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.stream.internal.operator {{`2(&amp; Reader{TContext},&amp; TValue)">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="TValue" Tags="x86, Windows" NameKey="::vl::stream::internal::TValue" OverloadKey="::vl::stream::internal::operator &lt;&lt;`2(&amp; Reader&lt;TContext&gt;,&amp; TValue)::TValue" />
        <TypeParameterDecl Access="Public" Name="TContext" Tags="x86, Windows" NameKey="::vl::stream::internal::TContext" OverloadKey="::vl::stream::internal::operator &lt;&lt;`2(&amp; Reader&lt;TContext&gt;,&amp; TValue)::TContext" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="operator &lt;&lt;" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::internal::operator &lt;&lt;" OverloadKey="::vl::stream::internal::operator &lt;&lt;`2(&amp; Reader&lt;TContext&gt;,&amp; TValue)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::stream::internal::Reader" Name="Reader">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::stream::internal::Reader`1@s:vl.stream.internal.Reader`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::stream::internal::TContext" Name="TContext">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::stream::internal::operator &lt;&lt;`2(&amp; Reader&lt;TContext&gt;,&amp; TValue)::TContext@s:vl.stream.internal.operator {{`2(&amp; Reader{TContext},&amp; TValue)" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="reader" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::internal::operator &lt;&lt;::reader" OverloadKey="::vl::stream::internal::operator &lt;&lt;`2(&amp; Reader&lt;TContext&gt;,&amp; TValue)::reader" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::stream::internal::Reader" Name="Reader">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::stream::internal::Reader`1@s:vl.stream.internal.Reader`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::stream::internal::TContext" Name="TContext">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::stream::internal::operator &lt;&lt;`2(&amp; Reader&lt;TContext&gt;,&amp; TValue)::TContext@s:vl.stream.internal.operator {{`2(&amp; Reader{TContext},&amp; TValue)" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::internal::operator &lt;&lt;::value" OverloadKey="::vl::stream::internal::operator &lt;&lt;`2(&amp; Reader&lt;TContext&gt;,&amp; TValue)::value" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::stream::internal::TValue" Name="TValue">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::stream::internal::operator &lt;&lt;`2(&amp; Reader&lt;TContext&gt;,&amp; TValue)::TValue@s:vl.stream.internal.operator {{`2(&amp; Reader{TContext},&amp; TValue)" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.stream.internal.operator {{`2(&amp; Writer{TContext},&amp; TValue)">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="TValue" Tags="x86, Windows" NameKey="::vl::stream::internal::TValue" OverloadKey="::vl::stream::internal::operator &lt;&lt;`2(&amp; Writer&lt;TContext&gt;,&amp; TValue)::TValue" />
        <TypeParameterDecl Access="Public" Name="TContext" Tags="x86, Windows" NameKey="::vl::stream::internal::TContext" OverloadKey="::vl::stream::internal::operator &lt;&lt;`2(&amp; Writer&lt;TContext&gt;,&amp; TValue)::TContext" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="operator &lt;&lt;" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::internal::operator &lt;&lt;" OverloadKey="::vl::stream::internal::operator &lt;&lt;`2(&amp; Writer&lt;TContext&gt;,&amp; TValue)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::stream::internal::Writer" Name="Writer">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::stream::internal::Writer`1@s:vl.stream.internal.Writer`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::stream::internal::TContext" Name="TContext">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::stream::internal::operator &lt;&lt;`2(&amp; Writer&lt;TContext&gt;,&amp; TValue)::TContext@s:vl.stream.internal.operator {{`2(&amp; Writer{TContext},&amp; TValue)" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="writer" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::internal::operator &lt;&lt;::writer" OverloadKey="::vl::stream::internal::operator &lt;&lt;`2(&amp; Writer&lt;TContext&gt;,&amp; TValue)::writer" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::stream::internal::Writer" Name="Writer">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::stream::internal::Writer`1@s:vl.stream.internal.Writer`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::stream::internal::TContext" Name="TContext">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::stream::internal::operator &lt;&lt;`2(&amp; Writer&lt;TContext&gt;,&amp; TValue)::TContext@s:vl.stream.internal.operator {{`2(&amp; Writer{TContext},&amp; TValue)" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::internal::operator &lt;&lt;::value" OverloadKey="::vl::stream::internal::operator &lt;&lt;`2(&amp; Writer&lt;TContext&gt;,&amp; TValue)::value" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::stream::internal::TValue" Name="TValue">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::stream::internal::operator &lt;&lt;`2(&amp; Writer&lt;TContext&gt;,&amp; TValue)::TValue@s:vl.stream.internal.operator {{`2(&amp; Writer{TContext},&amp; TValue)" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>