<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.parsing.ParsingTextRange">
    <ClassDecl Access="Public" Name="ParsingTextRange" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTextRange" OverloadKey="::vl::parsing::ParsingTextRange" ClassType="Struct">
      <Document>&lt;Document&gt;
  &lt;summary&gt;A type representing text range.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTextRange::start" OverloadKey="::vl::parsing::ParsingTextRange::start" Static="False">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Text position for the first character.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTextPos" Name="ParsingTextPos">
              <ReferencingOverloadKeys>
                <Key Value="::vl::parsing::ParsingTextPos@s:vl.parsing.ParsingTextPos" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTextRange::end" OverloadKey="::vl::parsing::ParsingTextRange::end" Static="False">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Text position for the last character.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTextPos" Name="ParsingTextPos">
              <ReferencingOverloadKeys>
                <Key Value="::vl::parsing::ParsingTextPos@s:vl.parsing.ParsingTextPos" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Public" Name="codeIndex" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTextRange::codeIndex" OverloadKey="::vl::parsing::ParsingTextRange::codeIndex" Static="False">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Code index, refer to &lt;links&gt;&lt;link cref="::vl::regex::RegexToken::codeIndex@s:vl.regex.RegexToken" /&gt;&lt;/links&gt;&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
              <ReferencingOverloadKeys>
                <Key Value="::vl::vint@s:vl.vint" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="ParsingTextRange" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTextRange::ParsingTextRange" OverloadKey="::vl::parsing::ParsingTextRange::ParsingTextRange()" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ParsingTextRange" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTextRange::ParsingTextRange" OverloadKey="::vl::parsing::ParsingTextRange::ParsingTextRange(&amp; const ParsingTextPos,&amp; const ParsingTextPos,vint)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_start" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTextRange::ParsingTextRange::_start" OverloadKey="::vl::parsing::ParsingTextRange::ParsingTextRange(&amp; const ParsingTextPos,&amp; const ParsingTextPos,vint)::_start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTextPos" Name="ParsingTextPos">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTextPos@s:vl.parsing.ParsingTextPos" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_end" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTextRange::ParsingTextRange::_end" OverloadKey="::vl::parsing::ParsingTextRange::ParsingTextRange(&amp; const ParsingTextPos,&amp; const ParsingTextPos,vint)::_end" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTextPos" Name="ParsingTextPos">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTextPos@s:vl.parsing.ParsingTextPos" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_codeIndex" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTextRange::ParsingTextRange::_codeIndex" OverloadKey="::vl::parsing::ParsingTextRange::ParsingTextRange(&amp; const ParsingTextPos,&amp; const ParsingTextPos,vint)::_codeIndex" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ParsingTextRange" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTextRange::ParsingTextRange" OverloadKey="::vl::parsing::ParsingTextRange::ParsingTextRange(* const regex::RegexToken,* const regex::RegexToken)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="startToken" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTextRange::ParsingTextRange::startToken" OverloadKey="::vl::parsing::ParsingTextRange::ParsingTextRange(* const regex::RegexToken,* const regex::RegexToken)::startToken" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <SubTypeDecl ReferencingNameKey="::vl::regex::RegexToken" Name="RegexToken">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex::RegexToken@s:vl.regex.RegexToken" />
                              </ReferencingOverloadKeys>
                              <Parent>
                                <RefTypeDecl ReferencingNameKey="::vl::regex" Name="regex">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::regex@ns:vl.regex" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Parent>
                            </SubTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="endToken" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTextRange::ParsingTextRange::endToken" OverloadKey="::vl::parsing::ParsingTextRange::ParsingTextRange(* const regex::RegexToken,* const regex::RegexToken)::endToken" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <SubTypeDecl ReferencingNameKey="::vl::regex::RegexToken" Name="RegexToken">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex::RegexToken@s:vl.regex.RegexToken" />
                              </ReferencingOverloadKeys>
                              <Parent>
                                <RefTypeDecl ReferencingNameKey="::vl::regex" Name="regex">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::regex@ns:vl.regex" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Parent>
                            </SubTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="operator ==" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTextRange::operator ==" OverloadKey="::vl::parsing::ParsingTextRange::operator ==(&amp; const ParsingTextRange)const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="range" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTextRange::operator ==::range" OverloadKey="::vl::parsing::ParsingTextRange::operator ==(&amp; const ParsingTextRange)const::range" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTextRange" Name="ParsingTextRange">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTextRange@s:vl.parsing.ParsingTextRange" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="operator !=" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTextRange::operator !=" OverloadKey="::vl::parsing::ParsingTextRange::operator !=(&amp; const ParsingTextRange)const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="range" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTextRange::operator !=::range" OverloadKey="::vl::parsing::ParsingTextRange::operator !=(&amp; const ParsingTextRange)const::range" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTextRange" Name="ParsingTextRange">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTextRange@s:vl.parsing.ParsingTextRange" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Contains" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTextRange::Contains" OverloadKey="::vl::parsing::ParsingTextRange::Contains(&amp; const ParsingTextPos)const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="pos" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTextRange::Contains::pos" OverloadKey="::vl::parsing::ParsingTextRange::Contains(&amp; const ParsingTextPos)const::pos" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTextPos" Name="ParsingTextPos">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTextPos@s:vl.parsing.ParsingTextPos" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Contains" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTextRange::Contains" OverloadKey="::vl::parsing::ParsingTextRange::Contains(&amp; const ParsingTextRange)const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="range" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingTextRange::Contains::range" OverloadKey="::vl::parsing::ParsingTextRange::Contains(&amp; const ParsingTextRange)const::range" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTextRange" Name="ParsingTextRange">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::ParsingTextRange@s:vl.parsing.ParsingTextRange" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes />
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>