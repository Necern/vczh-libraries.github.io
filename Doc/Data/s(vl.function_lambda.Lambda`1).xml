<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.function_lambda.Lambda`1(T)">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Create a function reference to a function object or a lambda expression, with all type information autotimatically inferred. You can use the macro called "LAMBDA" to refer to this function.&lt;/summary&gt;
  &lt;typeparam name="T"&gt;Type of the function object or the lambda expression.&lt;/typeparam&gt;
  &lt;returns&gt;The function reference.&lt;/returns&gt;
  &lt;param name="functionObject"&gt;The function object or the lambda expression.&lt;/param&gt;
&lt;/Document&gt;</Document>
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::function_lambda::T" OverloadKey="::vl::function_lambda::Lambda`1(T)::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="Lambda" Tags="x64, Windows;x86, Windows" NameKey="::vl::function_lambda::Lambda" OverloadKey="::vl::function_lambda::Lambda`1(T)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <SubTypeDecl ReferencingNameKey="::vl::function_lambda::LambdaRetriveType::Type" Name="Type">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::function_lambda::LambdaRetriveType`1::Type@s:vl.function_lambda.LambdaRetriveType`1" />
                    <Key Value="::vl::function_lambda::LambdaRetriveType`3&lt;* TObject::(function __thiscall const (... TArgs) : R)&gt;::Type@s:vl.function_lambda.LambdaRetriveType`3{^ TObject.(function __thiscall const (... TArgs) # R)}" />
                    <Key Value="::vl::function_lambda::LambdaRetriveType`3&lt;* TObject::(function __thiscall (... TArgs) : R)&gt;::Type@s:vl.function_lambda.LambdaRetriveType`3{^ TObject.(function __thiscall (... TArgs) # R)}" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::function_lambda::LambdaRetriveType" Name="LambdaRetriveType">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::function_lambda::LambdaRetriveType`1@s:vl.function_lambda.LambdaRetriveType`1" />
                            <Key Value="::vl::function_lambda::LambdaRetriveType`3&lt;* TObject::(function __thiscall const (... TArgs) : R)&gt;@s:vl.function_lambda.LambdaRetriveType`3{^ TObject.(function __thiscall const (... TArgs) # R)}" />
                            <Key Value="::vl::function_lambda::LambdaRetriveType`3&lt;* TObject::(function __thiscall (... TArgs) : R)&gt;@s:vl.function_lambda.LambdaRetriveType`3{^ TObject.(function __thiscall (... TArgs) # R)}" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <DeclTypeDecl Expression="&amp; T : : operator ( )" />
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="functionObject" Tags="x64, Windows;x86, Windows" NameKey="::vl::function_lambda::Lambda::functionObject" OverloadKey="::vl::function_lambda::Lambda`1(T)::functionObject" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::function_lambda::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::function_lambda::Lambda`1(T)::T@s:vl.function_lambda.Lambda`1(T)" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>