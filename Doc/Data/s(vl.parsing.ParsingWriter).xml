<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.parsing.ParsingWriter">
    <ClassDecl Access="Public" Name="ParsingWriter" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter" OverloadKey="::vl::parsing::ParsingWriter" ClassType="Class">
      <Children>
        <TypedefDecl Access="Private" Name="NodePosPair" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::NodePosPair" OverloadKey="::vl::parsing::ParsingWriter::NodePosPair">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::Pair" Name="Pair">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::Pair`2@s:vl.collections.Pair`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeCustomBase" Name="ParsingTreeCustomBase">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::ParsingTreeCustomBase@s:vl.parsing.ParsingTreeCustomBase" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
                <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTextPos" Name="ParsingTextPos">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::parsing::ParsingTextPos@s:vl.parsing.ParsingTextPos" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </TypedefDecl>
        <TypedefDecl Access="Private" Name="NodePosList" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::NodePosList" OverloadKey="::vl::parsing::ParsingWriter::NodePosList">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingWriter::NodePosPair" Name="NodePosPair">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::parsing::ParsingWriter::NodePosPair@s:vl.parsing.ParsingWriter" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </TypedefDecl>
        <VarDecl Access="Protected" Name="writer" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::writer" OverloadKey="::vl::parsing::ParsingWriter::writer" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="LeftRef">
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::stream::TextWriter" Name="TextWriter">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::stream::TextWriter@s:vl.stream.TextWriter" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::stream" Name="stream">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::stream@ns:vl.stream" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="recorder" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::recorder" OverloadKey="::vl::parsing::ParsingWriter::recorder" Static="False">
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::parsing::IParsingPrintNodeRecorder" Name="IParsingPrintNodeRecorder">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::parsing::IParsingPrintNodeRecorder@s:vl.parsing.IParsingPrintNodeRecorder" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="codeIndex" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::codeIndex" OverloadKey="::vl::parsing::ParsingWriter::codeIndex" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
              <ReferencingOverloadKeys>
                <Key Value="::vl::vint@s:vl.vint" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="lastPos" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::lastPos" OverloadKey="::vl::parsing::ParsingWriter::lastPos" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTextPos" Name="ParsingTextPos">
              <ReferencingOverloadKeys>
                <Key Value="::vl::parsing::ParsingTextPos@s:vl.parsing.ParsingTextPos" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="currentPos" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::currentPos" OverloadKey="::vl::parsing::ParsingWriter::currentPos" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTextPos" Name="ParsingTextPos">
              <ReferencingOverloadKeys>
                <Key Value="::vl::parsing::ParsingTextPos@s:vl.parsing.ParsingTextPos" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="nodePositions" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::nodePositions" OverloadKey="::vl::parsing::ParsingWriter::nodePositions" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingWriter::NodePosList" Name="NodePosList">
              <ReferencingOverloadKeys>
                <Key Value="::vl::parsing::ParsingWriter::NodePosList@s:vl.parsing.ParsingWriter" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Protected" Name="HandleChar" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::HandleChar" OverloadKey="::vl::parsing::ParsingWriter::HandleChar(wchar_t)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="c" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::HandleChar::c" OverloadKey="::vl::parsing::ParsingWriter::HandleChar(wchar_t)::c" Static="False">
                  <Type>
                    <RefTypeDecl Name="wchar_t" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ParsingWriter" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::ParsingWriter" OverloadKey="::vl::parsing::ParsingWriter::ParsingWriter(&amp; stream::TextWriter,Ptr&lt;IParsingPrintNodeRecorder&gt;,vint)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_writer" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::ParsingWriter::_writer" OverloadKey="::vl::parsing::ParsingWriter::ParsingWriter(&amp; stream::TextWriter,Ptr&lt;IParsingPrintNodeRecorder&gt;,vint)::_writer" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::stream::TextWriter" Name="TextWriter">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::stream::TextWriter@s:vl.stream.TextWriter" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::stream" Name="stream">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::stream@ns:vl.stream" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_recorder" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::ParsingWriter::_recorder" OverloadKey="::vl::parsing::ParsingWriter::ParsingWriter(&amp; stream::TextWriter,Ptr&lt;IParsingPrintNodeRecorder&gt;,vint)::_recorder" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::IParsingPrintNodeRecorder" Name="IParsingPrintNodeRecorder">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::IParsingPrintNodeRecorder@s:vl.parsing.IParsingPrintNodeRecorder" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_codeIndex" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::ParsingWriter::_codeIndex" OverloadKey="::vl::parsing::ParsingWriter::ParsingWriter(&amp; stream::TextWriter,Ptr&lt;IParsingPrintNodeRecorder&gt;,vint)::_codeIndex" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~ParsingWriter" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::~ParsingWriter" OverloadKey="::vl::parsing::ParsingWriter::~ParsingWriter()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="WriteChar" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::WriteChar" OverloadKey="::vl::parsing::ParsingWriter::WriteChar(wchar_t)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="c" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::WriteChar::c" OverloadKey="::vl::parsing::ParsingWriter::WriteChar(wchar_t)::c" Static="False">
                  <Type>
                    <RefTypeDecl Name="wchar_t" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="WriteString" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::WriteString" OverloadKey="::vl::parsing::ParsingWriter::WriteString(* const wchar_t,vint)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="string" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::WriteString::string" OverloadKey="::vl::parsing::ParsingWriter::WriteString(* const wchar_t,vint)::string" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl Name="wchar_t" />
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="charCount" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::WriteString::charCount" OverloadKey="::vl::parsing::ParsingWriter::WriteString(* const wchar_t,vint)::charCount" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="BeforePrint" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::BeforePrint" OverloadKey="::vl::parsing::ParsingWriter::BeforePrint(* ParsingTreeCustomBase)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::BeforePrint::node" OverloadKey="::vl::parsing::ParsingWriter::BeforePrint(* ParsingTreeCustomBase)::node" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeCustomBase" Name="ParsingTreeCustomBase">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::ParsingTreeCustomBase@s:vl.parsing.ParsingTreeCustomBase" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="AfterPrint" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::AfterPrint" OverloadKey="::vl::parsing::ParsingWriter::AfterPrint(* ParsingTreeCustomBase)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::ParsingWriter::AfterPrint::node" OverloadKey="::vl::parsing::ParsingWriter::AfterPrint(* ParsingTreeCustomBase)::node" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::ParsingTreeCustomBase" Name="ParsingTreeCustomBase">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::ParsingTreeCustomBase@s:vl.parsing.ParsingTreeCustomBase" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <SubTypeDecl ReferencingNameKey="::vl::stream::TextWriter" Name="TextWriter">
              <ReferencingOverloadKeys>
                <Key Value="::vl::stream::TextWriter@s:vl.stream.TextWriter" />
              </ReferencingOverloadKeys>
              <Parent>
                <RefTypeDecl ReferencingNameKey="::vl::stream" Name="stream">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::stream@ns:vl.stream" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Parent>
            </SubTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>