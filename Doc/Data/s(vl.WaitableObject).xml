<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="::vl::WaitableObject">
    <ClassDecl Access="Public" Name="WaitableObject" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject" OverloadKey="::vl::WaitableObject" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Base type of all synchronization objects.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <VarDecl Access="Private" Name="waitableData" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::waitableData" OverloadKey="::vl::WaitableObject::waitableData" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <SubTypeDecl Name="WaitableData">
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::threading_internal" Name="threading_internal">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::threading_internal" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Protected" Name="WaitableObject" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::WaitableObject" OverloadKey="::vl::WaitableObject::WaitableObject()" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="SetData" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::SetData" OverloadKey="::vl::WaitableObject::SetData(* threading_internal::WaitableData)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="data" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::SetData::data" OverloadKey="::vl::WaitableObject::SetData(* threading_internal::WaitableData)::data" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl Name="WaitableData">
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::threading_internal" Name="threading_internal">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::threading_internal" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsCreated" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::IsCreated" OverloadKey="::vl::WaitableObject::IsCreated()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Test if the object has already been created. Some of the synchronization objects should initialize itself after the constructor. This function is only available in Windows.&lt;/summary&gt;
  &lt;returns&gt;Returns true if the object has already been created.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Wait" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::Wait" OverloadKey="::vl::WaitableObject::Wait()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Wait for this object to signal.&lt;/summary&gt;
  &lt;returns&gt;Returns true if the object is signaled. Returns false if this operation failed.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="WaitForTime" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::WaitForTime" OverloadKey="::vl::WaitableObject::WaitForTime(vint)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Wait for this object to signal for a period of time. This function is only available in Windows.&lt;/summary&gt;
  &lt;returns&gt;Returns true if the object is signaled. Returns false if this operation failed, including time out.&lt;/returns&gt;
  &lt;param name="ms"&gt;Time in milliseconds.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="ms" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::WaitForTime::ms" OverloadKey="::vl::WaitableObject::WaitForTime(vint)::ms" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="WaitAll" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::WaitAll" OverloadKey="::vl::WaitableObject::WaitAll(* * WaitableObject,vint)" Virtual="Static" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Wait for multiple objects. This function is only available in Windows.&lt;/summary&gt;
  &lt;returns&gt;Returns true if all objects are signaled. Returns false if this operation failed.&lt;/returns&gt;
  &lt;param name="objects"&gt;A pointer to an array to &lt;links&gt;&lt;link cref="::vl::WaitableObject@s:vl.WaitableObject" /&gt;&lt;/links&gt; pointers.&lt;/param&gt;
  &lt;param name="count"&gt;The number of &lt;links&gt;&lt;link cref="::vl::WaitableObject@s:vl.WaitableObject" /&gt;&lt;/links&gt; objects in the array.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="objects" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::WaitAll::objects" OverloadKey="::vl::WaitableObject::WaitAll(* * WaitableObject,vint)::objects" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WaitableObject" Name="WaitableObject">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WaitableObject@s:vl.WaitableObject" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="count" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::WaitAll::count" OverloadKey="::vl::WaitableObject::WaitAll(* * WaitableObject,vint)::count" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="WaitAllForTime" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::WaitAllForTime" OverloadKey="::vl::WaitableObject::WaitAllForTime(* * WaitableObject,vint,vint)" Virtual="Static" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Wait for multiple objects for a period of time. This function is only available in Windows.&lt;/summary&gt;
  &lt;returns&gt;Returns true if all objects are signaled. Returns false if this operation failed, including time out.&lt;/returns&gt;
  &lt;param name="objects"&gt;A pointer to an array to &lt;links&gt;&lt;link cref="::vl::WaitableObject@s:vl.WaitableObject" /&gt;&lt;/links&gt; pointers.&lt;/param&gt;
  &lt;param name="count"&gt;The number of &lt;links&gt;&lt;link cref="::vl::WaitableObject@s:vl.WaitableObject" /&gt;&lt;/links&gt; objects in the array.&lt;/param&gt;
  &lt;param name="ms"&gt;Time in milliseconds.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="objects" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::WaitAllForTime::objects" OverloadKey="::vl::WaitableObject::WaitAllForTime(* * WaitableObject,vint,vint)::objects" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WaitableObject" Name="WaitableObject">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WaitableObject@s:vl.WaitableObject" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="count" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::WaitAllForTime::count" OverloadKey="::vl::WaitableObject::WaitAllForTime(* * WaitableObject,vint,vint)::count" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="ms" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::WaitAllForTime::ms" OverloadKey="::vl::WaitableObject::WaitAllForTime(* * WaitableObject,vint,vint)::ms" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="WaitAny" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::WaitAny" OverloadKey="::vl::WaitableObject::WaitAny(* * WaitableObject,vint,* bool)" Virtual="Static" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Wait for one of the objects. This function is only available in Windows.&lt;/summary&gt;
  &lt;returns&gt;Returns the index of the first signaled or abandoned object, according to the "abandoned" parameter. Returns -1 if this operation failed.&lt;/returns&gt;
  &lt;param name="objects"&gt;A pointer to an array to &lt;links&gt;&lt;link cref="::vl::WaitableObject@s:vl.WaitableObject" /&gt;&lt;/links&gt; pointers.&lt;/param&gt;
  &lt;param name="count"&gt;The number of &lt;links&gt;&lt;link cref="::vl::WaitableObject@s:vl.WaitableObject" /&gt;&lt;/links&gt; objects in the array.&lt;/param&gt;
  &lt;param name="abandoned"&gt;Returns true if the waiting is canceled by an abandoned object. An abandoned object is caused by it's owner thread existing without releasing it.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="objects" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::WaitAny::objects" OverloadKey="::vl::WaitableObject::WaitAny(* * WaitableObject,vint,* bool)::objects" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WaitableObject" Name="WaitableObject">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WaitableObject@s:vl.WaitableObject" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="count" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::WaitAny::count" OverloadKey="::vl::WaitableObject::WaitAny(* * WaitableObject,vint,* bool)::count" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="abandoned" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::WaitAny::abandoned" OverloadKey="::vl::WaitableObject::WaitAny(* * WaitableObject,vint,* bool)::abandoned" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl Name="bool" />
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="WaitAnyForTime" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::WaitAnyForTime" OverloadKey="::vl::WaitableObject::WaitAnyForTime(* * WaitableObject,vint,vint,* bool)" Virtual="Static" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Wait for one of the objects for a period of time. This function is only available in Windows.&lt;/summary&gt;
  &lt;returns&gt;Returns the index of the first signaled or abandoned object, according to the "abandoned" parameter. Returns -1 if this operation failed, including time out.&lt;/returns&gt;
  &lt;param name="objects"&gt;A pointer to an array to &lt;links&gt;&lt;link cref="::vl::WaitableObject@s:vl.WaitableObject" /&gt;&lt;/links&gt; pointers.&lt;/param&gt;
  &lt;param name="count"&gt;The number of &lt;links&gt;&lt;link cref="::vl::WaitableObject@s:vl.WaitableObject" /&gt;&lt;/links&gt; objects in the array.&lt;/param&gt;
  &lt;param name="ms"&gt;Time in milliseconds.&lt;/param&gt;
  &lt;param name="abandoned"&gt;Returns true if the waiting is canceled by an abandoned object. An abandoned object is caused by it's owner thread existing without releasing it.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="objects" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::WaitAnyForTime::objects" OverloadKey="::vl::WaitableObject::WaitAnyForTime(* * WaitableObject,vint,vint,* bool)::objects" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WaitableObject" Name="WaitableObject">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WaitableObject@s:vl.WaitableObject" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="count" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::WaitAnyForTime::count" OverloadKey="::vl::WaitableObject::WaitAnyForTime(* * WaitableObject,vint,vint,* bool)::count" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="ms" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::WaitAnyForTime::ms" OverloadKey="::vl::WaitableObject::WaitAnyForTime(* * WaitableObject,vint,vint,* bool)::ms" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="abandoned" Tags="x64, Windows;x86, Windows" NameKey="::vl::WaitableObject::WaitAnyForTime::abandoned" OverloadKey="::vl::WaitableObject::WaitAnyForTime(* * WaitableObject,vint,vint,* bool)::abandoned" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl Name="bool" />
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::NotCopyable" Name="NotCopyable">
              <ReferencingOverloadKeys>
                <Key Value="::vl::NotCopyable@s:vl.NotCopyable" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>