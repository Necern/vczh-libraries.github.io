<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="::vl::regex_internal::EpsilonNfaToNfa(Automaton::Ref,* function (* Transition) : bool,&amp; collections::Dictionary&lt;* State, * State&gt;)">
    <FuncDecl Access="Public" Name="EpsilonNfaToNfa" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::EpsilonNfaToNfa" OverloadKey="::vl::regex_internal::EpsilonNfaToNfa(Automaton::Ref,* function (* Transition) : bool,&amp; collections::Dictionary&lt;* State, * State&gt;)" Virtual="Normal" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <SubTypeDecl ReferencingNameKey="::vl::regex_internal::Automaton::Ref" Name="Ref">
              <ReferencingOverloadKeys>
                <Key Value="::vl::regex_internal::Automaton::Ref@s:vl.regex_internal.Automaton" />
              </ReferencingOverloadKeys>
              <Parent>
                <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Automaton" Name="Automaton">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex_internal::Automaton@s:vl.regex_internal.Automaton" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Parent>
            </SubTypeDecl>
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::EpsilonNfaToNfa::source" OverloadKey="::vl::regex_internal::EpsilonNfaToNfa(Automaton::Ref,* function (* Transition) : bool,&amp; collections::Dictionary&lt;* State, * State&gt;)::source" Static="False">
              <Type>
                <SubTypeDecl ReferencingNameKey="::vl::regex_internal::Automaton::Ref" Name="Ref">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex_internal::Automaton::Ref@s:vl.regex_internal.Automaton" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Automaton" Name="Automaton">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::Automaton@s:vl.regex_internal.Automaton" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="epsilonChecker" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::EpsilonNfaToNfa::epsilonChecker" OverloadKey="::vl::regex_internal::EpsilonNfaToNfa(Automaton::Ref,* function (* Transition) : bool,&amp; collections::Dictionary&lt;* State, * State&gt;)::epsilonChecker" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <RefTypeDecl Name="bool" />
                      </ReturnType>
                      <Parameters>
                        <VarDecl Access="Public" Static="False">
                          <Type>
                            <DecorateTypeDecl Decoration="Pointer">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Transition" Name="Transition">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::regex_internal::Transition@s:vl.regex_internal.Transition" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Type>
                        </VarDecl>
                      </Parameters>
                    </FunctionTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="nfaStateMap" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::EpsilonNfaToNfa::nfaStateMap" OverloadKey="::vl::regex_internal::EpsilonNfaToNfa(Automaton::Ref,* function (* Transition) : bool,&amp; collections::Dictionary&lt;* State, * State&gt;)::nfaStateMap" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <GenericTypeDecl>
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::collections::Dictionary" Name="Dictionary">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::collections::Dictionary`4@s:vl.collections.Dictionary`4" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections@ns:vl.collections" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                      <TypeArguments>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::State" Name="State">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::State@s:vl.regex_internal.State" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
</OverloadingSymbols>