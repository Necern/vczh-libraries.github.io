<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.Combine`3(Func{C},Func{F1},Func{F2})">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Combine two functions with a converter function. The two functions to combine should have the same argument types. The converter function will use the return values of the two function to calculate the final value.&lt;/summary&gt;
  &lt;typeparam name="F1"&gt;Type of the first function.&lt;/typeparam&gt;
  &lt;typeparam name="F2"&gt;Type of the second function.&lt;/typeparam&gt;
  &lt;typeparam name="C"&gt;Type of the converter function.&lt;/typeparam&gt;
  &lt;returns&gt;A new function whose argument list are the same of the two functions to provide. Calling this function will call function1, function2 and converter in order to calculate the final value.&lt;/returns&gt;
  &lt;param name="converter"&gt;The converter function.&lt;/param&gt;
  &lt;param name="function1"&gt;The first function.&lt;/param&gt;
  &lt;param name="function2"&gt;The second function.&lt;/param&gt;
&lt;/Document&gt;</Document>
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="F1" Tags="x86, Windows" NameKey="::vl::F1" OverloadKey="::vl::Combine`3(Func&lt;C&gt;,Func&lt;F1&gt;,Func&lt;F2&gt;)::F1" />
        <TypeParameterDecl Access="Public" Name="F2" Tags="x86, Windows" NameKey="::vl::F2" OverloadKey="::vl::Combine`3(Func&lt;C&gt;,Func&lt;F1&gt;,Func&lt;F2&gt;)::F2" />
        <TypeParameterDecl Access="Public" Name="C" Tags="x86, Windows" NameKey="::vl::C" OverloadKey="::vl::Combine`3(Func&lt;C&gt;,Func&lt;F1&gt;,Func&lt;F2&gt;)::C" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="Combine" Tags="x64, Windows;x86, Windows" NameKey="::vl::Combine" OverloadKey="::vl::Combine`3(Func&lt;C&gt;,Func&lt;F1&gt;,Func&lt;F2&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Func`1@s:vl.Func`1" />
                        <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <SubTypeDecl ReferencingNameKey="::vl::function_combining::Combining::FinalFunctionType" Name="FinalFunctionType">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::function_combining::Combining`4&lt;function (... TArgs) : R1,function (... TArgs) : R2,function (R1, R2) : R&gt;::FinalFunctionType@s:vl.function_combining.Combining`4{function (... TArgs) # R1,function (... TArgs) # R2,function (R1, R2) # R}" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <GenericTypeDecl>
                          <Element>
                            <SubTypeDecl ReferencingNameKey="::vl::function_combining::Combining" Name="Combining">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::function_combining::Combining`3@s:vl.function_combining.Combining`3" />
                                <Key Value="::vl::function_combining::Combining`4&lt;function (... TArgs) : R1,function (... TArgs) : R2,function (R1, R2) : R&gt;@s:vl.function_combining.Combining`4{function (... TArgs) # R1,function (... TArgs) # R2,function (R1, R2) # R}" />
                              </ReferencingOverloadKeys>
                              <Parent>
                                <RefTypeDecl ReferencingNameKey="::vl::function_combining" Name="function_combining">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::function_combining@ns:vl.function_combining" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Parent>
                            </SubTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::F1" Name="F1">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Combine`3(Func&lt;C&gt;,Func&lt;F1&gt;,Func&lt;F2&gt;)::F1@s:vl.Combine`3(Func{C},Func{F1},Func{F2})" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                            <RefTypeDecl ReferencingNameKey="::vl::F2" Name="F2">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Combine`3(Func&lt;C&gt;,Func&lt;F1&gt;,Func&lt;F2&gt;)::F2@s:vl.Combine`3(Func{C},Func{F1},Func{F2})" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                            <RefTypeDecl ReferencingNameKey="::vl::C" Name="C">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Combine`3(Func&lt;C&gt;,Func&lt;F1&gt;,Func&lt;F2&gt;)::C@s:vl.Combine`3(Func{C},Func{F1},Func{F2})" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="converter" Tags="x64, Windows;x86, Windows" NameKey="::vl::Combine::converter" OverloadKey="::vl::Combine`3(Func&lt;C&gt;,Func&lt;F1&gt;,Func&lt;F2&gt;)::converter" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Func`1@s:vl.Func`1" />
                            <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::C" Name="C">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Combine`3(Func&lt;C&gt;,Func&lt;F1&gt;,Func&lt;F2&gt;)::C@s:vl.Combine`3(Func{C},Func{F1},Func{F2})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="function1" Tags="x64, Windows;x86, Windows" NameKey="::vl::Combine::function1" OverloadKey="::vl::Combine`3(Func&lt;C&gt;,Func&lt;F1&gt;,Func&lt;F2&gt;)::function1" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Func`1@s:vl.Func`1" />
                            <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::F1" Name="F1">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Combine`3(Func&lt;C&gt;,Func&lt;F1&gt;,Func&lt;F2&gt;)::F1@s:vl.Combine`3(Func{C},Func{F1},Func{F2})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="function2" Tags="x64, Windows;x86, Windows" NameKey="::vl::Combine::function2" OverloadKey="::vl::Combine`3(Func&lt;C&gt;,Func&lt;F1&gt;,Func&lt;F2&gt;)::function2" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Func`1@s:vl.Func`1" />
                            <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::F2" Name="F2">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Combine`3(Func&lt;C&gt;,Func&lt;F1&gt;,Func&lt;F2&gt;)::F2@s:vl.Combine`3(Func{C},Func{F1},Func{F2})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>