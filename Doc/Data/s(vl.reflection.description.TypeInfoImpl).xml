<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.TypeInfoImpl">
    <ClassDecl Access="Public" Name="TypeInfoImpl" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeInfoImpl" OverloadKey="::vl::reflection::description::TypeInfoImpl" ClassType="Class">
      <Children>
        <VarDecl Access="Protected" Name="decorator" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeInfoImpl::decorator" OverloadKey="::vl::reflection::description::TypeInfoImpl::decorator" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeInfo::Decorator" Name="Decorator">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::ITypeInfo::Decorator@s:vl.reflection.description.ITypeInfo" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="typeDescriptor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeInfoImpl::typeDescriptor" OverloadKey="::vl::reflection::description::TypeInfoImpl::typeDescriptor" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="genericArguments" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeInfoImpl::genericArguments" OverloadKey="::vl::reflection::description::TypeInfoImpl::genericArguments" Static="False">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeInfo" Name="ITypeInfo">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ITypeInfo@s:vl.reflection.description.ITypeInfo" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="elementType" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeInfoImpl::elementType" OverloadKey="::vl::reflection::description::TypeInfoImpl::elementType" Static="False">
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeInfo" Name="ITypeInfo">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::ITypeInfo@s:vl.reflection.description.ITypeInfo" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="TypeInfoImpl" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeInfoImpl::TypeInfoImpl" OverloadKey="::vl::reflection::description::TypeInfoImpl::TypeInfoImpl(Decorator)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_decorator" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeInfoImpl::TypeInfoImpl::_decorator" OverloadKey="::vl::reflection::description::TypeInfoImpl::TypeInfoImpl(Decorator)::_decorator" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeInfo::Decorator" Name="Decorator">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ITypeInfo::Decorator@s:vl.reflection.description.ITypeInfo" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~TypeInfoImpl" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeInfoImpl::~TypeInfoImpl" OverloadKey="::vl::reflection::description::TypeInfoImpl::~TypeInfoImpl()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetDecorator" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeInfoImpl::GetDecorator" OverloadKey="::vl::reflection::description::TypeInfoImpl::GetDecorator()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeInfo::Decorator" Name="Decorator">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::ITypeInfo::Decorator@s:vl.reflection.description.ITypeInfo" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetElementType" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeInfoImpl::GetElementType" OverloadKey="::vl::reflection::description::TypeInfoImpl::GetElementType()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeInfo" Name="ITypeInfo">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ITypeInfo@s:vl.reflection.description.ITypeInfo" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetTypeDescriptor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeInfoImpl::GetTypeDescriptor" OverloadKey="::vl::reflection::description::TypeInfoImpl::GetTypeDescriptor()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetGenericArgumentCount" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeInfoImpl::GetGenericArgumentCount" OverloadKey="::vl::reflection::description::TypeInfoImpl::GetGenericArgumentCount()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetGenericArgument" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeInfoImpl::GetGenericArgument" OverloadKey="::vl::reflection::description::TypeInfoImpl::GetGenericArgument(vint)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeInfo" Name="ITypeInfo">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ITypeInfo@s:vl.reflection.description.ITypeInfo" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeInfoImpl::GetGenericArgument::index" OverloadKey="::vl::reflection::description::TypeInfoImpl::GetGenericArgument(vint)::index" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetTypeFriendlyName" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeInfoImpl::GetTypeFriendlyName" OverloadKey="::vl::reflection::description::TypeInfoImpl::GetTypeFriendlyName()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::WString@s:vl.WString" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetTypeDescriptor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeInfoImpl::SetTypeDescriptor" OverloadKey="::vl::reflection::description::TypeInfoImpl::SetTypeDescriptor(* ITypeDescriptor)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeInfoImpl::SetTypeDescriptor::value" OverloadKey="::vl::reflection::description::TypeInfoImpl::SetTypeDescriptor(* ITypeDescriptor)::value" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="AddGenericArgument" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeInfoImpl::AddGenericArgument" OverloadKey="::vl::reflection::description::TypeInfoImpl::AddGenericArgument(Ptr&lt;ITypeInfo&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeInfoImpl::AddGenericArgument::value" OverloadKey="::vl::reflection::description::TypeInfoImpl::AddGenericArgument(Ptr&lt;ITypeInfo&gt;)::value" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeInfo" Name="ITypeInfo">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::ITypeInfo@s:vl.reflection.description.ITypeInfo" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetElementType" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeInfoImpl::SetElementType" OverloadKey="::vl::reflection::description::TypeInfoImpl::SetElementType(Ptr&lt;ITypeInfo&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeInfoImpl::SetElementType::value" OverloadKey="::vl::reflection::description::TypeInfoImpl::SetElementType(Ptr&lt;ITypeInfo&gt;)::value" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeInfo" Name="ITypeInfo">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::ITypeInfo@s:vl.reflection.description.ITypeInfo" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeInfo" Name="ITypeInfo">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::ITypeInfo@s:vl.reflection.description.ITypeInfo" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>