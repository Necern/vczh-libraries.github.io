<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.ConditionVariable">
    <ClassDecl Access="Public" Name="ConditionVariable" Tags="x64, Windows;x86, Windows" NameKey="::vl::ConditionVariable" OverloadKey="::vl::ConditionVariable" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Conditional variable.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <VarDecl Access="Private" Name="internalData" Tags="x64, Windows;x86, Windows" NameKey="::vl::ConditionVariable::internalData" OverloadKey="::vl::ConditionVariable::internalData" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <SubTypeDecl Name="ConditionVariableData">
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::threading_internal" Name="threading_internal">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::threading_internal" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="ConditionVariable" Tags="x64, Windows;x86, Windows" NameKey="::vl::ConditionVariable::ConditionVariable" OverloadKey="::vl::ConditionVariable::ConditionVariable()" Virtual="Normal" Function="Constructor">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Create a conditional variable.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~ConditionVariable" Tags="x64, Windows;x86, Windows" NameKey="::vl::ConditionVariable::~ConditionVariable" OverloadKey="::vl::ConditionVariable::~ConditionVariable()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SleepWith" Tags="x64, Windows;x86, Windows" NameKey="::vl::ConditionVariable::SleepWith" OverloadKey="::vl::ConditionVariable::SleepWith(&amp; CriticalSection)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Bind a conditional variable with a owned critical section and release it. When the function returns, the condition variable is activated, and the current thread owned the critical section again.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="cs"&gt;The critical section.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="cs" Tags="x64, Windows;x86, Windows" NameKey="::vl::ConditionVariable::SleepWith::cs" OverloadKey="::vl::ConditionVariable::SleepWith(&amp; CriticalSection)::cs" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::CriticalSection" Name="CriticalSection">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::CriticalSection@s:vl.CriticalSection" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SleepWithForTime" Tags="x64, Windows;x86, Windows" NameKey="::vl::ConditionVariable::SleepWithForTime" OverloadKey="::vl::ConditionVariable::SleepWithForTime(&amp; CriticalSection,vint)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Bind a conditional variable with a owned critical section and release it for a period of time. When the function returns, the condition variable is activated or it is time out, and the current thread owned the critical section again. This function is only available in Windows.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="cs"&gt;The critical section.&lt;/param&gt;
  &lt;param name="ms"&gt;Time in milliseconds.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="cs" Tags="x64, Windows;x86, Windows" NameKey="::vl::ConditionVariable::SleepWithForTime::cs" OverloadKey="::vl::ConditionVariable::SleepWithForTime(&amp; CriticalSection,vint)::cs" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::CriticalSection" Name="CriticalSection">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::CriticalSection@s:vl.CriticalSection" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="ms" Tags="x64, Windows;x86, Windows" NameKey="::vl::ConditionVariable::SleepWithForTime::ms" OverloadKey="::vl::ConditionVariable::SleepWithForTime(&amp; CriticalSection,vint)::ms" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SleepWithReader" Tags="x64, Windows;x86, Windows" NameKey="::vl::ConditionVariable::SleepWithReader" OverloadKey="::vl::ConditionVariable::SleepWithReader(&amp; ReaderWriterLock)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Bind a conditional variable with a owned reader lock and release it. When the function returns, the condition variable is activated, and the current thread owned the reader lock again. This function is only available in Windows.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="lock"&gt;The reader lock.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="lock" Tags="x64, Windows;x86, Windows" NameKey="::vl::ConditionVariable::SleepWithReader::lock" OverloadKey="::vl::ConditionVariable::SleepWithReader(&amp; ReaderWriterLock)::lock" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::ReaderWriterLock" Name="ReaderWriterLock">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::ReaderWriterLock@s:vl.ReaderWriterLock" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SleepWithReaderForTime" Tags="x64, Windows;x86, Windows" NameKey="::vl::ConditionVariable::SleepWithReaderForTime" OverloadKey="::vl::ConditionVariable::SleepWithReaderForTime(&amp; ReaderWriterLock,vint)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Bind a conditional variable with a owned reader lock and release it for a period of time. When the function returns, the condition variable is activated or it is time out, and the current thread owned the reader lock again. This function is only available in Windows.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="lock"&gt;The reader lock.&lt;/param&gt;
  &lt;param name="ms"&gt;Time in milliseconds.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="lock" Tags="x64, Windows;x86, Windows" NameKey="::vl::ConditionVariable::SleepWithReaderForTime::lock" OverloadKey="::vl::ConditionVariable::SleepWithReaderForTime(&amp; ReaderWriterLock,vint)::lock" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::ReaderWriterLock" Name="ReaderWriterLock">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::ReaderWriterLock@s:vl.ReaderWriterLock" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="ms" Tags="x64, Windows;x86, Windows" NameKey="::vl::ConditionVariable::SleepWithReaderForTime::ms" OverloadKey="::vl::ConditionVariable::SleepWithReaderForTime(&amp; ReaderWriterLock,vint)::ms" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SleepWithWriter" Tags="x64, Windows;x86, Windows" NameKey="::vl::ConditionVariable::SleepWithWriter" OverloadKey="::vl::ConditionVariable::SleepWithWriter(&amp; ReaderWriterLock)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Bind a conditional variable with a owned writer lock and release it. When the function returns, the condition variable is activated, and the current thread owned the writer lock again. This function is only available in Windows.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="lock"&gt;The writer lock.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="lock" Tags="x64, Windows;x86, Windows" NameKey="::vl::ConditionVariable::SleepWithWriter::lock" OverloadKey="::vl::ConditionVariable::SleepWithWriter(&amp; ReaderWriterLock)::lock" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::ReaderWriterLock" Name="ReaderWriterLock">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::ReaderWriterLock@s:vl.ReaderWriterLock" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SleepWithWriterForTime" Tags="x64, Windows;x86, Windows" NameKey="::vl::ConditionVariable::SleepWithWriterForTime" OverloadKey="::vl::ConditionVariable::SleepWithWriterForTime(&amp; ReaderWriterLock,vint)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Bind a conditional variable with a owned writer lock and release it for a period of time. When the function returns, the condition variable is activated or it is time out, and the current thread owned the writer lock again. This function is only available in Windows.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="lock"&gt;The writer lock.&lt;/param&gt;
  &lt;param name="ms"&gt;Time in milliseconds.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="lock" Tags="x64, Windows;x86, Windows" NameKey="::vl::ConditionVariable::SleepWithWriterForTime::lock" OverloadKey="::vl::ConditionVariable::SleepWithWriterForTime(&amp; ReaderWriterLock,vint)::lock" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::ReaderWriterLock" Name="ReaderWriterLock">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::ReaderWriterLock@s:vl.ReaderWriterLock" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="ms" Tags="x64, Windows;x86, Windows" NameKey="::vl::ConditionVariable::SleepWithWriterForTime::ms" OverloadKey="::vl::ConditionVariable::SleepWithWriterForTime(&amp; ReaderWriterLock,vint)::ms" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="WakeOnePending" Tags="x64, Windows;x86, Windows" NameKey="::vl::ConditionVariable::WakeOnePending" OverloadKey="::vl::ConditionVariable::WakeOnePending()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Wake one thread that pending on this condition variable.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="WakeAllPendings" Tags="x64, Windows;x86, Windows" NameKey="::vl::ConditionVariable::WakeAllPendings" OverloadKey="::vl::ConditionVariable::WakeAllPendings()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Wake all thread that pending on this condition variable.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::NotCopyable" Name="NotCopyable">
              <ReferencingOverloadKeys>
                <Key Value="::vl::NotCopyable@s:vl.NotCopyable" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>