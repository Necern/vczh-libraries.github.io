<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.ThreadVariable`1">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Thread local variable. This type can only be used to define global variables. Different threads can store different values to and obtain differnt values from a thread local variable.&lt;/summary&gt;
  &lt;typeparam name="T"&gt;Type of the storage.&lt;/typeparam&gt;
&lt;/Document&gt;</Document>
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::ThreadVariable`1::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <ClassDecl Access="Public" Name="ThreadVariable" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable" OverloadKey="::vl::ThreadVariable`1" ClassType="Class">
          <Children>
            <VarDecl Access="Protected" Name="storage" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::storage" OverloadKey="::vl::ThreadVariable`1::storage" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::ThreadLocalStorage" Name="ThreadLocalStorage">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::ThreadLocalStorage@s:vl.ThreadLocalStorage" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
            <FuncDecl Access="Protected" Name="Destructor" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::Destructor" OverloadKey="::vl::ThreadVariable`1::Destructor(* void)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="data" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::Destructor::data" OverloadKey="::vl::ThreadVariable`1::Destructor(* void)::data" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl Name="void" />
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="ThreadVariable" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::ThreadVariable" OverloadKey="::vl::ThreadVariable`1::ThreadVariable()" Virtual="Normal" Function="Constructor">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Create a thread local variable.&lt;/summary&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="~ThreadVariable" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::~ThreadVariable" OverloadKey="::vl::ThreadVariable`1::~ThreadVariable()" Virtual="Normal" Function="Destructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="HasData" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::HasData" OverloadKey="::vl::ThreadVariable`1::HasData()" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Test if the storage has data.&lt;/summary&gt;
  &lt;returns&gt;Returns true if the storage has data.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Clear" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::Clear" OverloadKey="::vl::ThreadVariable`1::Clear()" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Remove the data from this storage.&lt;/summary&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Get" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::Get" OverloadKey="::vl::ThreadVariable`1::Get()" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Get the stored data.&lt;/summary&gt;
  &lt;returns&gt;The stored ata.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::ThreadVariable`1::T@s:vl.ThreadVariable`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Set" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::Set" OverloadKey="::vl::ThreadVariable`1::Set(&amp; const T)" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Set data to this storage.&lt;/summary&gt;
  &lt;param name="value"&gt;The data to set.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::Set::value" OverloadKey="::vl::ThreadVariable`1::Set(&amp; const T)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::ThreadVariable`1::T@s:vl.ThreadVariable`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Object@s:vl.Object" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
            <BaseTypeDecl Access="Private" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::NotCopyable" Name="NotCopyable">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::NotCopyable@s:vl.NotCopyable" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.ThreadVariable`1{^ T}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::ThreadVariable`1&lt;* T&gt;::T" />
      </TypeParameters>
      <Specialization>
        <DecorateTypeDecl Decoration="Pointer">
          <Element>
            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
              <ReferencingOverloadKeys>
                <Key Value="::vl::ThreadVariable`1&lt;* T&gt;::T@s:vl.ThreadVariable`1{^ T}" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Element>
        </DecorateTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="ThreadVariable" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable" OverloadKey="::vl::ThreadVariable`1&lt;* T&gt;" ClassType="Class">
          <Children>
            <VarDecl Access="Protected" Name="storage" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::storage" OverloadKey="::vl::ThreadVariable`1&lt;* T&gt;::storage" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::ThreadLocalStorage" Name="ThreadLocalStorage">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::ThreadLocalStorage@s:vl.ThreadLocalStorage" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
            <FuncDecl Access="Public" Name="ThreadVariable" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::ThreadVariable" OverloadKey="::vl::ThreadVariable`1&lt;* T&gt;::ThreadVariable()" Virtual="Normal" Function="Constructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="~ThreadVariable" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::~ThreadVariable" OverloadKey="::vl::ThreadVariable`1&lt;* T&gt;::~ThreadVariable()" Virtual="Normal" Function="Destructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="HasData" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::HasData" OverloadKey="::vl::ThreadVariable`1&lt;* T&gt;::HasData()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Clear" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::Clear" OverloadKey="::vl::ThreadVariable`1&lt;* T&gt;::Clear()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Get" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::Get" OverloadKey="::vl::ThreadVariable`1&lt;* T&gt;::Get()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::ThreadVariable`1&lt;* T&gt;::T@s:vl.ThreadVariable`1{^ T}" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Set" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::Set" OverloadKey="::vl::ThreadVariable`1&lt;* T&gt;::Set(* T)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::Set::value" OverloadKey="::vl::ThreadVariable`1&lt;* T&gt;::Set(* T)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::ThreadVariable`1&lt;* T&gt;::T@s:vl.ThreadVariable`1{^ T}" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Object@s:vl.Object" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
            <BaseTypeDecl Access="Private" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::NotCopyable" Name="NotCopyable">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::NotCopyable@s:vl.NotCopyable" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>