<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="::vl::RequiresConvertable`2">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="TFrom" Tags="x86, Windows" NameKey="::vl::TFrom" OverloadKey="::vl::RequiresConvertable`2::TFrom" />
        <TypeParameterDecl Access="Public" Name="TTo" Tags="x86, Windows" NameKey="::vl::TTo" OverloadKey="::vl::RequiresConvertable`2::TTo" />
      </TypeParameters>
      <Specialization />
      <Element>
        <ClassDecl Access="Public" Name="RequiresConvertable" Tags="x64, Windows;x86, Windows" NameKey="::vl::RequiresConvertable" OverloadKey="::vl::RequiresConvertable`2" ClassType="Struct">
          <Children>
            <FuncDecl Access="Public" Name="Test" Tags="x64, Windows;x86, Windows" NameKey="::vl::RequiresConvertable::Test" OverloadKey="::vl::RequiresConvertable`2::Test(* TTo)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::YesType" Name="YesType">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::YesType@s:vl.YesType" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::RequiresConvertable::Test::value" OverloadKey="::vl::RequiresConvertable`2::Test(* TTo)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::TTo" Name="TTo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::RequiresConvertable`2::TTo@s:vl.RequiresConvertable`2" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Test" Tags="x64, Windows;x86, Windows" NameKey="::vl::RequiresConvertable::Test" OverloadKey="::vl::RequiresConvertable`2::Test(* void)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::NoType" Name="NoType">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::NoType@s:vl.NoType" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::RequiresConvertable::Test::value" OverloadKey="::vl::RequiresConvertable`2::Test(* void)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl Name="void" />
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <TypedefDecl Access="Public" Name="YesNoType" Tags="x64, Windows;x86, Windows" NameKey="::vl::RequiresConvertable::YesNoType" OverloadKey="::vl::RequiresConvertable`2::YesNoType">
              <Type>
                <DeclTypeDecl Expression="Test ( ( TFrom * ) 0 )" />
              </Type>
            </TypedefDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>