<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.stream.IDecoder">
    <ClassDecl Access="Public" Name="IDecoder" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IDecoder" OverloadKey="::vl::stream::IDecoder" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Decoder interface. This interface defines a readable transformation from one stream to another stream. You can create a &lt;links&gt;&lt;link cref="::vl::stream::DecoderStream@s:vl.stream.DecoderStream" /&gt;&lt;/links&gt; after you have an decoder.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <FuncDecl Access="Public" Name="Setup" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IDecoder::Setup" OverloadKey="::vl::stream::IDecoder::Setup(* IStream)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Set a target readable stream. The &lt;links&gt;&lt;link cref="::vl::stream::IDecoder::Read(* void,vint)@s:vl.stream.IDecoder" /&gt;&lt;/links&gt; function will read from this tream and transform the content.&lt;/summary&gt;
  &lt;param name="_stream"&gt;The target readable stream.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_stream" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IDecoder::Setup::_stream" OverloadKey="::vl::stream::IDecoder::Setup(* IStream)::_stream" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::stream::IStream" Name="IStream">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::stream::IStream@s:vl.stream.IStream" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Close" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IDecoder::Close" OverloadKey="::vl::stream::IDecoder::Close()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Stop the transformation.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Read" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IDecoder::Read" OverloadKey="::vl::stream::IDecoder::Read(* void,vint)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Read from the target stream and transform the content.&lt;/summary&gt;
  &lt;returns&gt;Returns the actual size of the content after transforming that is read.&lt;/returns&gt;
  &lt;param name="_buffer"&gt;A buffer to store the content.&lt;/param&gt;
  &lt;param name="_size"&gt;The size of the content that is expected to read.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_buffer" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IDecoder::Read::_buffer" OverloadKey="::vl::stream::IDecoder::Read(* void,vint)::_buffer" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl Name="void" />
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_size" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IDecoder::Read::_size" OverloadKey="::vl::stream::IDecoder::Read(* void,vint)::_size" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Interface" Name="Interface">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Interface@s:vl.Interface" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>