<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="::vl::SpinLock">
    <ClassDecl Access="Public" Name="SpinLock" Tags="x64, Windows;x86, Windows" NameKey="::vl::SpinLock" OverloadKey="::vl::SpinLock" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;
Spin lock. It is similar to mutex.
The macro "SPIN_LOCK" is encouraged to use instead of calling &lt;links&gt;&lt;link cref="::vl::SpinLock::Enter()@s:vl.SpinLock" /&gt;&lt;/links&gt; and &lt;links&gt;&lt;link cref="::vl::SpinLock::Leave()@s:vl.SpinLock" /&gt;&lt;/links&gt; like this:
SPIN_LOCK(yourLock)
{
	&amp;lt;code&amp;gt;
}
&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <VarDecl Access="Protected" Name="token" Tags="x64, Windows;x86, Windows" NameKey="::vl::SpinLock::token" OverloadKey="::vl::SpinLock::token" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Volatile">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::LockedInt" Name="LockedInt">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::LockedInt@s:vl.LockedInt" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="SpinLock" Tags="x64, Windows;x86, Windows" NameKey="::vl::SpinLock::SpinLock" OverloadKey="::vl::SpinLock::SpinLock()" Virtual="Normal" Function="Constructor">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Create a spin lock.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~SpinLock" Tags="x64, Windows;x86, Windows" NameKey="::vl::SpinLock::~SpinLock" OverloadKey="::vl::SpinLock::~SpinLock()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="TryEnter" Tags="x64, Windows;x86, Windows" NameKey="::vl::SpinLock::TryEnter" OverloadKey="::vl::SpinLock::TryEnter()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Try enter a spin lock. This function will return immediately.&lt;/summary&gt;
  &lt;returns&gt;Returns true if the current thread owned the spin lock.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Enter" Tags="x64, Windows;x86, Windows" NameKey="::vl::SpinLock::Enter" OverloadKey="::vl::SpinLock::Enter()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Enter a spin lock.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Leave" Tags="x64, Windows;x86, Windows" NameKey="::vl::SpinLock::Leave" OverloadKey="::vl::SpinLock::Leave()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Leave a spin lock.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <ClassDecl Access="Public" Name="Scope" Tags="x64, Windows;x86, Windows" NameKey="::vl::SpinLock::Scope" OverloadKey="::vl::SpinLock::Scope" ClassType="Class">
          <Children>
            <VarDecl Access="Private" Name="spinLock" Tags="x64, Windows;x86, Windows" NameKey="::vl::SpinLock::Scope::spinLock" OverloadKey="::vl::SpinLock::Scope::spinLock" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::SpinLock" Name="SpinLock">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::SpinLock@s:vl.SpinLock" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <FuncDecl Access="Public" Name="Scope" Tags="x64, Windows;x86, Windows" NameKey="::vl::SpinLock::Scope::Scope" OverloadKey="::vl::SpinLock::Scope::Scope(&amp; SpinLock)" Virtual="Normal" Function="Constructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="_spinLock" Tags="x64, Windows;x86, Windows" NameKey="::vl::SpinLock::Scope::Scope::_spinLock" OverloadKey="::vl::SpinLock::Scope::Scope(&amp; SpinLock)::_spinLock" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::SpinLock" Name="SpinLock">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::SpinLock@s:vl.SpinLock" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="~Scope" Tags="x64, Windows;x86, Windows" NameKey="::vl::SpinLock::Scope::~Scope" OverloadKey="::vl::SpinLock::Scope::~Scope()" Virtual="Normal" Function="Destructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Object@s:vl.Object" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::NotCopyable" Name="NotCopyable">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::NotCopyable@s:vl.NotCopyable" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::NotCopyable" Name="NotCopyable">
              <ReferencingOverloadKeys>
                <Key Value="::vl::NotCopyable@s:vl.NotCopyable" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>