<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="::vl::collections::FromIterator`1">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::collections::T" OverloadKey="::vl::collections::FromIterator`1::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <ClassDecl Access="Public" Name="FromIterator" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::FromIterator" OverloadKey="::vl::collections::FromIterator`1" ClassType="Class">
          <Children>
            <TemplateDecl Access="Public" Tags="x86, Windows">
              <TypeParameters>
                <TypeParameterDecl Access="Public" Name="I" Tags="x86, Windows" NameKey="::vl::collections::FromIterator::I" OverloadKey="::vl::collections::FromIterator`1::Wrap`1(I,I)::I" />
              </TypeParameters>
              <Specialization />
              <Element>
                <FuncDecl Access="Public" Name="Wrap" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::FromIterator::Wrap" OverloadKey="::vl::collections::FromIterator`1::Wrap`1(I,I)" Virtual="Static" Function="Function">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::collections::FromIteratorEnumerable" Name="FromIteratorEnumerable">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections::FromIteratorEnumerable`2@s:vl.collections.FromIteratorEnumerable`2" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::collections::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections::FromIterator`1::T@s:vl.collections.FromIterator`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                            <RefTypeDecl ReferencingNameKey="::vl::collections::FromIterator::I" Name="I">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections::FromIterator`1::Wrap`1(I,I)::I@s:vl.collections.FromIterator`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </ReturnType>
                      <Parameters>
                        <VarDecl Access="Public" Name="begin" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::FromIterator::Wrap::begin" OverloadKey="::vl::collections::FromIterator`1::Wrap`1(I,I)::begin" Static="False">
                          <Type>
                            <RefTypeDecl ReferencingNameKey="::vl::collections::FromIterator::I" Name="I">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections::FromIterator`1::Wrap`1(I,I)::I@s:vl.collections.FromIterator`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Type>
                        </VarDecl>
                        <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::FromIterator::Wrap::end" OverloadKey="::vl::collections::FromIterator`1::Wrap`1(I,I)::end" Static="False">
                          <Type>
                            <RefTypeDecl ReferencingNameKey="::vl::collections::FromIterator::I" Name="I">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections::FromIterator`1::Wrap`1(I,I)::I@s:vl.collections.FromIterator`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Type>
                        </VarDecl>
                      </Parameters>
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
              </Element>
            </TemplateDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>