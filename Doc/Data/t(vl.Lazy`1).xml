<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="vl.Lazy`1">
    <SymbolTree NamespaceUrlName="vl">
      <SymbolParentMapping>
        <Map From="::vl::Lazy`1::T" To="::vl::Lazy`1" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Lazy`1" DisplayName="Lazy class" Doc="true">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Lazy`1::Internal" DisplayName="Internal class" Doc="false">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Lazy`1::Internal::evaluator" DisplayName="evaluator field" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Lazy`1::Internal::value" DisplayName="value field" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Lazy`1::Internal::evaluated" DisplayName="evaluated field" Doc="false" />
        </Symbol>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Lazy`1::internalValue" DisplayName="internalValue field" Doc="false" />
        <Overloads DisplayName="Lazy constructor">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Lazy`1::Lazy()" DisplayName="Lazy constructor" Doc="true" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Lazy`1::Lazy(&amp; const Func&lt;function () : T&gt;)" DisplayName="Lazy constructor" Doc="true" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Lazy`1::Lazy(&amp; const T)" DisplayName="Lazy constructor" Doc="true" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Lazy`1::Lazy(&amp; const Lazy&lt;T&gt;)" DisplayName="Lazy constructor" Doc="true" />
        </Overloads>
        <Overloads DisplayName="operator = method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Lazy`1::operator =(&amp; const Func&lt;function () : T&gt;)" DisplayName="operator = method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Lazy`1::operator =(&amp; const T)" DisplayName="operator = method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Lazy`1::operator =(&amp; const Lazy&lt;T&gt;)" DisplayName="operator = method" Doc="false" />
        </Overloads>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Lazy`1::Value()const" DisplayName="Value method" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Lazy`1::IsEvaluated()const" DisplayName="IsEvaluated method" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Lazy`1::IsAvailable()const" DisplayName="IsAvailable method" Doc="true" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>