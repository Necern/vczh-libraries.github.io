<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="vl.reflection.description.internal_helper.ConstructorArgumentAdder`2{TypeTuple{T0, ... TNextArgs}}">
    <SymbolTree NamespaceUrlName="vl.reflection.description.internal_helper">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::internal_helper::ConstructorArgumentAdder`2&lt;TypeTuple&lt;T0, ... TNextArgs&gt;&gt;::T0" To="::vl::reflection::description::internal_helper::ConstructorArgumentAdder`2&lt;TypeTuple&lt;T0, ... TNextArgs&gt;&gt;" />
        <Map From="::vl::reflection::description::internal_helper::ConstructorArgumentAdder`2&lt;TypeTuple&lt;T0, ... TNextArgs&gt;&gt;::TNextArgs" To="::vl::reflection::description::internal_helper::ConstructorArgumentAdder`2&lt;TypeTuple&lt;T0, ... TNextArgs&gt;&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::internal_helper::ConstructorArgumentAdder`2&lt;TypeTuple&lt;T0, ... TNextArgs&gt;&gt;" DisplayName="ConstructorArgumentAdder struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::internal_helper::ConstructorArgumentAdder`2&lt;TypeTuple&lt;T0, ... TNextArgs&gt;&gt;::Add(* MethodInfoImpl,array[] * const wchar_t,vint)" DisplayName="Add method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>