<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="vl.collections.LazyList`1">
    <SymbolTree NamespaceUrlName="vl.collections">
      <SymbolParentMapping>
        <Map From="::vl::collections::LazyList`1::Element`1(&amp; const IEnumerable&lt;U&gt;)::U" To="::vl::collections::LazyList`1::Element`1(&amp; const IEnumerable&lt;U&gt;)" />
        <Map From="::vl::collections::LazyList`1::LazyList`1(Ptr&lt;TContainer&gt;)::TContainer" To="::vl::collections::LazyList`1::LazyList`1(Ptr&lt;TContainer&gt;)" />
        <Map From="::vl::collections::LazyList`1::Select`1(F)const::F" To="::vl::collections::LazyList`1::Select`1(F)const" />
        <Map From="::vl::collections::LazyList`1::Where`1(F)const::F" To="::vl::collections::LazyList`1::Where`1(F)const" />
        <Map From="::vl::collections::LazyList`1::Cast`1()const::U" To="::vl::collections::LazyList`1::Cast`1()const" />
        <Map From="::vl::collections::LazyList`1::FindType`1()const::U" To="::vl::collections::LazyList`1::FindType`1()const" />
        <Map From="::vl::collections::LazyList`1::OrderBy`1(F)const::F" To="::vl::collections::LazyList`1::OrderBy`1(F)const" />
        <Map From="::vl::collections::LazyList`1::Aggregate`1(F)const::F" To="::vl::collections::LazyList`1::Aggregate`1(F)const" />
        <Map From="::vl::collections::LazyList`1::Aggregate`2(I,F)const::I" To="::vl::collections::LazyList`1::Aggregate`2(I,F)const" />
        <Map From="::vl::collections::LazyList`1::Aggregate`2(I,F)const::F" To="::vl::collections::LazyList`1::Aggregate`2(I,F)const" />
        <Map From="::vl::collections::LazyList`1::All`1(F)const::F" To="::vl::collections::LazyList`1::All`1(F)const" />
        <Map From="::vl::collections::LazyList`1::Any`1(F)const::F" To="::vl::collections::LazyList`1::Any`1(F)const" />
        <Map From="::vl::collections::LazyList`1::Pairwise`1(&amp; const IEnumerable&lt;U&gt;)const::U" To="::vl::collections::LazyList`1::Pairwise`1(&amp; const IEnumerable&lt;U&gt;)const" />
        <Map From="::vl::collections::LazyList`1::SelectMany`1(F)const::F" To="::vl::collections::LazyList`1::SelectMany`1(F)const" />
        <Map From="::vl::collections::LazyList`1::GroupBy`1(F)const::F" To="::vl::collections::LazyList`1::GroupBy`1(F)const" />
        <Map From="::vl::collections::LazyList`1::T" To="::vl::collections::LazyList`1" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1" DisplayName="LazyList class" Doc="true">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::enumeratorPrototype" DisplayName="enumeratorPrototype field" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Element`1(&amp; const IEnumerable&lt;U&gt;)" DisplayName="Element function" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::xs()const" DisplayName="xs method" Doc="false" />
        <Overloads DisplayName="LazyList constructor">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::LazyList(* IEnumerator&lt;T&gt;)" DisplayName="LazyList constructor" Doc="true" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::LazyList(Ptr&lt;IEnumerator&lt;T&gt;&gt;)" DisplayName="LazyList constructor" Doc="true" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::LazyList(&amp; const IEnumerable&lt;T&gt;)" DisplayName="LazyList constructor" Doc="true" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::LazyList(&amp; const LazyList&lt;T&gt;)" DisplayName="LazyList constructor" Doc="true" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::LazyList()" DisplayName="LazyList constructor" Doc="true" />
        </Overloads>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::LazyList`1(Ptr&lt;TContainer&gt;)" DisplayName="LazyList function" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::operator =(&amp; const LazyList&lt;T&gt;)" DisplayName="operator = method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::CreateEnumerator()const" DisplayName="CreateEnumerator method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Select`1(F)const" DisplayName="Select function" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Where`1(F)const" DisplayName="Where function" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Cast`1()const" DisplayName="Cast function" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::FindType`1()const" DisplayName="FindType function" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::OrderBy`1(F)const" DisplayName="OrderBy function" Doc="true" />
        <Overloads DisplayName="Aggregate function">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Aggregate`1(F)const" DisplayName="Aggregate function" Doc="true" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Aggregate`2(I,F)const" DisplayName="Aggregate function" Doc="true" />
        </Overloads>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::All`1(F)const" DisplayName="All function" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Any`1(F)const" DisplayName="Any function" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Max()const" DisplayName="Max method" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Min()const" DisplayName="Min method" Doc="true" />
        <Overloads DisplayName="First method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::First()const" DisplayName="First method" Doc="true" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::First(T)const" DisplayName="First method" Doc="true" />
        </Overloads>
        <Overloads DisplayName="Last method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Last()const" DisplayName="Last method" Doc="true" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Last(T)const" DisplayName="Last method" Doc="true" />
        </Overloads>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Count()const" DisplayName="Count method" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::IsEmpty()const" DisplayName="IsEmpty method" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Concat(&amp; const IEnumerable&lt;T&gt;)const" DisplayName="Concat method" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Take(vint)const" DisplayName="Take method" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Skip(vint)const" DisplayName="Skip method" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Repeat(vint)const" DisplayName="Repeat method" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Distinct()const" DisplayName="Distinct method" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Reverse()const" DisplayName="Reverse method" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Pairwise`1(&amp; const IEnumerable&lt;U&gt;)const" DisplayName="Pairwise function" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Intersect(&amp; const IEnumerable&lt;T&gt;)const" DisplayName="Intersect method" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Except(&amp; const IEnumerable&lt;T&gt;)const" DisplayName="Except method" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Union(&amp; const IEnumerable&lt;T&gt;)const" DisplayName="Union method" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::Evaluate()const" DisplayName="Evaluate method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::SelectMany`1(F)const" DisplayName="SelectMany function" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::collections::LazyList`1::GroupBy`1(F)const" DisplayName="GroupBy function" Doc="true" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>