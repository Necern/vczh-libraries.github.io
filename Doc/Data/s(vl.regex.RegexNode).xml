<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="::vl::regex::RegexNode">
    <ClassDecl Access="Public" Name="RegexNode" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexNode" OverloadKey="::vl::regex::RegexNode" ClassType="Class">
      <Children>
        <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexNode::expression" OverloadKey="::vl::regex::RegexNode::expression" Static="False">
          <Type>
            <SubTypeDecl ReferencingNameKey="::vl::regex_internal::Expression::Ref" Name="Ref">
              <ReferencingOverloadKeys>
                <Key Value="::vl::regex_internal::Expression::Ref@s:vl.regex_internal.Expression" />
              </ReferencingOverloadKeys>
              <Parent>
                <SubTypeDecl ReferencingNameKey="::vl::regex_internal::Expression" Name="Expression">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex_internal::Expression@s:vl.regex_internal.Expression" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <SubTypeDecl ReferencingNameKey="::vl::regex_internal" Name="regex_internal">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal@ns:vl.regex_internal" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl" Name="vl">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl@ns:vl" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Parent>
            </SubTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="RegexNode" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexNode::RegexNode" OverloadKey="::vl::regex::RegexNode::RegexNode(vl::regex_internal::Expression::Ref)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexNode::RegexNode::_expression" OverloadKey="::vl::regex::RegexNode::RegexNode(vl::regex_internal::Expression::Ref)::_expression" Static="False">
                  <Type>
                    <SubTypeDecl ReferencingNameKey="::vl::regex_internal::Expression::Ref" Name="Ref">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::Expression::Ref@s:vl.regex_internal.Expression" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <SubTypeDecl ReferencingNameKey="::vl::regex_internal::Expression" Name="Expression">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::Expression@s:vl.regex_internal.Expression" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <SubTypeDecl ReferencingNameKey="::vl::regex_internal" Name="regex_internal">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal@ns:vl.regex_internal" />
                              </ReferencingOverloadKeys>
                              <Parent>
                                <RefTypeDecl ReferencingNameKey="::vl" Name="vl">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl@ns:vl" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Parent>
                            </SubTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Some" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexNode::Some" OverloadKey="::vl::regex::RegexNode::Some()const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexNode" Name="RegexNode">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexNode@s:vl.regex.RegexNode" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Any" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexNode::Any" OverloadKey="::vl::regex::RegexNode::Any()const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexNode" Name="RegexNode">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexNode@s:vl.regex.RegexNode" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Opt" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexNode::Opt" OverloadKey="::vl::regex::RegexNode::Opt()const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexNode" Name="RegexNode">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexNode@s:vl.regex.RegexNode" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Loop" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexNode::Loop" OverloadKey="::vl::regex::RegexNode::Loop(vint,vint)const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexNode" Name="RegexNode">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexNode@s:vl.regex.RegexNode" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="min" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexNode::Loop::min" OverloadKey="::vl::regex::RegexNode::Loop(vint,vint)const::min" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="max" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexNode::Loop::max" OverloadKey="::vl::regex::RegexNode::Loop(vint,vint)const::max" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="AtLeast" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexNode::AtLeast" OverloadKey="::vl::regex::RegexNode::AtLeast(vint)const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexNode" Name="RegexNode">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexNode@s:vl.regex.RegexNode" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="min" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexNode::AtLeast::min" OverloadKey="::vl::regex::RegexNode::AtLeast(vint)const::min" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="operator +" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexNode::operator +" OverloadKey="::vl::regex::RegexNode::operator +(&amp; const RegexNode)const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexNode" Name="RegexNode">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexNode@s:vl.regex.RegexNode" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexNode::operator +::node" OverloadKey="::vl::regex::RegexNode::operator +(&amp; const RegexNode)const::node" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex::RegexNode" Name="RegexNode">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex::RegexNode@s:vl.regex.RegexNode" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="operator |" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexNode::operator |" OverloadKey="::vl::regex::RegexNode::operator |(&amp; const RegexNode)const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexNode" Name="RegexNode">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexNode@s:vl.regex.RegexNode" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexNode::operator |::node" OverloadKey="::vl::regex::RegexNode::operator |(&amp; const RegexNode)const::node" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex::RegexNode" Name="RegexNode">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex::RegexNode@s:vl.regex.RegexNode" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="operator +" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexNode::operator +" OverloadKey="::vl::regex::RegexNode::operator +()const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexNode" Name="RegexNode">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexNode@s:vl.regex.RegexNode" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="operator -" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexNode::operator -" OverloadKey="::vl::regex::RegexNode::operator -()const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexNode" Name="RegexNode">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexNode@s:vl.regex.RegexNode" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="operator !" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexNode::operator !" OverloadKey="::vl::regex::RegexNode::operator !()const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexNode" Name="RegexNode">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexNode@s:vl.regex.RegexNode" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="operator %" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexNode::operator %" OverloadKey="::vl::regex::RegexNode::operator %(&amp; const RegexNode)const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexNode" Name="RegexNode">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexNode@s:vl.regex.RegexNode" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexNode::operator %::node" OverloadKey="::vl::regex::RegexNode::operator %(&amp; const RegexNode)const::node" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex::RegexNode" Name="RegexNode">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex::RegexNode@s:vl.regex.RegexNode" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>