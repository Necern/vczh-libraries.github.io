<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.ArgumentTypeMismtatchException">
    <ClassDecl Access="Public" Name="ArgumentTypeMismtatchException" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ArgumentTypeMismtatchException" OverloadKey="::vl::reflection::description::ArgumentTypeMismtatchException" ClassType="Class">
      <Children>
        <FuncDecl Access="Public" Name="ArgumentTypeMismtatchException" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ArgumentTypeMismtatchException::ArgumentTypeMismtatchException" OverloadKey="::vl::reflection::description::ArgumentTypeMismtatchException::ArgumentTypeMismtatchException(&amp; const WString,* ITypeInfo,&amp; const Value)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="name" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ArgumentTypeMismtatchException::ArgumentTypeMismtatchException::name" OverloadKey="::vl::reflection::description::ArgumentTypeMismtatchException::ArgumentTypeMismtatchException(&amp; const WString,* ITypeInfo,&amp; const Value)::name" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="expected" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ArgumentTypeMismtatchException::ArgumentTypeMismtatchException::expected" OverloadKey="::vl::reflection::description::ArgumentTypeMismtatchException::ArgumentTypeMismtatchException(&amp; const WString,* ITypeInfo,&amp; const Value)::expected" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeInfo" Name="ITypeInfo">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::ITypeInfo@s:vl.reflection.description.ITypeInfo" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="actual" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ArgumentTypeMismtatchException::ArgumentTypeMismtatchException::actual" OverloadKey="::vl::reflection::description::ArgumentTypeMismtatchException::ArgumentTypeMismtatchException(&amp; const WString,* ITypeInfo,&amp; const Value)::actual" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ArgumentTypeMismtatchException" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ArgumentTypeMismtatchException::ArgumentTypeMismtatchException" OverloadKey="::vl::reflection::description::ArgumentTypeMismtatchException::ArgumentTypeMismtatchException(&amp; const WString,* ITypeDescriptor,Value::ValueType,&amp; const Value)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="name" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ArgumentTypeMismtatchException::ArgumentTypeMismtatchException::name" OverloadKey="::vl::reflection::description::ArgumentTypeMismtatchException::ArgumentTypeMismtatchException(&amp; const WString,* ITypeDescriptor,Value::ValueType,&amp; const Value)::name" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="type" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ArgumentTypeMismtatchException::ArgumentTypeMismtatchException::type" OverloadKey="::vl::reflection::description::ArgumentTypeMismtatchException::ArgumentTypeMismtatchException(&amp; const WString,* ITypeDescriptor,Value::ValueType,&amp; const Value)::type" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="valueType" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ArgumentTypeMismtatchException::ArgumentTypeMismtatchException::valueType" OverloadKey="::vl::reflection::description::ArgumentTypeMismtatchException::ArgumentTypeMismtatchException(&amp; const WString,* ITypeDescriptor,Value::ValueType,&amp; const Value)::valueType" Static="False">
                  <Type>
                    <SubTypeDecl ReferencingNameKey="::vl::reflection::description::Value::ValueType" Name="ValueType">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::Value::ValueType@s:vl.reflection.description.Value" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="actual" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ArgumentTypeMismtatchException::ArgumentTypeMismtatchException::actual" OverloadKey="::vl::reflection::description::ArgumentTypeMismtatchException::ArgumentTypeMismtatchException(&amp; const WString,* ITypeDescriptor,Value::ValueType,&amp; const Value)::actual" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeDescriptorException" Name="TypeDescriptorException">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeDescriptorException@s:vl.reflection.description.TypeDescriptorException" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>