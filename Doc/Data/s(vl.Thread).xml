<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.Thread">
    <ClassDecl Access="Public" Name="Thread" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread" OverloadKey="::vl::Thread" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Representing a thread. &lt;links&gt;&lt;link cref="::vl::Thread::CreateAndStart(ThreadProcedure,* void,bool)@s:vl.Thread" /&gt;&lt;link cref="::vl::Thread::CreateAndStart(&amp;amp; const Func&amp;lt;function () : void&amp;gt;,bool)@s:vl.Thread" /&gt;&lt;/links&gt; is the suggested way to create threads.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <EnumDecl Access="Public" Name="ThreadState" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::ThreadState" OverloadKey="::vl::Thread::ThreadState" EnumClass="False">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Thread state.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Children>
            <EnumItemDecl Access="Public" Name="NotStarted" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::ThreadState::NotStarted" OverloadKey="::vl::Thread::ThreadState::NotStarted">
              <Document>&lt;Document&gt;
  &lt;summary&gt;The thread has not started.&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
            <EnumItemDecl Access="Public" Name="Running" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::ThreadState::Running" OverloadKey="::vl::Thread::ThreadState::Running">
              <Document>&lt;Document&gt;
  &lt;summary&gt;The thread is running.&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
            <EnumItemDecl Access="Public" Name="Stopped" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::ThreadState::Stopped" OverloadKey="::vl::Thread::ThreadState::Stopped">
              <Document>&lt;Document&gt;
  &lt;summary&gt;The thread has been stopped.&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
          </Children>
        </EnumDecl>
        <TypedefDecl Access="Public" Name="ThreadProcedure" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::ThreadProcedure" OverloadKey="::vl::Thread::ThreadProcedure">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::Thread" Name="Thread">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Thread@s:vl.Thread" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl Name="void" />
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </TypedefDecl>
        <VarDecl Access="Protected" Name="internalData" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::internalData" OverloadKey="::vl::Thread::internalData" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <SubTypeDecl Name="ThreadData">
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::threading_internal" Name="threading_internal">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::threading_internal" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="threadState" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::threadState" OverloadKey="::vl::Thread::threadState" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Volatile">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::Thread::ThreadState" Name="ThreadState">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Thread::ThreadState@s:vl.Thread" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Protected" Name="Run" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::Run" OverloadKey="::vl::Thread::Run()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="Thread" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::Thread" OverloadKey="::vl::Thread::Thread()" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~Thread" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::~Thread" OverloadKey="::vl::Thread::~Thread()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="CreateAndStart" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::CreateAndStart" OverloadKey="::vl::Thread::CreateAndStart(ThreadProcedure,* void,bool)" Virtual="Static" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Create a thread using a function pointer.&lt;/summary&gt;
  &lt;returns&gt;Returns the created thread.&lt;/returns&gt;
  &lt;param name="procedure"&gt;The function pointer.&lt;/param&gt;
  &lt;param name="argument"&gt;The argument to call the function pointer.&lt;/param&gt;
  &lt;param name="deleteAfterStopped"&gt;Set to true (by default) to make the thread delete itself after the job is done. If you set this argument to true, you are not suggested to touch the returned thread pointer in any way.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Thread" Name="Thread">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Thread@s:vl.Thread" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="procedure" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::CreateAndStart::procedure" OverloadKey="::vl::Thread::CreateAndStart(ThreadProcedure,* void,bool)::procedure" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::Thread::ThreadProcedure" Name="ThreadProcedure">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Thread::ThreadProcedure@s:vl.Thread" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="argument" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::CreateAndStart::argument" OverloadKey="::vl::Thread::CreateAndStart(ThreadProcedure,* void,bool)::argument" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl Name="void" />
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="deleteAfterStopped" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::CreateAndStart::deleteAfterStopped" OverloadKey="::vl::Thread::CreateAndStart(ThreadProcedure,* void,bool)::deleteAfterStopped" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="CreateAndStart" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::CreateAndStart" OverloadKey="::vl::Thread::CreateAndStart(&amp; const Func&lt;function () : void&gt;,bool)" Virtual="Static" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Create a thread using a function object or a lambda expression.&lt;/summary&gt;
  &lt;returns&gt;Returns the created thread.&lt;/returns&gt;
  &lt;param name="procedure"&gt;The function object or the lambda expression.&lt;/param&gt;
  &lt;param name="deleteAfterStopped"&gt;Set to true (by default) to make the thread delete itself after the job is done. If you set this argument to true, you are not suggested to touch the returned thread pointer in any way.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Thread" Name="Thread">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Thread@s:vl.Thread" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="procedure" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::CreateAndStart::procedure" OverloadKey="::vl::Thread::CreateAndStart(&amp; const Func&lt;function () : void&gt;,bool)::procedure" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters />
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="deleteAfterStopped" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::CreateAndStart::deleteAfterStopped" OverloadKey="::vl::Thread::CreateAndStart(&amp; const Func&lt;function () : void&gt;,bool)::deleteAfterStopped" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Sleep" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::Sleep" OverloadKey="::vl::Thread::Sleep(vint)" Virtual="Static" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Pause the caller thread for a period of time.&lt;/summary&gt;
  &lt;param name="ms"&gt;Time in milliseconds.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="ms" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::Sleep::ms" OverloadKey="::vl::Thread::Sleep(vint)::ms" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetCPUCount" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::GetCPUCount" OverloadKey="::vl::Thread::GetCPUCount()" Virtual="Static" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the number of logical processors.&lt;/summary&gt;
  &lt;returns&gt;The number of logical processor.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetCurrentThreadId" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::GetCurrentThreadId" OverloadKey="::vl::Thread::GetCurrentThreadId()" Virtual="Static" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the current thread id.&lt;/summary&gt;
  &lt;returns&gt;The current thread id.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Start" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::Start" OverloadKey="::vl::Thread::Start()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Start the thread.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Stop" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::Stop" OverloadKey="::vl::Thread::Stop()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Stop the thread.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetState" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::GetState" OverloadKey="::vl::Thread::GetState()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the state of the thread.&lt;/summary&gt;
  &lt;returns&gt;The state of the thread.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::Thread::ThreadState" Name="ThreadState">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Thread::ThreadState@s:vl.Thread" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetCPU" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::SetCPU" OverloadKey="::vl::Thread::SetCPU(vint)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::Thread::SetCPU::index" OverloadKey="::vl::Thread::SetCPU(vint)::index" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::WaitableObject" Name="WaitableObject">
              <ReferencingOverloadKeys>
                <Key Value="::vl::WaitableObject@s:vl.WaitableObject" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>