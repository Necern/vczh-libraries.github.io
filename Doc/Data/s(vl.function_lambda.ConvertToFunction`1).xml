<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.function_lambda.ConvertToFunction`1(T)">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Create a function reference to a function pointer, with all type information autotimatically inferred. You can use the macro called "FUNCTION" to refer to this function.&lt;/summary&gt;
  &lt;typeparam name="T"&gt;Type of the function pointer.&lt;/typeparam&gt;
  &lt;returns&gt;The function reference.&lt;/returns&gt;
  &lt;param name="functionObject"&gt;The function pointer.&lt;/param&gt;
&lt;/Document&gt;</Document>
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::function_lambda::T" OverloadKey="::vl::function_lambda::ConvertToFunction`1(T)::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="ConvertToFunction" Tags="x64, Windows;x86, Windows" NameKey="::vl::function_lambda::ConvertToFunction" OverloadKey="::vl::function_lambda::ConvertToFunction`1(T)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <SubTypeDecl ReferencingNameKey="::vl::function_lambda::FunctionObjectRetriveType::Type" Name="Type">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::function_lambda::FunctionObjectRetriveType`1::Type@s:vl.function_lambda.FunctionObjectRetriveType`1" />
                    <Key Value="::vl::function_lambda::FunctionObjectRetriveType`2&lt;* function (... TArgs) : R&gt;::Type@s:vl.function_lambda.FunctionObjectRetriveType`2{^ function (... TArgs) # R}" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::function_lambda::FunctionObjectRetriveType" Name="FunctionObjectRetriveType">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::function_lambda::FunctionObjectRetriveType`1@s:vl.function_lambda.FunctionObjectRetriveType`1" />
                            <Key Value="::vl::function_lambda::FunctionObjectRetriveType`2&lt;* function (... TArgs) : R&gt;@s:vl.function_lambda.FunctionObjectRetriveType`2{^ function (... TArgs) # R}" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::function_lambda::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::function_lambda::ConvertToFunction`1(T)::T@s:vl.function_lambda.ConvertToFunction`1(T)" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="functionObject" Tags="x64, Windows;x86, Windows" NameKey="::vl::function_lambda::ConvertToFunction::functionObject" OverloadKey="::vl::function_lambda::ConvertToFunction`1(T)::functionObject" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::function_lambda::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::function_lambda::ConvertToFunction`1(T)::T@s:vl.function_lambda.ConvertToFunction`1(T)" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>