<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="::vl::regex_internal::CharRange">
    <ClassDecl Access="Public" Name="CharRange" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange" OverloadKey="::vl::regex_internal::CharRange" ClassType="Class">
      <Children>
        <TypedefDecl Access="Public" Name="List" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::List" OverloadKey="::vl::regex_internal::CharRange::List">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::SortedList" Name="SortedList">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::SortedList`2@s:vl.collections.SortedList`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::regex_internal::CharRange" Name="CharRange">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex_internal::CharRange@s:vl.regex_internal.CharRange" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </TypedefDecl>
        <VarDecl Access="Public" Name="begin" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::begin" OverloadKey="::vl::regex_internal::CharRange::begin" Static="False">
          <Type>
            <RefTypeDecl Name="wchar_t" />
          </Type>
        </VarDecl>
        <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::end" OverloadKey="::vl::regex_internal::CharRange::end" Static="False">
          <Type>
            <RefTypeDecl Name="wchar_t" />
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="CharRange" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::CharRange" OverloadKey="::vl::regex_internal::CharRange::CharRange()" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="CharRange" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::CharRange" OverloadKey="::vl::regex_internal::CharRange::CharRange(wchar_t,wchar_t)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_begin" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::CharRange::_begin" OverloadKey="::vl::regex_internal::CharRange::CharRange(wchar_t,wchar_t)::_begin" Static="False">
                  <Type>
                    <RefTypeDecl Name="wchar_t" />
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_end" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::CharRange::_end" OverloadKey="::vl::regex_internal::CharRange::CharRange(wchar_t,wchar_t)::_end" Static="False">
                  <Type>
                    <RefTypeDecl Name="wchar_t" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="operator &lt;" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator &lt;" OverloadKey="::vl::regex_internal::CharRange::operator &lt;(CharRange)const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="item" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator &lt;::item" OverloadKey="::vl::regex_internal::CharRange::operator &lt;(CharRange)const::item" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::CharRange" Name="CharRange">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::CharRange@s:vl.regex_internal.CharRange" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="operator &lt;=" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator &lt;=" OverloadKey="::vl::regex_internal::CharRange::operator &lt;=(CharRange)const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="item" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator &lt;=::item" OverloadKey="::vl::regex_internal::CharRange::operator &lt;=(CharRange)const::item" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::CharRange" Name="CharRange">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::CharRange@s:vl.regex_internal.CharRange" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="operator &gt;" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator &gt;" OverloadKey="::vl::regex_internal::CharRange::operator &gt;(CharRange)const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="item" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator &gt;::item" OverloadKey="::vl::regex_internal::CharRange::operator &gt;(CharRange)const::item" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::CharRange" Name="CharRange">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::CharRange@s:vl.regex_internal.CharRange" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="operator &gt;=" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator &gt;=" OverloadKey="::vl::regex_internal::CharRange::operator &gt;=(CharRange)const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="item" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator &gt;=::item" OverloadKey="::vl::regex_internal::CharRange::operator &gt;=(CharRange)const::item" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::CharRange" Name="CharRange">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::CharRange@s:vl.regex_internal.CharRange" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="operator ==" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator ==" OverloadKey="::vl::regex_internal::CharRange::operator ==(CharRange)const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="item" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator ==::item" OverloadKey="::vl::regex_internal::CharRange::operator ==(CharRange)const::item" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::CharRange" Name="CharRange">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::CharRange@s:vl.regex_internal.CharRange" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="operator !=" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator !=" OverloadKey="::vl::regex_internal::CharRange::operator !=(CharRange)const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="item" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator !=::item" OverloadKey="::vl::regex_internal::CharRange::operator !=(CharRange)const::item" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal::CharRange" Name="CharRange">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::CharRange@s:vl.regex_internal.CharRange" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="operator &lt;" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator &lt;" OverloadKey="::vl::regex_internal::CharRange::operator &lt;(wchar_t)const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="item" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator &lt;::item" OverloadKey="::vl::regex_internal::CharRange::operator &lt;(wchar_t)const::item" Static="False">
                  <Type>
                    <RefTypeDecl Name="wchar_t" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="operator &lt;=" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator &lt;=" OverloadKey="::vl::regex_internal::CharRange::operator &lt;=(wchar_t)const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="item" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator &lt;=::item" OverloadKey="::vl::regex_internal::CharRange::operator &lt;=(wchar_t)const::item" Static="False">
                  <Type>
                    <RefTypeDecl Name="wchar_t" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="operator &gt;" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator &gt;" OverloadKey="::vl::regex_internal::CharRange::operator &gt;(wchar_t)const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="item" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator &gt;::item" OverloadKey="::vl::regex_internal::CharRange::operator &gt;(wchar_t)const::item" Static="False">
                  <Type>
                    <RefTypeDecl Name="wchar_t" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="operator &gt;=" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator &gt;=" OverloadKey="::vl::regex_internal::CharRange::operator &gt;=(wchar_t)const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="item" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator &gt;=::item" OverloadKey="::vl::regex_internal::CharRange::operator &gt;=(wchar_t)const::item" Static="False">
                  <Type>
                    <RefTypeDecl Name="wchar_t" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="operator ==" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator ==" OverloadKey="::vl::regex_internal::CharRange::operator ==(wchar_t)const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="item" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator ==::item" OverloadKey="::vl::regex_internal::CharRange::operator ==(wchar_t)const::item" Static="False">
                  <Type>
                    <RefTypeDecl Name="wchar_t" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="operator !=" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator !=" OverloadKey="::vl::regex_internal::CharRange::operator !=(wchar_t)const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="item" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::CharRange::operator !=::item" OverloadKey="::vl::regex_internal::CharRange::operator !=(wchar_t)const::item" Static="False">
                  <Type>
                    <RefTypeDecl Name="wchar_t" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes />
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>