<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.Ptr`1">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <Document>&lt;Document&gt;
  &lt;summary&gt;A smart pointer. It is always safe to convert a pointer to an object to a smart pointer once. If you do it multiple times, it may be wrong due to different implementation of &lt;links&gt;&lt;link cref="::vl::ReferenceCounterOperator`2@s:vl.ReferenceCounterOperator`2" /&gt;&lt;link cref="::vl::ReferenceCounterOperator`1&amp;lt;T,RequiresConvertable&amp;lt;T, reflection::DescriptableObject&amp;gt;::YesNoType&amp;gt;@s:vl.ReferenceCounterOperator`1{T,RequiresConvertable{T, reflection.DescriptableObject}.YesNoType}" /&gt;&lt;/links&gt;. In case of wrong, disposing the smart pointer will cause an access violation.&lt;/summary&gt;
  &lt;typeparam name="T"&gt;The type of the object.&lt;/typeparam&gt;
&lt;/Document&gt;</Document>
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::Ptr`1::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <ClassDecl Access="Public" Name="Ptr" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr" OverloadKey="::vl::Ptr`1" ClassType="Class">
          <Children>
            <TypedefDecl Access="Protected" Name="Destructor" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::Destructor" OverloadKey="::vl::Ptr`1::Destructor">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <RefTypeDecl Name="void" />
                      </ReturnType>
                      <Parameters>
                        <VarDecl Access="Public" Static="False">
                          <Type>
                            <DecorateTypeDecl Decoration="Pointer">
                              <Element>
                                <DecorateTypeDecl Decoration="Volatile">
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::vint@s:vl.vint" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                </DecorateTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Type>
                        </VarDecl>
                        <VarDecl Access="Public" Static="False">
                          <Type>
                            <DecorateTypeDecl Decoration="Pointer">
                              <Element>
                                <RefTypeDecl Name="void" />
                              </Element>
                            </DecorateTypeDecl>
                          </Type>
                        </VarDecl>
                      </Parameters>
                    </FunctionTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </TypedefDecl>
            <VarDecl Access="Protected" Name="counter" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::counter" OverloadKey="::vl::Ptr`1::counter" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <DecorateTypeDecl Decoration="Volatile">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Protected" Name="reference" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::reference" OverloadKey="::vl::Ptr`1::reference" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Protected" Name="originalReference" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::originalReference" OverloadKey="::vl::Ptr`1::originalReference" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl Name="void" />
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Protected" Name="originalDestructor" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::originalDestructor" OverloadKey="::vl::Ptr`1::originalDestructor" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::Ptr::Destructor" Name="Destructor">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Ptr`1::Destructor@s:vl.Ptr`1" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
            <FuncDecl Access="Protected" Name="Inc" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::Inc" OverloadKey="::vl::Ptr`1::Inc()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Protected" Name="Dec" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::Dec" OverloadKey="::vl::Ptr`1::Dec()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Protected" Name="Counter" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::Counter" OverloadKey="::vl::Ptr`1::Counter()const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <DecorateTypeDecl Decoration="Volatile">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::vint@s:vl.vint" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Protected" Name="Ptr" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::Ptr" OverloadKey="::vl::Ptr`1::Ptr(* volatile vint,* T,* void,Destructor)" Virtual="Normal" Function="Constructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="_counter" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::Ptr::_counter" OverloadKey="::vl::Ptr`1::Ptr(* volatile vint,* T,* void,Destructor)::_counter" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Volatile">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::vint@s:vl.vint" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="_reference" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::Ptr::_reference" OverloadKey="::vl::Ptr`1::Ptr(* volatile vint,* T,* void,Destructor)::_reference" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="_originalReference" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::Ptr::_originalReference" OverloadKey="::vl::Ptr`1::Ptr(* volatile vint,* T,* void,Destructor)::_originalReference" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl Name="void" />
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="_originalDestructor" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::Ptr::_originalDestructor" OverloadKey="::vl::Ptr`1::Ptr(* volatile vint,* T,* void,Destructor)::_originalDestructor" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr::Destructor" Name="Destructor">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1::Destructor@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Ptr" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::Ptr" OverloadKey="::vl::Ptr`1::Ptr()" Virtual="Normal" Function="Constructor">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Create a null pointer.&lt;/summary&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Ptr" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::Ptr" OverloadKey="::vl::Ptr`1::Ptr(* T)" Virtual="Normal" Function="Constructor">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Convert a pointer to an object to a smart pointer.&lt;/summary&gt;
  &lt;param name="pointer"&gt;The pointer to the object.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::Ptr::pointer" OverloadKey="::vl::Ptr`1::Ptr(* T)::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Ptr" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::Ptr" OverloadKey="::vl::Ptr`1::Ptr(&amp; const Ptr&lt;T&gt;)" Virtual="Normal" Function="Constructor">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Copy a smart pointer.&lt;/summary&gt;
  &lt;param name="pointer"&gt;The smart pointer to copy.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::Ptr::pointer" OverloadKey="::vl::Ptr`1::Ptr(&amp; const Ptr&lt;T&gt;)::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Ptr" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::Ptr" OverloadKey="::vl::Ptr`1::Ptr(&amp;&amp; Ptr&lt;T&gt;)" Virtual="Normal" Function="Constructor">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Move a smart pointer.&lt;/summary&gt;
  &lt;param name="pointer"&gt;The smart pointer to Move.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::Ptr::pointer" OverloadKey="::vl::Ptr`1::Ptr(&amp;&amp; Ptr&lt;T&gt;)::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="RightRef">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <TemplateDecl Access="Public" Tags="x86, Windows">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Cast a smart pointer.&lt;/summary&gt;
  &lt;typeparam name="C"&gt;The type of the object before casting.&lt;/typeparam&gt;
  &lt;param name="pointer"&gt;The smart pointer to cast.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <TypeParameters>
                <TypeParameterDecl Access="Public" Name="C" Tags="x86, Windows" NameKey="::vl::Ptr::C" OverloadKey="::vl::Ptr`1::Ptr`1(&amp; const Ptr&lt;C&gt;)::C" />
              </TypeParameters>
              <Specialization />
              <Element>
                <FuncDecl Access="Public" Name="Ptr" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::Ptr" OverloadKey="::vl::Ptr`1::Ptr`1(&amp; const Ptr&lt;C&gt;)" Virtual="Normal" Function="Constructor">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <RefTypeDecl Name="void" />
                      </ReturnType>
                      <Parameters>
                        <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::Ptr::pointer" OverloadKey="::vl::Ptr`1::Ptr`1(&amp; const Ptr&lt;C&gt;)::pointer" Static="False">
                          <Type>
                            <DecorateTypeDecl Decoration="LeftRef">
                              <Element>
                                <DecorateTypeDecl Decoration="Const">
                                  <Element>
                                    <GenericTypeDecl>
                                      <Element>
                                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </Element>
                                      <TypeArguments>
                                        <RefTypeDecl ReferencingNameKey="::vl::Ptr::C" Name="C">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::Ptr`1::Ptr`1(&amp; const Ptr&lt;C&gt;)::C@s:vl.Ptr`1" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </TypeArguments>
                                    </GenericTypeDecl>
                                  </Element>
                                </DecorateTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Type>
                        </VarDecl>
                      </Parameters>
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
              </Element>
            </TemplateDecl>
            <FuncDecl Access="Public" Name="~Ptr" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::~Ptr" OverloadKey="::vl::Ptr`1::~Ptr()" Virtual="Normal" Function="Destructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <TemplateDecl Access="Public" Tags="x86, Windows">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Cast a smart pointer.&lt;/summary&gt;
  &lt;typeparam name="C"&gt;The type of the object after casting.&lt;/typeparam&gt;
  &lt;returns&gt;The casted smart pointer. Returns null if failed.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <TypeParameters>
                <TypeParameterDecl Access="Public" Name="C" Tags="x86, Windows" NameKey="::vl::Ptr::C" OverloadKey="::vl::Ptr`1::Cast`1()const::C" />
              </TypeParameters>
              <Specialization />
              <Element>
                <FuncDecl Access="Public" Name="Cast" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::Cast" OverloadKey="::vl::Ptr`1::Cast`1()const" Virtual="Normal" Function="Function">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="True">
                      <ReturnType>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::Ptr::C" Name="C">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Ptr`1::Cast`1()const::C@s:vl.Ptr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </ReturnType>
                      <Parameters />
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
              </Element>
            </TemplateDecl>
            <FuncDecl Access="Public" Name="operator =" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator =" OverloadKey="::vl::Ptr`1::operator =(* T)" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Convert a pointer to an object to a smart pointer.&lt;/summary&gt;
  &lt;returns&gt;The converted smart pointer.&lt;/returns&gt;
  &lt;param name="pointer"&gt;The pointer to the object.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator =::pointer" OverloadKey="::vl::Ptr`1::operator =(* T)::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator =" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator =" OverloadKey="::vl::Ptr`1::operator =(&amp; const Ptr&lt;T&gt;)" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Copy a smart pointer.&lt;/summary&gt;
  &lt;returns&gt;The copied smart pointer.&lt;/returns&gt;
  &lt;param name="pointer"&gt;The smart pointer to copy.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator =::pointer" OverloadKey="::vl::Ptr`1::operator =(&amp; const Ptr&lt;T&gt;)::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator =" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator =" OverloadKey="::vl::Ptr`1::operator =(&amp;&amp; Ptr&lt;T&gt;)" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Move a smart pointer.&lt;/summary&gt;
  &lt;returns&gt;The moved smart pointer.&lt;/returns&gt;
  &lt;param name="pointer"&gt;The smart pointer to Move.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator =::pointer" OverloadKey="::vl::Ptr`1::operator =(&amp;&amp; Ptr&lt;T&gt;)::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="RightRef">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <TemplateDecl Access="Public" Tags="x86, Windows">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Cast a smart pointer.&lt;/summary&gt;
  &lt;typeparam name="C"&gt;The type of the object before casting.&lt;/typeparam&gt;
  &lt;returns&gt;The smart pointer after casting.&lt;/returns&gt;
  &lt;param name="pointer"&gt;The smart pointer to cast.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <TypeParameters>
                <TypeParameterDecl Access="Public" Name="C" Tags="x86, Windows" NameKey="::vl::Ptr::C" OverloadKey="::vl::Ptr`1::operator =`1(&amp; const Ptr&lt;C&gt;)::C" />
              </TypeParameters>
              <Specialization />
              <Element>
                <FuncDecl Access="Public" Name="operator =" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator =" OverloadKey="::vl::Ptr`1::operator =`1(&amp; const Ptr&lt;C&gt;)" Virtual="Normal" Function="Function">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </ReturnType>
                      <Parameters>
                        <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator =::pointer" OverloadKey="::vl::Ptr`1::operator =`1(&amp; const Ptr&lt;C&gt;)::pointer" Static="False">
                          <Type>
                            <DecorateTypeDecl Decoration="LeftRef">
                              <Element>
                                <DecorateTypeDecl Decoration="Const">
                                  <Element>
                                    <GenericTypeDecl>
                                      <Element>
                                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </Element>
                                      <TypeArguments>
                                        <RefTypeDecl ReferencingNameKey="::vl::Ptr::C" Name="C">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::Ptr`1::operator =`1(&amp; const Ptr&lt;C&gt;)::C@s:vl.Ptr`1" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </TypeArguments>
                                    </GenericTypeDecl>
                                  </Element>
                                </DecorateTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Type>
                        </VarDecl>
                      </Parameters>
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
              </Element>
            </TemplateDecl>
            <FuncDecl Access="Public" Name="operator ==" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator ==" OverloadKey="::vl::Ptr`1::operator ==(* const T)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator ==::pointer" OverloadKey="::vl::Ptr`1::operator ==(* const T)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator !=" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator !=" OverloadKey="::vl::Ptr`1::operator !=(* const T)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator !=::pointer" OverloadKey="::vl::Ptr`1::operator !=(* const T)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator &gt;" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator &gt;" OverloadKey="::vl::Ptr`1::operator &gt;(* const T)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator &gt;::pointer" OverloadKey="::vl::Ptr`1::operator &gt;(* const T)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator &gt;=" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator &gt;=" OverloadKey="::vl::Ptr`1::operator &gt;=(* const T)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator &gt;=::pointer" OverloadKey="::vl::Ptr`1::operator &gt;=(* const T)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator &lt;" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator &lt;" OverloadKey="::vl::Ptr`1::operator &lt;(* const T)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator &lt;::pointer" OverloadKey="::vl::Ptr`1::operator &lt;(* const T)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator &lt;=" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator &lt;=" OverloadKey="::vl::Ptr`1::operator &lt;=(* const T)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator &lt;=::pointer" OverloadKey="::vl::Ptr`1::operator &lt;=(* const T)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator ==" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator ==" OverloadKey="::vl::Ptr`1::operator ==(&amp; const Ptr&lt;T&gt;)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator ==::pointer" OverloadKey="::vl::Ptr`1::operator ==(&amp; const Ptr&lt;T&gt;)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator !=" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator !=" OverloadKey="::vl::Ptr`1::operator !=(&amp; const Ptr&lt;T&gt;)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator !=::pointer" OverloadKey="::vl::Ptr`1::operator !=(&amp; const Ptr&lt;T&gt;)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator &gt;" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator &gt;" OverloadKey="::vl::Ptr`1::operator &gt;(&amp; const Ptr&lt;T&gt;)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator &gt;::pointer" OverloadKey="::vl::Ptr`1::operator &gt;(&amp; const Ptr&lt;T&gt;)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator &gt;=" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator &gt;=" OverloadKey="::vl::Ptr`1::operator &gt;=(&amp; const Ptr&lt;T&gt;)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator &gt;=::pointer" OverloadKey="::vl::Ptr`1::operator &gt;=(&amp; const Ptr&lt;T&gt;)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator &lt;" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator &lt;" OverloadKey="::vl::Ptr`1::operator &lt;(&amp; const Ptr&lt;T&gt;)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator &lt;::pointer" OverloadKey="::vl::Ptr`1::operator &lt;(&amp; const Ptr&lt;T&gt;)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator &lt;=" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator &lt;=" OverloadKey="::vl::Ptr`1::operator &lt;=(&amp; const Ptr&lt;T&gt;)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator &lt;=::pointer" OverloadKey="::vl::Ptr`1::operator &lt;=(&amp; const Ptr&lt;T&gt;)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator" OverloadKey="::vl::Ptr`1::operator()const" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Test if it is a null pointer.&lt;/summary&gt;
  &lt;returns&gt;Returns true if it is not null.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Obj" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::Obj" OverloadKey="::vl::Ptr`1::Obj()const" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Get the pointer to the object.&lt;/summary&gt;
  &lt;returns&gt;The pointer to the object.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator -&gt;" Tags="x64, Windows;x86, Windows" NameKey="::vl::Ptr::operator -&gt;" OverloadKey="::vl::Ptr`1::operator -&gt;()const" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Get the pointer to the object.&lt;/summary&gt;
  &lt;returns&gt;The pointer to the object.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1::T@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>