<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="::vl::stream::LzwEncoder">
    <ClassDecl Access="Public" Name="LzwEncoder" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::LzwEncoder" OverloadKey="::vl::stream::LzwEncoder" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;An encoder to compress using Lzw algorithm.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <VarDecl Access="Protected" Name="stream" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::LzwEncoder::stream" OverloadKey="::vl::stream::LzwEncoder::stream" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::stream::IStream" Name="IStream">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::stream::IStream@s:vl.stream.IStream" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="buffer" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::LzwEncoder::buffer" OverloadKey="::vl::stream::LzwEncoder::buffer" Static="False">
          <Type>
            <ArrayTypeDecl Expression="lzw : : BufferSize">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::vuint8_t" Name="vuint8_t">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vuint8_t@s:vl.vuint8_t" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </ArrayTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="bufferUsedBits" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::LzwEncoder::bufferUsedBits" OverloadKey="::vl::stream::LzwEncoder::bufferUsedBits" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
              <ReferencingOverloadKeys>
                <Key Value="::vl::vint@s:vl.vint" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="prefix" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::LzwEncoder::prefix" OverloadKey="::vl::stream::LzwEncoder::prefix" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::stream::lzw::Code" Name="Code">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::stream::lzw::Code@s:vl.stream.lzw.Code" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::stream::lzw" Name="lzw">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::stream::lzw@ns:vl.stream.lzw" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Protected" Name="Flush" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::LzwEncoder::Flush" OverloadKey="::vl::stream::LzwEncoder::Flush()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="WriteNumber" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::LzwEncoder::WriteNumber" OverloadKey="::vl::stream::LzwEncoder::WriteNumber(vint,vint)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="number" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::LzwEncoder::WriteNumber::number" OverloadKey="::vl::stream::LzwEncoder::WriteNumber(vint,vint)::number" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="bitSize" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::LzwEncoder::WriteNumber::bitSize" OverloadKey="::vl::stream::LzwEncoder::WriteNumber(vint,vint)::bitSize" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="LzwEncoder" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::LzwEncoder::LzwEncoder" OverloadKey="::vl::stream::LzwEncoder::LzwEncoder()" Virtual="Normal" Function="Constructor">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Create an encoder.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="LzwEncoder" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::LzwEncoder::LzwEncoder" OverloadKey="::vl::stream::LzwEncoder::LzwEncoder(&amp; array[256] bool)" Virtual="Normal" Function="Constructor">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Create an encoder and tell it which byte will never appear in the data before compression.&lt;/summary&gt;
  &lt;param name="existingBytes"&gt;An array to tell the encoder which byte will never appear in the data before compression.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="existingBytes" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::LzwEncoder::LzwEncoder::existingBytes" OverloadKey="::vl::stream::LzwEncoder::LzwEncoder(&amp; array[256] bool)::existingBytes" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <ArrayTypeDecl Expression="256">
                          <Element>
                            <RefTypeDecl Name="bool" />
                          </Element>
                        </ArrayTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~LzwEncoder" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::LzwEncoder::~LzwEncoder" OverloadKey="::vl::stream::LzwEncoder::~LzwEncoder()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Setup" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::LzwEncoder::Setup" OverloadKey="::vl::stream::LzwEncoder::Setup(* IStream)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_stream" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::LzwEncoder::Setup::_stream" OverloadKey="::vl::stream::LzwEncoder::Setup(* IStream)::_stream" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::stream::IStream" Name="IStream">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::stream::IStream@s:vl.stream.IStream" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Close" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::LzwEncoder::Close" OverloadKey="::vl::stream::LzwEncoder::Close()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Write" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::LzwEncoder::Write" OverloadKey="::vl::stream::LzwEncoder::Write(* void,vint)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_buffer" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::LzwEncoder::Write::_buffer" OverloadKey="::vl::stream::LzwEncoder::Write(* void,vint)::_buffer" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl Name="void" />
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_size" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::LzwEncoder::Write::_size" OverloadKey="::vl::stream::LzwEncoder::Write(* void,vint)::_size" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::stream::LzwBase" Name="LzwBase">
              <ReferencingOverloadKeys>
                <Key Value="::vl::stream::LzwBase@s:vl.stream.LzwBase" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::stream::IEncoder" Name="IEncoder">
              <ReferencingOverloadKeys>
                <Key Value="::vl::stream::IEncoder@s:vl.stream.IEncoder" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>