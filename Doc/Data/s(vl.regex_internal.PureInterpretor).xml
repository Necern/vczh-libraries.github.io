<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.regex_internal.PureInterpretor">
    <ClassDecl Access="Public" Name="PureInterpretor" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor" OverloadKey="::vl::regex_internal::PureInterpretor" ClassType="Class">
      <Children>
        <VarDecl Access="Protected" Name="SupportedCharCount" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::SupportedCharCount" OverloadKey="::vl::regex_internal::PureInterpretor::SupportedCharCount" Static="True">
          <Type>
            <DecorateTypeDecl Decoration="Const">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="charMap" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::charMap" OverloadKey="::vl::regex_internal::PureInterpretor::charMap" Static="False">
          <Type>
            <ArrayTypeDecl Expression="SupportedCharCount">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </ArrayTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="transition" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::transition" OverloadKey="::vl::regex_internal::PureInterpretor::transition" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="finalState" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::finalState" OverloadKey="::vl::regex_internal::PureInterpretor::finalState" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <RefTypeDecl Name="bool" />
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="relatedFinalState" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::relatedFinalState" OverloadKey="::vl::regex_internal::PureInterpretor::relatedFinalState" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="stateCount" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::stateCount" OverloadKey="::vl::regex_internal::PureInterpretor::stateCount" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
              <ReferencingOverloadKeys>
                <Key Value="::vl::vint@s:vl.vint" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="charSetCount" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::charSetCount" OverloadKey="::vl::regex_internal::PureInterpretor::charSetCount" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
              <ReferencingOverloadKeys>
                <Key Value="::vl::vint@s:vl.vint" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="startState" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::startState" OverloadKey="::vl::regex_internal::PureInterpretor::startState" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
              <ReferencingOverloadKeys>
                <Key Value="::vl::vint@s:vl.vint" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="PureInterpretor" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::PureInterpretor" OverloadKey="::vl::regex_internal::PureInterpretor::PureInterpretor(Automaton::Ref,&amp; CharRange::List)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="dfa" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::PureInterpretor::dfa" OverloadKey="::vl::regex_internal::PureInterpretor::PureInterpretor(Automaton::Ref,&amp; CharRange::List)::dfa" Static="False">
                  <Type>
                    <SubTypeDecl ReferencingNameKey="::vl::regex_internal::Automaton::Ref" Name="Ref">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal::Automaton::Ref@s:vl.regex_internal.Automaton" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::Automaton" Name="Automaton">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::Automaton@s:vl.regex_internal.Automaton" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="subsets" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::PureInterpretor::subsets" OverloadKey="::vl::regex_internal::PureInterpretor::PureInterpretor(Automaton::Ref,&amp; CharRange::List)::subsets" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::regex_internal::CharRange::List" Name="List">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::CharRange::List@s:vl.regex_internal.CharRange" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal::CharRange" Name="CharRange">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal::CharRange@s:vl.regex_internal.CharRange" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~PureInterpretor" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::~PureInterpretor" OverloadKey="::vl::regex_internal::PureInterpretor::~PureInterpretor()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="MatchHead" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::MatchHead" OverloadKey="::vl::regex_internal::PureInterpretor::MatchHead(* const wchar_t,* const wchar_t,&amp; PureResult)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="input" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::MatchHead::input" OverloadKey="::vl::regex_internal::PureInterpretor::MatchHead(* const wchar_t,* const wchar_t,&amp; PureResult)::input" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl Name="wchar_t" />
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::MatchHead::start" OverloadKey="::vl::regex_internal::PureInterpretor::MatchHead(* const wchar_t,* const wchar_t,&amp; PureResult)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl Name="wchar_t" />
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="result" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::MatchHead::result" OverloadKey="::vl::regex_internal::PureInterpretor::MatchHead(* const wchar_t,* const wchar_t,&amp; PureResult)::result" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::PureResult" Name="PureResult">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::PureResult@s:vl.regex_internal.PureResult" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Match" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::Match" OverloadKey="::vl::regex_internal::PureInterpretor::Match(* const wchar_t,* const wchar_t,&amp; PureResult)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="input" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::Match::input" OverloadKey="::vl::regex_internal::PureInterpretor::Match(* const wchar_t,* const wchar_t,&amp; PureResult)::input" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl Name="wchar_t" />
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::Match::start" OverloadKey="::vl::regex_internal::PureInterpretor::Match(* const wchar_t,* const wchar_t,&amp; PureResult)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl Name="wchar_t" />
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="result" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::Match::result" OverloadKey="::vl::regex_internal::PureInterpretor::Match(* const wchar_t,* const wchar_t,&amp; PureResult)::result" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex_internal::PureResult" Name="PureResult">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::PureResult@s:vl.regex_internal.PureResult" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetStartState" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::GetStartState" OverloadKey="::vl::regex_internal::PureInterpretor::GetStartState()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Transit" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::Transit" OverloadKey="::vl::regex_internal::PureInterpretor::Transit(wchar_t,vint)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="input" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::Transit::input" OverloadKey="::vl::regex_internal::PureInterpretor::Transit(wchar_t,vint)::input" Static="False">
                  <Type>
                    <RefTypeDecl Name="wchar_t" />
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="state" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::Transit::state" OverloadKey="::vl::regex_internal::PureInterpretor::Transit(wchar_t,vint)::state" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsFinalState" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::IsFinalState" OverloadKey="::vl::regex_internal::PureInterpretor::IsFinalState(vint)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="state" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::IsFinalState::state" OverloadKey="::vl::regex_internal::PureInterpretor::IsFinalState(vint)::state" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsDeadState" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::IsDeadState" OverloadKey="::vl::regex_internal::PureInterpretor::IsDeadState(vint)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="state" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::IsDeadState::state" OverloadKey="::vl::regex_internal::PureInterpretor::IsDeadState(vint)::state" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="PrepareForRelatedFinalStateTable" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::PrepareForRelatedFinalStateTable" OverloadKey="::vl::regex_internal::PureInterpretor::PrepareForRelatedFinalStateTable()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetRelatedFinalState" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::GetRelatedFinalState" OverloadKey="::vl::regex_internal::PureInterpretor::GetRelatedFinalState(vint)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="state" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex_internal::PureInterpretor::GetRelatedFinalState::state" OverloadKey="::vl::regex_internal::PureInterpretor::GetRelatedFinalState(vint)::state" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>