<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;">
    <SymbolTree NamespaceUrlName="vl.regex_internal">
      <SymbolParentMapping>
        <Map From="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::ParameterType" To="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;" DisplayName="RegexExpressionAlgorithm class" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::parameterValue" DisplayName="parameterValue field" Doc="false" />
        <Overloads DisplayName="Invoke method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Invoke(* Expression,ParameterType)" DisplayName="Invoke method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Invoke(Expression::Ref,ParameterType)" DisplayName="Invoke method" Doc="false" />
        </Overloads>
        <Overloads DisplayName="Apply method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* CharSetExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* LoopExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* SequenceExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* AlternateExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* BeginExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* EndExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* CaptureExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* MatchExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* PositiveExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* NegativeExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Apply(* UsingExpression,ParameterType)" DisplayName="Apply method" Doc="false" />
        </Overloads>
        <Overloads DisplayName="Visit method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* CharSetExpression)" DisplayName="Visit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* LoopExpression)" DisplayName="Visit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* SequenceExpression)" DisplayName="Visit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* AlternateExpression)" DisplayName="Visit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* BeginExpression)" DisplayName="Visit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* EndExpression)" DisplayName="Visit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* CaptureExpression)" DisplayName="Visit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* MatchExpression)" DisplayName="Visit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* PositiveExpression)" DisplayName="Visit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* NegativeExpression)" DisplayName="Visit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::regex_internal::RegexExpressionAlgorithm`1&lt;void,ParameterType&gt;::Visit(* UsingExpression)" DisplayName="Visit method" Doc="false" />
        </Overloads>
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>