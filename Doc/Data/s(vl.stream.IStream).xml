<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.stream.IStream">
    <ClassDecl Access="Public" Name="IStream" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream" OverloadKey="::vl::stream::IStream" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;
Interface for streams. Stream functions are grouped into 5 categories:
1) Feature testing functions.
2) Read functions, available only if &lt;links&gt;&lt;link cref="::vl::stream::IStream::CanRead()const@s:vl.stream.IStream" /&gt;&lt;/links&gt; returns true.
3) Peek functions, available only if &lt;links&gt;&lt;link cref="::vl::stream::IStream::CanPeek()const@s:vl.stream.IStream" /&gt;&lt;/links&gt; returns true.
4) Write functions, available only if &lt;links&gt;&lt;link cref="::vl::stream::IStream::CanWrite()const@s:vl.stream.IStream" /&gt;&lt;/links&gt; returns true.
5) Seek functions, available only if &lt;links&gt;&lt;link cref="::vl::stream::IStream::CanSeek()const@s:vl.stream.IStream" /&gt;&lt;/links&gt; returns true.
6) Size functions, available only if &lt;links&gt;&lt;link cref="::vl::stream::IStream::IsLimited()const@s:vl.stream.IStream" /&gt;&lt;/links&gt; returns true. But there are still some streams knows that the content is limited, but the size is unknown. In this case, &lt;links&gt;&lt;link cref="::vl::stream::IStream::Size()const@s:vl.stream.IStream" /&gt;&lt;/links&gt; will return -1.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <FuncDecl Access="Public" Name="CanRead" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::CanRead" OverloadKey="::vl::stream::IStream::CanRead()const" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Test if the stream is readable.&lt;/summary&gt;
  &lt;returns&gt;Returns true if the stream is readable.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="CanWrite" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::CanWrite" OverloadKey="::vl::stream::IStream::CanWrite()const" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Test if the stream is writable.&lt;/summary&gt;
  &lt;returns&gt;Returns true if the stream is writable.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="CanSeek" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::CanSeek" OverloadKey="::vl::stream::IStream::CanSeek()const" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Test if the stream is seekable.&lt;/summary&gt;
  &lt;returns&gt;Returns true if the stream is seekable.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="CanPeek" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::CanPeek" OverloadKey="::vl::stream::IStream::CanPeek()const" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Test if the stream is peekable.&lt;/summary&gt;
  &lt;returns&gt;Returns true if the stream is peekable.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsLimited" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::IsLimited" OverloadKey="::vl::stream::IStream::IsLimited()const" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Test if the content of the stream is limited. A writable stream can also be limited, it means that you can only write a limited content to the stream.&lt;/summary&gt;
  &lt;returns&gt;Returns true if the content of the stream is limited.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsAvailable" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::IsAvailable" OverloadKey="::vl::stream::IStream::IsAvailable()const" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Test if the stream is available. For example, if you create a readable &lt;links&gt;&lt;link cref="::vl::stream::FileStream@s:vl.stream.FileStream" /&gt;&lt;/links&gt; giving a wrong file name, it will be unavailable.&lt;/summary&gt;
  &lt;returns&gt;Returns true if the stream is available.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Close" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::Close" OverloadKey="::vl::stream::IStream::Close()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Close the stream.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Position" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::Position" OverloadKey="::vl::stream::IStream::Position()const" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the current position in the stream.&lt;/summary&gt;
  &lt;returns&gt;The position in the stream. Returns -1 if the stream is not available.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::pos_t" Name="pos_t">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::pos_t@s:vl.pos_t" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Size" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::Size" OverloadKey="::vl::stream::IStream::Size()const" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the size of the content..&lt;/summary&gt;
  &lt;returns&gt;The size of the content. Returns -1 if the size is unknown or the stream is not available.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::pos_t" Name="pos_t">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::pos_t@s:vl.pos_t" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Seek" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::Seek" OverloadKey="::vl::stream::IStream::Seek(pos_t)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Step forward or backward from the current position. Will throw exception if the stream is not seekable or not available.&lt;/summary&gt;
  &lt;param name="_size"&gt;The length of the step.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_size" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::Seek::_size" OverloadKey="::vl::stream::IStream::Seek(pos_t)::_size" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::pos_t" Name="pos_t">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::pos_t@s:vl.pos_t" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SeekFromBegin" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::SeekFromBegin" OverloadKey="::vl::stream::IStream::SeekFromBegin(pos_t)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Step fowward from the beginning. Will throw exception if the stream is not seekable or not available.&lt;/summary&gt;
  &lt;param name="_size"&gt;The length of the step.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_size" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::SeekFromBegin::_size" OverloadKey="::vl::stream::IStream::SeekFromBegin(pos_t)::_size" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::pos_t" Name="pos_t">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::pos_t@s:vl.pos_t" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SeekFromEnd" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::SeekFromEnd" OverloadKey="::vl::stream::IStream::SeekFromEnd(pos_t)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Step backward from the end. Will throw exception if the stream is not seekable or not available.&lt;/summary&gt;
  &lt;param name="_size"&gt;The length of the step.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_size" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::SeekFromEnd::_size" OverloadKey="::vl::stream::IStream::SeekFromEnd(pos_t)::_size" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::pos_t" Name="pos_t">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::pos_t@s:vl.pos_t" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Read" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::Read" OverloadKey="::vl::stream::IStream::Read(* void,vint)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Read from the current position and step forward. Will throw exception if the stream is not readable or not available.&lt;/summary&gt;
  &lt;returns&gt;Returns the actual size of the content that is read. Returns 0 indicates that the stream reaches the end if the stream is limited.&lt;/returns&gt;
  &lt;param name="_buffer"&gt;A buffer to store the content.&lt;/param&gt;
  &lt;param name="_size"&gt;The size of the content that is expected to read.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_buffer" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::Read::_buffer" OverloadKey="::vl::stream::IStream::Read(* void,vint)::_buffer" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl Name="void" />
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_size" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::Read::_size" OverloadKey="::vl::stream::IStream::Read(* void,vint)::_size" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Write" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::Write" OverloadKey="::vl::stream::IStream::Write(* void,vint)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Write to the current position and step forward. Will throw exception if the stream is not writable or not available.&lt;/summary&gt;
  &lt;returns&gt;Returns the actual size of the content that is written. Returns 0 indicates that the stream reaches the end if the stream is limited.&lt;/returns&gt;
  &lt;param name="_buffer"&gt;A buffer storing the content to write.&lt;/param&gt;
  &lt;param name="_size"&gt;The size of the content that is expected to write.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_buffer" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::Write::_buffer" OverloadKey="::vl::stream::IStream::Write(* void,vint)::_buffer" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl Name="void" />
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_size" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::Write::_size" OverloadKey="::vl::stream::IStream::Write(* void,vint)::_size" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Peek" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::Peek" OverloadKey="::vl::stream::IStream::Peek(* void,vint)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Read from the current position but not step forward. Will throw exception if the stream is not peekable or not available.&lt;/summary&gt;
  &lt;returns&gt;Returns the actual size of the content that is read. Returns 0 indicates that the stream reaches the end if the stream is limited.&lt;/returns&gt;
  &lt;param name="_buffer"&gt;A buffer to store the content.&lt;/param&gt;
  &lt;param name="_size"&gt;The size of the content that is expected to peek.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_buffer" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::Peek::_buffer" OverloadKey="::vl::stream::IStream::Peek(* void,vint)::_buffer" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl Name="void" />
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_size" Tags="x64, Windows;x86, Windows" NameKey="::vl::stream::IStream::Peek::_size" OverloadKey="::vl::stream::IStream::Peek(* void,vint)::_size" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Interface" Name="Interface">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Interface@s:vl.Interface" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>