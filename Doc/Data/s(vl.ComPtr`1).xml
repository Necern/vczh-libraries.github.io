<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="::vl::ComPtr`1">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::ComPtr`1::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <ClassDecl Access="Public" Name="ComPtr" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr" OverloadKey="::vl::ComPtr`1" ClassType="Class">
          <Children>
            <VarDecl Access="Protected" Name="counter" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::counter" OverloadKey="::vl::ComPtr`1::counter" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <DecorateTypeDecl Decoration="Volatile">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Protected" Name="reference" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::reference" OverloadKey="::vl::ComPtr`1::reference" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <FuncDecl Access="Protected" Name="Inc" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::Inc" OverloadKey="::vl::ComPtr`1::Inc()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Protected" Name="Dec" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::Dec" OverloadKey="::vl::ComPtr`1::Dec()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Protected" Name="Counter" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::Counter" OverloadKey="::vl::ComPtr`1::Counter()const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <DecorateTypeDecl Decoration="Volatile">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::vint@s:vl.vint" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Protected" Name="ComPtr" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::ComPtr" OverloadKey="::vl::ComPtr`1::ComPtr(* volatile vint,* T)" Virtual="Normal" Function="Constructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="_counter" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::ComPtr::_counter" OverloadKey="::vl::ComPtr`1::ComPtr(* volatile vint,* T)::_counter" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Volatile">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::vint@s:vl.vint" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="_reference" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::ComPtr::_reference" OverloadKey="::vl::ComPtr`1::ComPtr(* volatile vint,* T)::_reference" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="ComPtr" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::ComPtr" OverloadKey="::vl::ComPtr`1::ComPtr()" Virtual="Normal" Function="Constructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="ComPtr" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::ComPtr" OverloadKey="::vl::ComPtr`1::ComPtr(* T)" Virtual="Normal" Function="Constructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::ComPtr::pointer" OverloadKey="::vl::ComPtr`1::ComPtr(* T)::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="ComPtr" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::ComPtr" OverloadKey="::vl::ComPtr`1::ComPtr(&amp; const ComPtr&lt;T&gt;)" Virtual="Normal" Function="Constructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::ComPtr::pointer" OverloadKey="::vl::ComPtr`1::ComPtr(&amp; const ComPtr&lt;T&gt;)::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::ComPtr" Name="ComPtr">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::ComPtr`1@s:vl.ComPtr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="ComPtr" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::ComPtr" OverloadKey="::vl::ComPtr`1::ComPtr(&amp;&amp; ComPtr&lt;T&gt;)" Virtual="Normal" Function="Constructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::ComPtr::pointer" OverloadKey="::vl::ComPtr`1::ComPtr(&amp;&amp; ComPtr&lt;T&gt;)::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="RightRef">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::ComPtr" Name="ComPtr">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::ComPtr`1@s:vl.ComPtr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="~ComPtr" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::~ComPtr" OverloadKey="::vl::ComPtr`1::~ComPtr()" Virtual="Normal" Function="Destructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator =" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator =" OverloadKey="::vl::ComPtr`1::operator =(* T)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::ComPtr" Name="ComPtr">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::ComPtr`1@s:vl.ComPtr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator =::pointer" OverloadKey="::vl::ComPtr`1::operator =(* T)::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator =" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator =" OverloadKey="::vl::ComPtr`1::operator =(&amp; const ComPtr&lt;T&gt;)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::ComPtr" Name="ComPtr">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::ComPtr`1@s:vl.ComPtr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator =::pointer" OverloadKey="::vl::ComPtr`1::operator =(&amp; const ComPtr&lt;T&gt;)::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::ComPtr" Name="ComPtr">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::ComPtr`1@s:vl.ComPtr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator =" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator =" OverloadKey="::vl::ComPtr`1::operator =(&amp;&amp; ComPtr&lt;T&gt;)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::ComPtr" Name="ComPtr">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::ComPtr`1@s:vl.ComPtr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator =::pointer" OverloadKey="::vl::ComPtr`1::operator =(&amp;&amp; ComPtr&lt;T&gt;)::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="RightRef">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::ComPtr" Name="ComPtr">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::ComPtr`1@s:vl.ComPtr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator ==" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator ==" OverloadKey="::vl::ComPtr`1::operator ==(* const T)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator ==::pointer" OverloadKey="::vl::ComPtr`1::operator ==(* const T)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator !=" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator !=" OverloadKey="::vl::ComPtr`1::operator !=(* const T)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator !=::pointer" OverloadKey="::vl::ComPtr`1::operator !=(* const T)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator &gt;" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator &gt;" OverloadKey="::vl::ComPtr`1::operator &gt;(* const T)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator &gt;::pointer" OverloadKey="::vl::ComPtr`1::operator &gt;(* const T)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator &gt;=" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator &gt;=" OverloadKey="::vl::ComPtr`1::operator &gt;=(* const T)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator &gt;=::pointer" OverloadKey="::vl::ComPtr`1::operator &gt;=(* const T)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator &lt;" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator &lt;" OverloadKey="::vl::ComPtr`1::operator &lt;(* const T)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator &lt;::pointer" OverloadKey="::vl::ComPtr`1::operator &lt;(* const T)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator &lt;=" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator &lt;=" OverloadKey="::vl::ComPtr`1::operator &lt;=(* const T)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator &lt;=::pointer" OverloadKey="::vl::ComPtr`1::operator &lt;=(* const T)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator ==" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator ==" OverloadKey="::vl::ComPtr`1::operator ==(&amp; const ComPtr&lt;T&gt;)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator ==::pointer" OverloadKey="::vl::ComPtr`1::operator ==(&amp; const ComPtr&lt;T&gt;)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::ComPtr" Name="ComPtr">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::ComPtr`1@s:vl.ComPtr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator !=" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator !=" OverloadKey="::vl::ComPtr`1::operator !=(&amp; const ComPtr&lt;T&gt;)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator !=::pointer" OverloadKey="::vl::ComPtr`1::operator !=(&amp; const ComPtr&lt;T&gt;)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::ComPtr" Name="ComPtr">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::ComPtr`1@s:vl.ComPtr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator &gt;" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator &gt;" OverloadKey="::vl::ComPtr`1::operator &gt;(&amp; const ComPtr&lt;T&gt;)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator &gt;::pointer" OverloadKey="::vl::ComPtr`1::operator &gt;(&amp; const ComPtr&lt;T&gt;)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::ComPtr" Name="ComPtr">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::ComPtr`1@s:vl.ComPtr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator &gt;=" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator &gt;=" OverloadKey="::vl::ComPtr`1::operator &gt;=(&amp; const ComPtr&lt;T&gt;)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator &gt;=::pointer" OverloadKey="::vl::ComPtr`1::operator &gt;=(&amp; const ComPtr&lt;T&gt;)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::ComPtr" Name="ComPtr">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::ComPtr`1@s:vl.ComPtr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator &lt;" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator &lt;" OverloadKey="::vl::ComPtr`1::operator &lt;(&amp; const ComPtr&lt;T&gt;)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator &lt;::pointer" OverloadKey="::vl::ComPtr`1::operator &lt;(&amp; const ComPtr&lt;T&gt;)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::ComPtr" Name="ComPtr">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::ComPtr`1@s:vl.ComPtr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator &lt;=" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator &lt;=" OverloadKey="::vl::ComPtr`1::operator &lt;=(&amp; const ComPtr&lt;T&gt;)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="pointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator &lt;=::pointer" OverloadKey="::vl::ComPtr`1::operator &lt;=(&amp; const ComPtr&lt;T&gt;)const::pointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::ComPtr" Name="ComPtr">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::ComPtr`1@s:vl.ComPtr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator" OverloadKey="::vl::ComPtr`1::operator()const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Obj" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::Obj" OverloadKey="::vl::ComPtr`1::Obj()const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator -&gt;" Tags="x64, Windows;x86, Windows" NameKey="::vl::ComPtr::operator -&gt;" OverloadKey="::vl::ComPtr`1::operator -&gt;()const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::ComPtr`1::T@s:vl.ComPtr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>