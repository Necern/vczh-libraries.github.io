<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.workflow.analyzer.GetExpressionTypes(^ WfLexicalScopeManager,Ptr{WfExpression},Ptr{reflection.description.ITypeInfo},bool,&amp; collections.List{ResolveExpressionResult})">
    <FuncDecl Access="Public" Name="GetExpressionTypes" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::analyzer::GetExpressionTypes" OverloadKey="::vl::workflow::analyzer::GetExpressionTypes(* WfLexicalScopeManager,Ptr&lt;WfExpression&gt;,Ptr&lt;reflection::description::ITypeInfo&gt;,bool,&amp; collections::List&lt;ResolveExpressionResult&gt;)" Virtual="Normal" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="void" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="manager" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::analyzer::GetExpressionTypes::manager" OverloadKey="::vl::workflow::analyzer::GetExpressionTypes(* WfLexicalScopeManager,Ptr&lt;WfExpression&gt;,Ptr&lt;reflection::description::ITypeInfo&gt;,bool,&amp; collections::List&lt;ResolveExpressionResult&gt;)::manager" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::workflow::analyzer::WfLexicalScopeManager" Name="WfLexicalScopeManager">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::workflow::analyzer::WfLexicalScopeManager@s:vl.workflow.analyzer.WfLexicalScopeManager" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="expression" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::analyzer::GetExpressionTypes::expression" OverloadKey="::vl::workflow::analyzer::GetExpressionTypes(* WfLexicalScopeManager,Ptr&lt;WfExpression&gt;,Ptr&lt;reflection::description::ITypeInfo&gt;,bool,&amp; collections::List&lt;ResolveExpressionResult&gt;)::expression" Static="False">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::workflow::WfExpression" Name="WfExpression">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::workflow::WfExpression@s:vl.workflow.WfExpression" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="expectedType" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::analyzer::GetExpressionTypes::expectedType" OverloadKey="::vl::workflow::analyzer::GetExpressionTypes(* WfLexicalScopeManager,Ptr&lt;WfExpression&gt;,Ptr&lt;reflection::description::ITypeInfo&gt;,bool,&amp; collections::List&lt;ResolveExpressionResult&gt;)::expectedType" Static="False">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <SubTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeInfo" Name="ITypeInfo">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ITypeInfo@s:vl.reflection.description.ITypeInfo" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <SubTypeDecl ReferencingNameKey="::vl::reflection::description" Name="description">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description@ns:vl.reflection.description" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection" Name="reflection">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection@ns:vl.reflection" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="allowEvent" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::analyzer::GetExpressionTypes::allowEvent" OverloadKey="::vl::workflow::analyzer::GetExpressionTypes(* WfLexicalScopeManager,Ptr&lt;WfExpression&gt;,Ptr&lt;reflection::description::ITypeInfo&gt;,bool,&amp; collections::List&lt;ResolveExpressionResult&gt;)::allowEvent" Static="False">
              <Type>
                <RefTypeDecl Name="bool" />
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="results" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::analyzer::GetExpressionTypes::results" OverloadKey="::vl::workflow::analyzer::GetExpressionTypes(* WfLexicalScopeManager,Ptr&lt;WfExpression&gt;,Ptr&lt;reflection::description::ITypeInfo&gt;,bool,&amp; collections::List&lt;ResolveExpressionResult&gt;)::results" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <GenericTypeDecl>
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections@ns:vl.collections" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::workflow::analyzer::ResolveExpressionResult" Name="ResolveExpressionResult">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::workflow::analyzer::ResolveExpressionResult@s:vl.workflow.analyzer.ResolveExpressionResult" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
</OverloadingSymbols>