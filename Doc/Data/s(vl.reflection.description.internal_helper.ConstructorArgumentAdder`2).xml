<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.internal_helper.ConstructorArgumentAdder`2{TypeTuple{T0, ... TNextArgs}}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T0" Tags="x86, Windows" NameKey="::vl::reflection::description::internal_helper::T0" OverloadKey="::vl::reflection::description::internal_helper::ConstructorArgumentAdder`2&lt;TypeTuple&lt;T0, ... TNextArgs&gt;&gt;::T0" />
        <TypeParameterDecl Access="Public" Name="TNextArgs" Tags="x86, Windows" NameKey="::vl::reflection::description::internal_helper::TNextArgs" OverloadKey="::vl::reflection::description::internal_helper::ConstructorArgumentAdder`2&lt;TypeTuple&lt;T0, ... TNextArgs&gt;&gt;::TNextArgs" />
      </TypeParameters>
      <Specialization>
        <GenericTypeDecl>
          <Element>
            <RefTypeDecl ReferencingNameKey="::vl::TypeTuple" Name="TypeTuple">
              <ReferencingOverloadKeys>
                <Key Value="::vl::TypeTuple`1@s:vl.TypeTuple`1" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Element>
          <TypeArguments>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::internal_helper::T0" Name="T0">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::internal_helper::ConstructorArgumentAdder`2&lt;TypeTuple&lt;T0, ... TNextArgs&gt;&gt;::T0@s:vl.reflection.description.internal_helper.ConstructorArgumentAdder`2{TypeTuple{T0, ... TNextArgs}}" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
            <VariadicArgumentTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::internal_helper::TNextArgs" Name="TNextArgs">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::internal_helper::ConstructorArgumentAdder`2&lt;TypeTuple&lt;T0, ... TNextArgs&gt;&gt;::TNextArgs@s:vl.reflection.description.internal_helper.ConstructorArgumentAdder`2{TypeTuple{T0, ... TNextArgs}}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </VariadicArgumentTypeDecl>
          </TypeArguments>
        </GenericTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="ConstructorArgumentAdder" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::internal_helper::ConstructorArgumentAdder" OverloadKey="::vl::reflection::description::internal_helper::ConstructorArgumentAdder`2&lt;TypeTuple&lt;T0, ... TNextArgs&gt;&gt;" ClassType="Struct">
          <Children>
            <FuncDecl Access="Public" Name="Add" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::internal_helper::ConstructorArgumentAdder::Add" OverloadKey="::vl::reflection::description::internal_helper::ConstructorArgumentAdder`2&lt;TypeTuple&lt;T0, ... TNextArgs&gt;&gt;::Add(* MethodInfoImpl,array[] * const wchar_t,vint)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="methodInfo" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::internal_helper::ConstructorArgumentAdder::Add::methodInfo" OverloadKey="::vl::reflection::description::internal_helper::ConstructorArgumentAdder`2&lt;TypeTuple&lt;T0, ... TNextArgs&gt;&gt;::Add(* MethodInfoImpl,array[] * const wchar_t,vint)::methodInfo" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::MethodInfoImpl" Name="MethodInfoImpl">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::MethodInfoImpl@s:vl.reflection.description.MethodInfoImpl" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="parameterNames" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::internal_helper::ConstructorArgumentAdder::Add::parameterNames" OverloadKey="::vl::reflection::description::internal_helper::ConstructorArgumentAdder`2&lt;TypeTuple&lt;T0, ... TNextArgs&gt;&gt;::Add(* MethodInfoImpl,array[] * const wchar_t,vint)::parameterNames" Static="False">
                      <Type>
                        <ArrayTypeDecl Expression="">
                          <Element>
                            <DecorateTypeDecl Decoration="Pointer">
                              <Element>
                                <DecorateTypeDecl Decoration="Const">
                                  <Element>
                                    <RefTypeDecl Name="wchar_t" />
                                  </Element>
                                </DecorateTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </ArrayTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::internal_helper::ConstructorArgumentAdder::Add::index" OverloadKey="::vl::reflection::description::internal_helper::ConstructorArgumentAdder`2&lt;TypeTuple&lt;T0, ... TNextArgs&gt;&gt;::Add(* MethodInfoImpl,array[] * const wchar_t,vint)::index" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>