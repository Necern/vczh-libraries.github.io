<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.parsing.analyzing.RemoveEpsilonTransitions(&amp; collections.Dictionary{^ State, ^ State},&amp; collections.List{^ State},Ptr{Automaton})">
    <FuncDecl Access="Public" Name="RemoveEpsilonTransitions" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::RemoveEpsilonTransitions" OverloadKey="::vl::parsing::analyzing::RemoveEpsilonTransitions(&amp; collections::Dictionary&lt;* State, * State&gt;,&amp; collections::List&lt;* State&gt;,Ptr&lt;Automaton&gt;)" Virtual="Normal" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="void" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="oldNewStateMap" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::RemoveEpsilonTransitions::oldNewStateMap" OverloadKey="::vl::parsing::analyzing::RemoveEpsilonTransitions(&amp; collections::Dictionary&lt;* State, * State&gt;,&amp; collections::List&lt;* State&gt;,Ptr&lt;Automaton&gt;)::oldNewStateMap" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <GenericTypeDecl>
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::collections::Dictionary" Name="Dictionary">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::collections::Dictionary`4@s:vl.collections.Dictionary`4" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections@ns:vl.collections" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                      <TypeArguments>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="scanningStates" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::RemoveEpsilonTransitions::scanningStates" OverloadKey="::vl::parsing::analyzing::RemoveEpsilonTransitions(&amp; collections::Dictionary&lt;* State, * State&gt;,&amp; collections::List&lt;* State&gt;,Ptr&lt;Automaton&gt;)::scanningStates" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <GenericTypeDecl>
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections@ns:vl.collections" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                      <TypeArguments>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="automaton" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::RemoveEpsilonTransitions::automaton" OverloadKey="::vl::parsing::analyzing::RemoveEpsilonTransitions(&amp; collections::Dictionary&lt;* State, * State&gt;,&amp; collections::List&lt;* State&gt;,Ptr&lt;Automaton&gt;)::automaton" Static="False">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::Automaton" Name="Automaton">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::analyzing::Automaton@s:vl.parsing.analyzing.Automaton" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
</OverloadingSymbols>