<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.Combiner`1(&amp; const Func{function (Func{T}.ResultType, Func{T}.ResultType) # Func{T}.ResultType})">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Use the converter function to create a combiner, who will receive two function and use &lt;links&gt;&lt;link cref="::vl::Combine`3(Func&amp;lt;C&amp;gt;,Func&amp;lt;F1&amp;gt;,Func&amp;lt;F2&amp;gt;)@s:vl.Combine`3(Func{C},Func{F1},Func{F2})" /&gt;&lt;/links&gt; to create a combined function. This function assumes the result types of the two provided function in the future are the same, and the converter function will not change the result type.&lt;/summary&gt;
  &lt;typeparam name="T"&gt;Type of the two functions to combine.&lt;/typeparam&gt;
  &lt;returns&gt;The combiner.&lt;/returns&gt;
  &lt;param name="converter"&gt;The converter function.&lt;/param&gt;
&lt;/Document&gt;</Document>
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::Combiner`1(&amp; const Func&lt;function (Func&lt;T&gt;::ResultType, Func&lt;T&gt;::ResultType) : Func&lt;T&gt;::ResultType&gt;)::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="Combiner" Tags="x64, Windows;x86, Windows" NameKey="::vl::Combiner" OverloadKey="::vl::Combiner`1(&amp; const Func&lt;function (Func&lt;T&gt;::ResultType, Func&lt;T&gt;::ResultType) : Func&lt;T&gt;::ResultType&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Func`1@s:vl.Func`1" />
                        <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Func`1@s:vl.Func`1" />
                                <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Combiner`1(&amp; const Func&lt;function (Func&lt;T&gt;::ResultType, Func&lt;T&gt;::ResultType) : Func&lt;T&gt;::ResultType&gt;)::T@s:vl.Combiner`1(&amp; const Func{function (Func{T}.ResultType, Func{T}.ResultType) # Func{T}.ResultType})" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </ReturnType>
                      <Parameters>
                        <VarDecl Access="Public" Static="False">
                          <Type>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Combiner`1(&amp; const Func&lt;function (Func&lt;T&gt;::ResultType, Func&lt;T&gt;::ResultType) : Func&lt;T&gt;::ResultType&gt;)::T@s:vl.Combiner`1(&amp; const Func{function (Func{T}.ResultType, Func{T}.ResultType) # Func{T}.ResultType})" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Type>
                        </VarDecl>
                        <VarDecl Access="Public" Static="False">
                          <Type>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Combiner`1(&amp; const Func&lt;function (Func&lt;T&gt;::ResultType, Func&lt;T&gt;::ResultType) : Func&lt;T&gt;::ResultType&gt;)::T@s:vl.Combiner`1(&amp; const Func{function (Func{T}.ResultType, Func{T}.ResultType) # Func{T}.ResultType})" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Type>
                        </VarDecl>
                      </Parameters>
                    </FunctionTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="converter" Tags="x64, Windows;x86, Windows" NameKey="::vl::Combiner::converter" OverloadKey="::vl::Combiner`1(&amp; const Func&lt;function (Func&lt;T&gt;::ResultType, Func&lt;T&gt;::ResultType) : Func&lt;T&gt;::ResultType&gt;)::converter" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <SubTypeDecl ReferencingNameKey="::vl::Func::ResultType" Name="ResultType">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::ResultType@s:vl.Func`2{function (... TArgs) # R}" />
                                      </ReferencingOverloadKeys>
                                      <Parent>
                                        <GenericTypeDecl>
                                          <Element>
                                            <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                              <ReferencingOverloadKeys>
                                                <Key Value="::vl::Func`1@s:vl.Func`1" />
                                                <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                              </ReferencingOverloadKeys>
                                            </RefTypeDecl>
                                          </Element>
                                          <TypeArguments>
                                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                              <ReferencingOverloadKeys>
                                                <Key Value="::vl::Combiner`1(&amp; const Func&lt;function (Func&lt;T&gt;::ResultType, Func&lt;T&gt;::ResultType) : Func&lt;T&gt;::ResultType&gt;)::T@s:vl.Combiner`1(&amp; const Func{function (Func{T}.ResultType, Func{T}.ResultType) # Func{T}.ResultType})" />
                                              </ReferencingOverloadKeys>
                                            </RefTypeDecl>
                                          </TypeArguments>
                                        </GenericTypeDecl>
                                      </Parent>
                                    </SubTypeDecl>
                                  </ReturnType>
                                  <Parameters>
                                    <VarDecl Access="Public" Static="False">
                                      <Type>
                                        <SubTypeDecl ReferencingNameKey="::vl::Func::ResultType" Name="ResultType">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::ResultType@s:vl.Func`2{function (... TArgs) # R}" />
                                          </ReferencingOverloadKeys>
                                          <Parent>
                                            <GenericTypeDecl>
                                              <Element>
                                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                                  <ReferencingOverloadKeys>
                                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                                  </ReferencingOverloadKeys>
                                                </RefTypeDecl>
                                              </Element>
                                              <TypeArguments>
                                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                                  <ReferencingOverloadKeys>
                                                    <Key Value="::vl::Combiner`1(&amp; const Func&lt;function (Func&lt;T&gt;::ResultType, Func&lt;T&gt;::ResultType) : Func&lt;T&gt;::ResultType&gt;)::T@s:vl.Combiner`1(&amp; const Func{function (Func{T}.ResultType, Func{T}.ResultType) # Func{T}.ResultType})" />
                                                  </ReferencingOverloadKeys>
                                                </RefTypeDecl>
                                              </TypeArguments>
                                            </GenericTypeDecl>
                                          </Parent>
                                        </SubTypeDecl>
                                      </Type>
                                    </VarDecl>
                                    <VarDecl Access="Public" Static="False">
                                      <Type>
                                        <SubTypeDecl ReferencingNameKey="::vl::Func::ResultType" Name="ResultType">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::ResultType@s:vl.Func`2{function (... TArgs) # R}" />
                                          </ReferencingOverloadKeys>
                                          <Parent>
                                            <GenericTypeDecl>
                                              <Element>
                                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                                  <ReferencingOverloadKeys>
                                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                                  </ReferencingOverloadKeys>
                                                </RefTypeDecl>
                                              </Element>
                                              <TypeArguments>
                                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                                  <ReferencingOverloadKeys>
                                                    <Key Value="::vl::Combiner`1(&amp; const Func&lt;function (Func&lt;T&gt;::ResultType, Func&lt;T&gt;::ResultType) : Func&lt;T&gt;::ResultType&gt;)::T@s:vl.Combiner`1(&amp; const Func{function (Func{T}.ResultType, Func{T}.ResultType) # Func{T}.ResultType})" />
                                                  </ReferencingOverloadKeys>
                                                </RefTypeDecl>
                                              </TypeArguments>
                                            </GenericTypeDecl>
                                          </Parent>
                                        </SubTypeDecl>
                                      </Type>
                                    </VarDecl>
                                  </Parameters>
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>