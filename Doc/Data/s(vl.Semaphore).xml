<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="::vl::Semaphore">
    <ClassDecl Access="Public" Name="Semaphore" Tags="x64, Windows;x86, Windows" NameKey="::vl::Semaphore" OverloadKey="::vl::Semaphore" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Semaphore.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <VarDecl Access="Private" Name="internalData" Tags="x64, Windows;x86, Windows" NameKey="::vl::Semaphore::internalData" OverloadKey="::vl::Semaphore::internalData" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <SubTypeDecl Name="SemaphoreData">
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::threading_internal" Name="threading_internal">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::threading_internal" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="Semaphore" Tags="x64, Windows;x86, Windows" NameKey="::vl::Semaphore::Semaphore" OverloadKey="::vl::Semaphore::Semaphore()" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~Semaphore" Tags="x64, Windows;x86, Windows" NameKey="::vl::Semaphore::~Semaphore" OverloadKey="::vl::Semaphore::~Semaphore()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Create" Tags="x64, Windows;x86, Windows" NameKey="::vl::Semaphore::Create" OverloadKey="::vl::Semaphore::Create(vint,vint,&amp; const WString)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Create a semaphore.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="initialCount"&gt;Define the counter of the semaphore.&lt;/param&gt;
  &lt;param name="maxCount"&gt;Define the maximum value of the counter of the semaphore. This argument is only used in Windows.&lt;/param&gt;
  &lt;param name="name"&gt;Name of the semaphore. If it is not empty, than it is a global named semaphore. This argument is ignored in Linux.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="initialCount" Tags="x64, Windows;x86, Windows" NameKey="::vl::Semaphore::Create::initialCount" OverloadKey="::vl::Semaphore::Create(vint,vint,&amp; const WString)::initialCount" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="maxCount" Tags="x64, Windows;x86, Windows" NameKey="::vl::Semaphore::Create::maxCount" OverloadKey="::vl::Semaphore::Create(vint,vint,&amp; const WString)::maxCount" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="name" Tags="x64, Windows;x86, Windows" NameKey="::vl::Semaphore::Create::name" OverloadKey="::vl::Semaphore::Create(vint,vint,&amp; const WString)::name" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Open" Tags="x64, Windows;x86, Windows" NameKey="::vl::Semaphore::Open" OverloadKey="::vl::Semaphore::Open(bool,&amp; const WString)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Open an existing global named semaphore.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="inheritable"&gt;Set to true make the semaphore visible to all all child processes. This argument is only used in Windows.&lt;/param&gt;
  &lt;param name="name"&gt;Name of the semaphore. This argument is ignored in Linux.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="inheritable" Tags="x64, Windows;x86, Windows" NameKey="::vl::Semaphore::Open::inheritable" OverloadKey="::vl::Semaphore::Open(bool,&amp; const WString)::inheritable" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="name" Tags="x64, Windows;x86, Windows" NameKey="::vl::Semaphore::Open::name" OverloadKey="::vl::Semaphore::Open(bool,&amp; const WString)::name" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Release" Tags="x64, Windows;x86, Windows" NameKey="::vl::Semaphore::Release" OverloadKey="::vl::Semaphore::Release()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt; Release the semaphore once. &lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Release" Tags="x64, Windows;x86, Windows" NameKey="::vl::Semaphore::Release" OverloadKey="::vl::Semaphore::Release(vint)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt; Release the semaphore multiple times. &lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="count"&gt;The amout to release.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="count" Tags="x64, Windows;x86, Windows" NameKey="::vl::Semaphore::Release::count" OverloadKey="::vl::Semaphore::Release(vint)::count" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::WaitableObject" Name="WaitableObject">
              <ReferencingOverloadKeys>
                <Key Value="::vl::WaitableObject@s:vl.WaitableObject" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>