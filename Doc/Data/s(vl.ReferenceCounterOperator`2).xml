<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.ReferenceCounterOperator`2">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <Document>&lt;Document&gt;
  &lt;summary&gt;The strategy to get the pointer to the reference counter from an object. If you get the same pointer multiple times from the same object by calling &lt;links&gt;&lt;link cref="::vl::ReferenceCounterOperator`2::CreateCounter(* T)@s:vl.ReferenceCounterOperator`2" /&gt;&lt;link cref="::vl::ReferenceCounterOperator`1&amp;lt;T,RequiresConvertable&amp;lt;T, reflection::DescriptableObject&amp;gt;::YesNoType&amp;gt;::CreateCounter(* T)@s:vl.ReferenceCounterOperator`1{T,RequiresConvertable{T, reflection.DescriptableObject}.YesNoType}" /&gt;&lt;/links&gt;, than it is safe to convert a object pointer to a &lt;links&gt;&lt;link cref="::vl::Ptr`1@s:vl.Ptr`1" /&gt;&lt;/links&gt;. Currently for reflectable C++ types which inherit from &lt;links&gt;&lt;link cref="::vl::reflection::DescriptableObject@s:vl.reflection.DescriptableObject" /&gt;&lt;/links&gt; it is yet. For others it is no.&lt;/summary&gt;
  &lt;typeparam name="T"&gt;The type of the object.&lt;/typeparam&gt;
  &lt;typeparam name="Enabled"&gt;
    &lt;links&gt;
      &lt;link cref="::vl::Ptr`1@s:vl.Ptr`1" /&gt;
    &lt;/links&gt;
    &lt;links&gt;
      &lt;link cref="::vl::Ptr`1@s:vl.Ptr`1" /&gt;
    &lt;/links&gt;[T:vl.Ptr`1] will always use &lt;links&gt;&lt;link cref="::vl::YesType@s:vl.YesType" /&gt;&lt;/links&gt; as the second type parameter. This parameter is useful when you want to do partial specialization in the SFINAE way.&lt;/typeparam&gt;
&lt;/Document&gt;</Document>
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::ReferenceCounterOperator`2::T" />
        <TypeParameterDecl Access="Public" Name="Enabled" Tags="x86, Windows" NameKey="::vl::Enabled" OverloadKey="::vl::ReferenceCounterOperator`2::Enabled" />
      </TypeParameters>
      <Specialization />
      <Element>
        <ClassDecl Access="Public" Name="ReferenceCounterOperator" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReferenceCounterOperator" OverloadKey="::vl::ReferenceCounterOperator`2" ClassType="Struct">
          <Children>
            <FuncDecl Access="Public" Name="CreateCounter" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReferenceCounterOperator::CreateCounter" OverloadKey="::vl::ReferenceCounterOperator`2::CreateCounter(* T)" Virtual="Static" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Create a pointer to the reference counter from an object.&lt;/summary&gt;
  &lt;returns&gt;The pointer to the reference counter.&lt;/returns&gt;
  &lt;param name="reference"&gt;The object.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <DecorateTypeDecl Decoration="Volatile">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::vint@s:vl.vint" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="reference" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReferenceCounterOperator::CreateCounter::reference" OverloadKey="::vl::ReferenceCounterOperator`2::CreateCounter(* T)::reference" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::ReferenceCounterOperator`2::T@s:vl.ReferenceCounterOperator`2" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="DeleteReference" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReferenceCounterOperator::DeleteReference" OverloadKey="::vl::ReferenceCounterOperator`2::DeleteReference(* volatile vint,* void)" Virtual="Static" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Destroy a pointer to the reference counter from an object.&lt;/summary&gt;
  &lt;param name="counter"&gt;The pointer to the reference counter.&lt;/param&gt;
  &lt;param name="reference"&gt;The object.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="counter" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReferenceCounterOperator::DeleteReference::counter" OverloadKey="::vl::ReferenceCounterOperator`2::DeleteReference(* volatile vint,* void)::counter" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Volatile">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::vint@s:vl.vint" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="reference" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReferenceCounterOperator::DeleteReference::reference" OverloadKey="::vl::ReferenceCounterOperator`2::DeleteReference(* volatile vint,* void)::reference" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl Name="void" />
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>