<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="::vl::ReaderWriterLock">
    <ClassDecl Access="Public" Name="ReaderWriterLock" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReaderWriterLock" OverloadKey="::vl::ReaderWriterLock" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;
Reader writer lock.
The macro "READER_LOCK" and "WRITER_LOCK" are encouraged to use instead of calling &lt;links&gt;&lt;link cref="::vl::ReaderWriterLock::EnterReader()@s:vl.ReaderWriterLock" /&gt;&lt;/links&gt;, &lt;links&gt;&lt;link cref="::vl::ReaderWriterLock::LeaveReader()@s:vl.ReaderWriterLock" /&gt;&lt;/links&gt;, &lt;links&gt;&lt;link cref="::vl::ReaderWriterLock::EnterWriter()@s:vl.ReaderWriterLock" /&gt;&lt;/links&gt; and &lt;links&gt;&lt;link cref="::vl::ReaderWriterLock::LeaveWriter()@s:vl.ReaderWriterLock" /&gt;&lt;/links&gt; like this:
READER_LOCK(yourLock)
{
	&amp;lt;code&amp;gt;
}
or
WRITER_LOCK(yourLock)
{
	&amp;lt;code&amp;gt;
}
&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <VarDecl Access="Private" Name="internalData" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReaderWriterLock::internalData" OverloadKey="::vl::ReaderWriterLock::internalData" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <SubTypeDecl Name="ReaderWriterLockData">
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::threading_internal" Name="threading_internal">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::threading_internal" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="ReaderWriterLock" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReaderWriterLock::ReaderWriterLock" OverloadKey="::vl::ReaderWriterLock::ReaderWriterLock()" Virtual="Normal" Function="Constructor">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Create a reader writer lock.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~ReaderWriterLock" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReaderWriterLock::~ReaderWriterLock" OverloadKey="::vl::ReaderWriterLock::~ReaderWriterLock()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="TryEnterReader" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReaderWriterLock::TryEnterReader" OverloadKey="::vl::ReaderWriterLock::TryEnterReader()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Try acquire a reader lock. This function will return immediately.&lt;/summary&gt;
  &lt;returns&gt;Returns true if the current thread acquired the reader lock.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="EnterReader" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReaderWriterLock::EnterReader" OverloadKey="::vl::ReaderWriterLock::EnterReader()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Acquire a reader lock.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="LeaveReader" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReaderWriterLock::LeaveReader" OverloadKey="::vl::ReaderWriterLock::LeaveReader()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Release a reader lock.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="TryEnterWriter" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReaderWriterLock::TryEnterWriter" OverloadKey="::vl::ReaderWriterLock::TryEnterWriter()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Try acquire a writer lock. This function will return immediately.&lt;/summary&gt;
  &lt;returns&gt;Returns true if the current thread acquired the writer lock.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="EnterWriter" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReaderWriterLock::EnterWriter" OverloadKey="::vl::ReaderWriterLock::EnterWriter()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Acquire a writer lock.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="LeaveWriter" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReaderWriterLock::LeaveWriter" OverloadKey="::vl::ReaderWriterLock::LeaveWriter()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Release a writer lock.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <ClassDecl Access="Public" Name="ReaderScope" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReaderWriterLock::ReaderScope" OverloadKey="::vl::ReaderWriterLock::ReaderScope" ClassType="Class">
          <Children>
            <VarDecl Access="Private" Name="lock" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReaderWriterLock::ReaderScope::lock" OverloadKey="::vl::ReaderWriterLock::ReaderScope::lock" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::ReaderWriterLock" Name="ReaderWriterLock">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::ReaderWriterLock@s:vl.ReaderWriterLock" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <FuncDecl Access="Public" Name="ReaderScope" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReaderWriterLock::ReaderScope::ReaderScope" OverloadKey="::vl::ReaderWriterLock::ReaderScope::ReaderScope(&amp; ReaderWriterLock)" Virtual="Normal" Function="Constructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="_lock" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReaderWriterLock::ReaderScope::ReaderScope::_lock" OverloadKey="::vl::ReaderWriterLock::ReaderScope::ReaderScope(&amp; ReaderWriterLock)::_lock" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::ReaderWriterLock" Name="ReaderWriterLock">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::ReaderWriterLock@s:vl.ReaderWriterLock" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="~ReaderScope" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReaderWriterLock::ReaderScope::~ReaderScope" OverloadKey="::vl::ReaderWriterLock::ReaderScope::~ReaderScope()" Virtual="Normal" Function="Destructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Object@s:vl.Object" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::NotCopyable" Name="NotCopyable">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::NotCopyable@s:vl.NotCopyable" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
        <ClassDecl Access="Public" Name="WriterScope" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReaderWriterLock::WriterScope" OverloadKey="::vl::ReaderWriterLock::WriterScope" ClassType="Class">
          <Children>
            <VarDecl Access="Private" Name="lock" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReaderWriterLock::WriterScope::lock" OverloadKey="::vl::ReaderWriterLock::WriterScope::lock" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::ReaderWriterLock" Name="ReaderWriterLock">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::ReaderWriterLock@s:vl.ReaderWriterLock" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <FuncDecl Access="Public" Name="WriterScope" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReaderWriterLock::WriterScope::WriterScope" OverloadKey="::vl::ReaderWriterLock::WriterScope::WriterScope(&amp; ReaderWriterLock)" Virtual="Normal" Function="Constructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="_lock" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReaderWriterLock::WriterScope::WriterScope::_lock" OverloadKey="::vl::ReaderWriterLock::WriterScope::WriterScope(&amp; ReaderWriterLock)::_lock" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::ReaderWriterLock" Name="ReaderWriterLock">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::ReaderWriterLock@s:vl.ReaderWriterLock" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="~WriterScope" Tags="x64, Windows;x86, Windows" NameKey="::vl::ReaderWriterLock::WriterScope::~WriterScope" OverloadKey="::vl::ReaderWriterLock::WriterScope::~WriterScope()" Virtual="Normal" Function="Destructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Object@s:vl.Object" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::NotCopyable" Name="NotCopyable">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::NotCopyable@s:vl.NotCopyable" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::NotCopyable" Name="NotCopyable">
              <ReferencingOverloadKeys>
                <Key Value="::vl::NotCopyable@s:vl.NotCopyable" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>